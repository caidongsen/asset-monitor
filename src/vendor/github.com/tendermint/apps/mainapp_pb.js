/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apps.Account', null, global);
goog.exportSymbol('proto.apps.App', null, global);
goog.exportSymbol('proto.apps.Coin', null, global);
goog.exportSymbol('proto.apps.MainTx', null, global);
goog.exportSymbol('proto.apps.MessageType', null, global);
goog.exportSymbol('proto.apps.ReadRequest', null, global);
goog.exportSymbol('proto.apps.ReceiptItem', null, global);
goog.exportSymbol('proto.apps.RequestAccountInfo', null, global);
goog.exportSymbol('proto.apps.RequestAddSender', null, global);
goog.exportSymbol('proto.apps.RequestAppConf', null, global);
goog.exportSymbol('proto.apps.RequestCreateApp', null, global);
goog.exportSymbol('proto.apps.RequestDelSender', null, global);
goog.exportSymbol('proto.apps.RequestDelWeight', null, global);
goog.exportSymbol('proto.apps.RequestReceipt', null, global);
goog.exportSymbol('proto.apps.RequestReceiptCreate', null, global);
goog.exportSymbol('proto.apps.RequestSetAccount', null, global);
goog.exportSymbol('proto.apps.RequestSetAdmin', null, global);
goog.exportSymbol('proto.apps.RequestSetAppVersion', null, global);
goog.exportSymbol('proto.apps.RequestSetWeight', null, global);
goog.exportSymbol('proto.apps.RequestTransfer', null, global);
goog.exportSymbol('proto.apps.RequestWalletInfo', null, global);
goog.exportSymbol('proto.apps.RequestWeightInfo', null, global);
goog.exportSymbol('proto.apps.Response', null, global);
goog.exportSymbol('proto.apps.ResponseAccountInfo', null, global);
goog.exportSymbol('proto.apps.ResponseAppConf', null, global);
goog.exportSymbol('proto.apps.ResponseException', null, global);
goog.exportSymbol('proto.apps.ResponseHash', null, global);
goog.exportSymbol('proto.apps.ResponseReceipt', null, global);
goog.exportSymbol('proto.apps.ResponseWalletInfo', null, global);
goog.exportSymbol('proto.apps.ResponseWeightInfo', null, global);
goog.exportSymbol('proto.apps.Sign', null, global);
goog.exportSymbol('proto.apps.SubAccount', null, global);
goog.exportSymbol('proto.apps.WriteRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.MainTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.MainTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.MainTx.displayName = 'proto.apps.MainTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.MainTx.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.MainTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.MainTx} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.MainTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sign: msg.getSign_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.MainTx}
 */
proto.apps.MainTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.MainTx;
  return proto.apps.MainTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.MainTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.MainTx}
 */
proto.apps.MainTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSigntype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.MainTx} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.MainTx.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.MainTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.MainTx.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getSigntype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int32 AppId = 1;
 * @return {number}
 */
proto.apps.MainTx.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.apps.MainTx.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 SignType = 2;
 * @return {number}
 */
proto.apps.MainTx.prototype.getSigntype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.MainTx.prototype.setSigntype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes Sign = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.MainTx.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Sign = 3;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.apps.MainTx.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes Sign = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.apps.MainTx.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.MainTx.prototype.setSign = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes Data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apps.MainTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.apps.MainTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.apps.MainTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.MainTx.prototype.setData = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apps.ReadRequest.repeatedFields_, proto.apps.ReadRequest.oneofGroups_);
};
goog.inherits(proto.apps.ReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ReadRequest.displayName = 'proto.apps.ReadRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apps.ReadRequest.repeatedFields_ = [9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apps.ReadRequest.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.apps.ReadRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  APPCONF: 1,
  WALLETINFO: 2,
  RECEIPT: 3,
  WEIGHTINFO: 4,
  ACCOUNTINFO: 5
};

/**
 * @return {proto.apps.ReadRequest.ValueCase}
 */
proto.apps.ReadRequest.prototype.getValueCase = function() {
  return /** @type {proto.apps.ReadRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.apps.ReadRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ReadRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appconf: (f = msg.getAppconf()) && proto.apps.RequestAppConf.toObject(includeInstance, f),
    walletinfo: (f = msg.getWalletinfo()) && proto.apps.RequestWalletInfo.toObject(includeInstance, f),
    receipt: (f = msg.getReceipt()) && proto.apps.RequestReceipt.toObject(includeInstance, f),
    weightinfo: (f = msg.getWeightinfo()) && proto.apps.RequestWeightInfo.toObject(includeInstance, f),
    accountinfo: (f = msg.getAccountinfo()) && proto.apps.RequestAccountInfo.toObject(includeInstance, f),
    appid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    account: msg.getAccount_asB64(),
    actionid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    signsList: msg.getSignsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ReadRequest}
 */
proto.apps.ReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ReadRequest;
  return proto.apps.ReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ReadRequest}
 */
proto.apps.ReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apps.RequestAppConf;
      reader.readMessage(value,proto.apps.RequestAppConf.deserializeBinaryFromReader);
      msg.setAppconf(value);
      break;
    case 2:
      var value = new proto.apps.RequestWalletInfo;
      reader.readMessage(value,proto.apps.RequestWalletInfo.deserializeBinaryFromReader);
      msg.setWalletinfo(value);
      break;
    case 3:
      var value = new proto.apps.RequestReceipt;
      reader.readMessage(value,proto.apps.RequestReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 4:
      var value = new proto.apps.RequestWeightInfo;
      reader.readMessage(value,proto.apps.RequestWeightInfo.deserializeBinaryFromReader);
      msg.setWeightinfo(value);
      break;
    case 5:
      var value = new proto.apps.RequestAccountInfo;
      reader.readMessage(value,proto.apps.RequestAccountInfo.deserializeBinaryFromReader);
      msg.setAccountinfo(value);
      break;
    case 6:
      var value = /** @type {!proto.apps.App} */ (reader.readEnum());
      msg.setAppid(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 8:
      var value = /** @type {!proto.apps.MessageType} */ (reader.readEnum());
      msg.setActionid(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ReadRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ReadRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppconf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apps.RequestAppConf.serializeBinaryToWriter
    );
  }
  f = this.getWalletinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apps.RequestWalletInfo.serializeBinaryToWriter
    );
  }
  f = this.getReceipt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apps.RequestReceipt.serializeBinaryToWriter
    );
  }
  f = this.getWeightinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apps.RequestWeightInfo.serializeBinaryToWriter
    );
  }
  f = this.getAccountinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apps.RequestAccountInfo.serializeBinaryToWriter
    );
  }
  f = this.getAppid();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getActionid();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = this.getSignsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
};


/**
 * optional RequestAppConf appConf = 1;
 * @return {?proto.apps.RequestAppConf}
 */
proto.apps.ReadRequest.prototype.getAppconf = function() {
  return /** @type{?proto.apps.RequestAppConf} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestAppConf, 1));
};


/** @param {?proto.apps.RequestAppConf|undefined} value */
proto.apps.ReadRequest.prototype.setAppconf = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.apps.ReadRequest.oneofGroups_[0], value);
};


proto.apps.ReadRequest.prototype.clearAppconf = function() {
  this.setAppconf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.ReadRequest.prototype.hasAppconf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestWalletInfo walletinfo = 2;
 * @return {?proto.apps.RequestWalletInfo}
 */
proto.apps.ReadRequest.prototype.getWalletinfo = function() {
  return /** @type{?proto.apps.RequestWalletInfo} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestWalletInfo, 2));
};


/** @param {?proto.apps.RequestWalletInfo|undefined} value */
proto.apps.ReadRequest.prototype.setWalletinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.apps.ReadRequest.oneofGroups_[0], value);
};


proto.apps.ReadRequest.prototype.clearWalletinfo = function() {
  this.setWalletinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.ReadRequest.prototype.hasWalletinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestReceipt receipt = 3;
 * @return {?proto.apps.RequestReceipt}
 */
proto.apps.ReadRequest.prototype.getReceipt = function() {
  return /** @type{?proto.apps.RequestReceipt} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestReceipt, 3));
};


/** @param {?proto.apps.RequestReceipt|undefined} value */
proto.apps.ReadRequest.prototype.setReceipt = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.apps.ReadRequest.oneofGroups_[0], value);
};


proto.apps.ReadRequest.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.ReadRequest.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestWeightInfo weightinfo = 4;
 * @return {?proto.apps.RequestWeightInfo}
 */
proto.apps.ReadRequest.prototype.getWeightinfo = function() {
  return /** @type{?proto.apps.RequestWeightInfo} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestWeightInfo, 4));
};


/** @param {?proto.apps.RequestWeightInfo|undefined} value */
proto.apps.ReadRequest.prototype.setWeightinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.apps.ReadRequest.oneofGroups_[0], value);
};


proto.apps.ReadRequest.prototype.clearWeightinfo = function() {
  this.setWeightinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.ReadRequest.prototype.hasWeightinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestAccountInfo accountinfo = 5;
 * @return {?proto.apps.RequestAccountInfo}
 */
proto.apps.ReadRequest.prototype.getAccountinfo = function() {
  return /** @type{?proto.apps.RequestAccountInfo} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestAccountInfo, 5));
};


/** @param {?proto.apps.RequestAccountInfo|undefined} value */
proto.apps.ReadRequest.prototype.setAccountinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.apps.ReadRequest.oneofGroups_[0], value);
};


proto.apps.ReadRequest.prototype.clearAccountinfo = function() {
  this.setAccountinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.ReadRequest.prototype.hasAccountinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional App appId = 6;
 * @return {!proto.apps.App}
 */
proto.apps.ReadRequest.prototype.getAppid = function() {
  return /** @type {!proto.apps.App} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.apps.App} value */
proto.apps.ReadRequest.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes account = 7;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ReadRequest.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes account = 7;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.ReadRequest.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.ReadRequest.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ReadRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional MessageType actionId = 8;
 * @return {!proto.apps.MessageType}
 */
proto.apps.ReadRequest.prototype.getActionid = function() {
  return /** @type {!proto.apps.MessageType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.apps.MessageType} value */
proto.apps.ReadRequest.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated bytes signs = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.apps.ReadRequest.prototype.getSignsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 9));
};


/**
 * repeated bytes signs = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getSignsList()`
 * @return {!Array.<string>}
 */
proto.apps.ReadRequest.prototype.getSignsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignsList()));
};


/**
 * repeated bytes signs = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.apps.ReadRequest.prototype.getSignsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.apps.ReadRequest.prototype.setSignsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.apps.ReadRequest.prototype.addSigns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.apps.ReadRequest.prototype.clearSignsList = function() {
  this.setSignsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.WriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apps.WriteRequest.repeatedFields_, proto.apps.WriteRequest.oneofGroups_);
};
goog.inherits(proto.apps.WriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.WriteRequest.displayName = 'proto.apps.WriteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apps.WriteRequest.repeatedFields_ = [20];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apps.WriteRequest.oneofGroups_ = [[1,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.apps.WriteRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  TRANSFER: 1,
  RECEIPTCREATE: 4,
  CREATEAPP: 5,
  ADDSENDER: 6,
  DELSENDER: 7,
  SETADMIN: 8,
  SETAPPVERSION: 9,
  SETWEIGHT: 10,
  DELWEIGHT: 11,
  SETACCOUNT: 12
};

/**
 * @return {proto.apps.WriteRequest.ValueCase}
 */
proto.apps.WriteRequest.prototype.getValueCase = function() {
  return /** @type {proto.apps.WriteRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.apps.WriteRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.WriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.WriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.WriteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.WriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transfer: (f = msg.getTransfer()) && proto.apps.RequestTransfer.toObject(includeInstance, f),
    receiptcreate: (f = msg.getReceiptcreate()) && proto.apps.RequestReceiptCreate.toObject(includeInstance, f),
    createapp: (f = msg.getCreateapp()) && proto.apps.RequestCreateApp.toObject(includeInstance, f),
    addsender: (f = msg.getAddsender()) && proto.apps.RequestAddSender.toObject(includeInstance, f),
    delsender: (f = msg.getDelsender()) && proto.apps.RequestDelSender.toObject(includeInstance, f),
    setadmin: (f = msg.getSetadmin()) && proto.apps.RequestSetAdmin.toObject(includeInstance, f),
    setappversion: (f = msg.getSetappversion()) && proto.apps.RequestSetAppVersion.toObject(includeInstance, f),
    setweight: (f = msg.getSetweight()) && proto.apps.RequestSetWeight.toObject(includeInstance, f),
    delweight: (f = msg.getDelweight()) && proto.apps.RequestDelWeight.toObject(includeInstance, f),
    setaccount: (f = msg.getSetaccount()) && proto.apps.RequestSetAccount.toObject(includeInstance, f),
    instructionid: jspb.Message.getFieldWithDefault(msg, 14, 0),
    appid: jspb.Message.getFieldWithDefault(msg, 15, 0),
    account: msg.getAccount_asB64(),
    actionid: jspb.Message.getFieldWithDefault(msg, 17, 0),
    signsList: msg.getSignsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.WriteRequest}
 */
proto.apps.WriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.WriteRequest;
  return proto.apps.WriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.WriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.WriteRequest}
 */
proto.apps.WriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apps.RequestTransfer;
      reader.readMessage(value,proto.apps.RequestTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 4:
      var value = new proto.apps.RequestReceiptCreate;
      reader.readMessage(value,proto.apps.RequestReceiptCreate.deserializeBinaryFromReader);
      msg.setReceiptcreate(value);
      break;
    case 5:
      var value = new proto.apps.RequestCreateApp;
      reader.readMessage(value,proto.apps.RequestCreateApp.deserializeBinaryFromReader);
      msg.setCreateapp(value);
      break;
    case 6:
      var value = new proto.apps.RequestAddSender;
      reader.readMessage(value,proto.apps.RequestAddSender.deserializeBinaryFromReader);
      msg.setAddsender(value);
      break;
    case 7:
      var value = new proto.apps.RequestDelSender;
      reader.readMessage(value,proto.apps.RequestDelSender.deserializeBinaryFromReader);
      msg.setDelsender(value);
      break;
    case 8:
      var value = new proto.apps.RequestSetAdmin;
      reader.readMessage(value,proto.apps.RequestSetAdmin.deserializeBinaryFromReader);
      msg.setSetadmin(value);
      break;
    case 9:
      var value = new proto.apps.RequestSetAppVersion;
      reader.readMessage(value,proto.apps.RequestSetAppVersion.deserializeBinaryFromReader);
      msg.setSetappversion(value);
      break;
    case 10:
      var value = new proto.apps.RequestSetWeight;
      reader.readMessage(value,proto.apps.RequestSetWeight.deserializeBinaryFromReader);
      msg.setSetweight(value);
      break;
    case 11:
      var value = new proto.apps.RequestDelWeight;
      reader.readMessage(value,proto.apps.RequestDelWeight.deserializeBinaryFromReader);
      msg.setDelweight(value);
      break;
    case 12:
      var value = new proto.apps.RequestSetAccount;
      reader.readMessage(value,proto.apps.RequestSetAccount.deserializeBinaryFromReader);
      msg.setSetaccount(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 15:
      var value = /** @type {!proto.apps.App} */ (reader.readEnum());
      msg.setAppid(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 17:
      var value = /** @type {!proto.apps.MessageType} */ (reader.readEnum());
      msg.setActionid(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.WriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.WriteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.WriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.WriteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTransfer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apps.RequestTransfer.serializeBinaryToWriter
    );
  }
  f = this.getReceiptcreate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apps.RequestReceiptCreate.serializeBinaryToWriter
    );
  }
  f = this.getCreateapp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apps.RequestCreateApp.serializeBinaryToWriter
    );
  }
  f = this.getAddsender();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apps.RequestAddSender.serializeBinaryToWriter
    );
  }
  f = this.getDelsender();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apps.RequestDelSender.serializeBinaryToWriter
    );
  }
  f = this.getSetadmin();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apps.RequestSetAdmin.serializeBinaryToWriter
    );
  }
  f = this.getSetappversion();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apps.RequestSetAppVersion.serializeBinaryToWriter
    );
  }
  f = this.getSetweight();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apps.RequestSetWeight.serializeBinaryToWriter
    );
  }
  f = this.getDelweight();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apps.RequestDelWeight.serializeBinaryToWriter
    );
  }
  f = this.getSetaccount();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apps.RequestSetAccount.serializeBinaryToWriter
    );
  }
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = this.getAppid();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = this.getActionid();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = this.getSignsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      20,
      f
    );
  }
};


/**
 * optional RequestTransfer transfer = 1;
 * @return {?proto.apps.RequestTransfer}
 */
proto.apps.WriteRequest.prototype.getTransfer = function() {
  return /** @type{?proto.apps.RequestTransfer} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestTransfer, 1));
};


/** @param {?proto.apps.RequestTransfer|undefined} value */
proto.apps.WriteRequest.prototype.setTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearTransfer = function() {
  this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestReceiptCreate receiptCreate = 4;
 * @return {?proto.apps.RequestReceiptCreate}
 */
proto.apps.WriteRequest.prototype.getReceiptcreate = function() {
  return /** @type{?proto.apps.RequestReceiptCreate} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestReceiptCreate, 4));
};


/** @param {?proto.apps.RequestReceiptCreate|undefined} value */
proto.apps.WriteRequest.prototype.setReceiptcreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearReceiptcreate = function() {
  this.setReceiptcreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasReceiptcreate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestCreateApp createApp = 5;
 * @return {?proto.apps.RequestCreateApp}
 */
proto.apps.WriteRequest.prototype.getCreateapp = function() {
  return /** @type{?proto.apps.RequestCreateApp} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestCreateApp, 5));
};


/** @param {?proto.apps.RequestCreateApp|undefined} value */
proto.apps.WriteRequest.prototype.setCreateapp = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearCreateapp = function() {
  this.setCreateapp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasCreateapp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestAddSender addSender = 6;
 * @return {?proto.apps.RequestAddSender}
 */
proto.apps.WriteRequest.prototype.getAddsender = function() {
  return /** @type{?proto.apps.RequestAddSender} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestAddSender, 6));
};


/** @param {?proto.apps.RequestAddSender|undefined} value */
proto.apps.WriteRequest.prototype.setAddsender = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearAddsender = function() {
  this.setAddsender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasAddsender = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestDelSender delSender = 7;
 * @return {?proto.apps.RequestDelSender}
 */
proto.apps.WriteRequest.prototype.getDelsender = function() {
  return /** @type{?proto.apps.RequestDelSender} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestDelSender, 7));
};


/** @param {?proto.apps.RequestDelSender|undefined} value */
proto.apps.WriteRequest.prototype.setDelsender = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearDelsender = function() {
  this.setDelsender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasDelsender = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RequestSetAdmin setAdmin = 8;
 * @return {?proto.apps.RequestSetAdmin}
 */
proto.apps.WriteRequest.prototype.getSetadmin = function() {
  return /** @type{?proto.apps.RequestSetAdmin} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestSetAdmin, 8));
};


/** @param {?proto.apps.RequestSetAdmin|undefined} value */
proto.apps.WriteRequest.prototype.setSetadmin = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearSetadmin = function() {
  this.setSetadmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasSetadmin = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestSetAppVersion setAppVersion = 9;
 * @return {?proto.apps.RequestSetAppVersion}
 */
proto.apps.WriteRequest.prototype.getSetappversion = function() {
  return /** @type{?proto.apps.RequestSetAppVersion} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestSetAppVersion, 9));
};


/** @param {?proto.apps.RequestSetAppVersion|undefined} value */
proto.apps.WriteRequest.prototype.setSetappversion = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearSetappversion = function() {
  this.setSetappversion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasSetappversion = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RequestSetWeight setWeight = 10;
 * @return {?proto.apps.RequestSetWeight}
 */
proto.apps.WriteRequest.prototype.getSetweight = function() {
  return /** @type{?proto.apps.RequestSetWeight} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestSetWeight, 10));
};


/** @param {?proto.apps.RequestSetWeight|undefined} value */
proto.apps.WriteRequest.prototype.setSetweight = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearSetweight = function() {
  this.setSetweight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasSetweight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RequestDelWeight delWeight = 11;
 * @return {?proto.apps.RequestDelWeight}
 */
proto.apps.WriteRequest.prototype.getDelweight = function() {
  return /** @type{?proto.apps.RequestDelWeight} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestDelWeight, 11));
};


/** @param {?proto.apps.RequestDelWeight|undefined} value */
proto.apps.WriteRequest.prototype.setDelweight = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearDelweight = function() {
  this.setDelweight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasDelweight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RequestSetAccount setAccount = 12;
 * @return {?proto.apps.RequestSetAccount}
 */
proto.apps.WriteRequest.prototype.getSetaccount = function() {
  return /** @type{?proto.apps.RequestSetAccount} */ (
    jspb.Message.getWrapperField(this, proto.apps.RequestSetAccount, 12));
};


/** @param {?proto.apps.RequestSetAccount|undefined} value */
proto.apps.WriteRequest.prototype.setSetaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.apps.WriteRequest.oneofGroups_[0], value);
};


proto.apps.WriteRequest.prototype.clearSetaccount = function() {
  this.setSetaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.WriteRequest.prototype.hasSetaccount = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int64 instructionId = 14;
 * @return {number}
 */
proto.apps.WriteRequest.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.apps.WriteRequest.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional App appId = 15;
 * @return {!proto.apps.App}
 */
proto.apps.WriteRequest.prototype.getAppid = function() {
  return /** @type {!proto.apps.App} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.apps.App} value */
proto.apps.WriteRequest.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional bytes account = 16;
 * @return {!(string|Uint8Array)}
 */
proto.apps.WriteRequest.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes account = 16;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.WriteRequest.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.WriteRequest.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.WriteRequest.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional MessageType actionId = 17;
 * @return {!proto.apps.MessageType}
 */
proto.apps.WriteRequest.prototype.getActionid = function() {
  return /** @type {!proto.apps.MessageType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.apps.MessageType} value */
proto.apps.WriteRequest.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * repeated bytes signs = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.apps.WriteRequest.prototype.getSignsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 20));
};


/**
 * repeated bytes signs = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getSignsList()`
 * @return {!Array.<string>}
 */
proto.apps.WriteRequest.prototype.getSignsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignsList()));
};


/**
 * repeated bytes signs = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.apps.WriteRequest.prototype.getSignsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.apps.WriteRequest.prototype.setSignsList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.apps.WriteRequest.prototype.addSigns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.apps.WriteRequest.prototype.clearSignsList = function() {
  this.setSignsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestCreateApp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestCreateApp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestCreateApp.displayName = 'proto.apps.RequestCreateApp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestCreateApp.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestCreateApp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestCreateApp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestCreateApp.toObject = function(includeInstance, msg) {
  var f, obj = {
    admin: msg.getAdmin_asB64(),
    appid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestCreateApp}
 */
proto.apps.RequestCreateApp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestCreateApp;
  return proto.apps.RequestCreateApp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestCreateApp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestCreateApp}
 */
proto.apps.RequestCreateApp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdmin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestCreateApp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestCreateApp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestCreateApp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestCreateApp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAdmin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes admin = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestCreateApp.prototype.getAdmin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes admin = 3;
 * This is a type-conversion wrapper around `getAdmin()`
 * @return {string}
 */
proto.apps.RequestCreateApp.prototype.getAdmin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdmin()));
};


/**
 * optional bytes admin = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdmin()`
 * @return {!Uint8Array}
 */
proto.apps.RequestCreateApp.prototype.getAdmin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdmin()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestCreateApp.prototype.setAdmin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appId = 4;
 * @return {number}
 */
proto.apps.RequestCreateApp.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestCreateApp.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestTransfer.displayName = 'proto.apps.RequestTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestTransfer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    toaddr: msg.getToaddr_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    coinid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestTransfer}
 */
proto.apps.RequestTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestTransfer;
  return proto.apps.RequestTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestTransfer}
 */
proto.apps.RequestTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToaddr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestTransfer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestTransfer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestTransfer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToaddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bytes toAddr = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestTransfer.prototype.getToaddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes toAddr = 3;
 * This is a type-conversion wrapper around `getToaddr()`
 * @return {string}
 */
proto.apps.RequestTransfer.prototype.getToaddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToaddr()));
};


/**
 * optional bytes toAddr = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToaddr()`
 * @return {!Uint8Array}
 */
proto.apps.RequestTransfer.prototype.getToaddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToaddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestTransfer.prototype.setToaddr = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 amount = 4;
 * @return {number}
 */
proto.apps.RequestTransfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestTransfer.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 coinId = 5;
 * @return {number}
 */
proto.apps.RequestTransfer.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.RequestTransfer.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestAddSender = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestAddSender, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestAddSender.displayName = 'proto.apps.RequestAddSender';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestAddSender.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestAddSender.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestAddSender} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestAddSender.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: msg.getSender_asB64(),
    appid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestAddSender}
 */
proto.apps.RequestAddSender.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestAddSender;
  return proto.apps.RequestAddSender.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestAddSender} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestAddSender}
 */
proto.apps.RequestAddSender.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestAddSender} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestAddSender.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestAddSender.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestAddSender.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes sender = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestAddSender.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender = 3;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.apps.RequestAddSender.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.apps.RequestAddSender.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestAddSender.prototype.setSender = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appId = 4;
 * @return {number}
 */
proto.apps.RequestAddSender.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestAddSender.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestDelSender = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestDelSender, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestDelSender.displayName = 'proto.apps.RequestDelSender';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestDelSender.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestDelSender.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestDelSender} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestDelSender.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: msg.getSender_asB64(),
    appid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestDelSender}
 */
proto.apps.RequestDelSender.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestDelSender;
  return proto.apps.RequestDelSender.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestDelSender} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestDelSender}
 */
proto.apps.RequestDelSender.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestDelSender} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestDelSender.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestDelSender.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestDelSender.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes sender = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestDelSender.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender = 3;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.apps.RequestDelSender.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.apps.RequestDelSender.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestDelSender.prototype.setSender = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appId = 4;
 * @return {number}
 */
proto.apps.RequestDelSender.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestDelSender.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestSetAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestSetAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestSetAdmin.displayName = 'proto.apps.RequestSetAdmin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestSetAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestSetAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestSetAdmin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestSetAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    admin: msg.getAdmin_asB64(),
    appid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestSetAdmin}
 */
proto.apps.RequestSetAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestSetAdmin;
  return proto.apps.RequestSetAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestSetAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestSetAdmin}
 */
proto.apps.RequestSetAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdmin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestSetAdmin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetAdmin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestSetAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetAdmin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAdmin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes admin = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestSetAdmin.prototype.getAdmin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes admin = 3;
 * This is a type-conversion wrapper around `getAdmin()`
 * @return {string}
 */
proto.apps.RequestSetAdmin.prototype.getAdmin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdmin()));
};


/**
 * optional bytes admin = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdmin()`
 * @return {!Uint8Array}
 */
proto.apps.RequestSetAdmin.prototype.getAdmin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdmin()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestSetAdmin.prototype.setAdmin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appId = 4;
 * @return {number}
 */
proto.apps.RequestSetAdmin.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestSetAdmin.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestSetAppVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestSetAppVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestSetAppVersion.displayName = 'proto.apps.RequestSetAppVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestSetAppVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestSetAppVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestSetAppVersion} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestSetAppVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appversion: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestSetAppVersion}
 */
proto.apps.RequestSetAppVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestSetAppVersion;
  return proto.apps.RequestSetAppVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestSetAppVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestSetAppVersion}
 */
proto.apps.RequestSetAppVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestSetAppVersion} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetAppVersion.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestSetAppVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetAppVersion.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getAppversion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 appId = 3;
 * @return {number}
 */
proto.apps.RequestSetAppVersion.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.RequestSetAppVersion.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appVersion = 4;
 * @return {number}
 */
proto.apps.RequestSetAppVersion.prototype.getAppversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestSetAppVersion.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestSetWeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestSetWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestSetWeight.displayName = 'proto.apps.RequestSetWeight';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestSetWeight.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestSetWeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestSetWeight} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestSetWeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccount: msg.getSubaccount_asB64(),
    coinid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transferweight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    queryweight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    managerweight: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestSetWeight}
 */
proto.apps.RequestSetWeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestSetWeight;
  return proto.apps.RequestSetWeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestSetWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestSetWeight}
 */
proto.apps.RequestSetWeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransferweight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueryweight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setManagerweight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestSetWeight} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetWeight.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestSetWeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetWeight.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getTransferweight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getQueryweight();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getManagerweight();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional bytes subaccount = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestSetWeight.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes subaccount = 4;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.apps.RequestSetWeight.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.apps.RequestSetWeight.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestSetWeight.prototype.setSubaccount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 coinId = 5;
 * @return {number}
 */
proto.apps.RequestSetWeight.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.RequestSetWeight.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 transferWeight = 6;
 * @return {number}
 */
proto.apps.RequestSetWeight.prototype.getTransferweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.apps.RequestSetWeight.prototype.setTransferweight = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 queryWeight = 7;
 * @return {number}
 */
proto.apps.RequestSetWeight.prototype.getQueryweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.apps.RequestSetWeight.prototype.setQueryweight = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 managerWeight = 8;
 * @return {number}
 */
proto.apps.RequestSetWeight.prototype.getManagerweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.apps.RequestSetWeight.prototype.setManagerweight = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestDelWeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestDelWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestDelWeight.displayName = 'proto.apps.RequestDelWeight';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestDelWeight.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestDelWeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestDelWeight} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestDelWeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccount: msg.getSubaccount_asB64(),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestDelWeight}
 */
proto.apps.RequestDelWeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestDelWeight;
  return proto.apps.RequestDelWeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestDelWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestDelWeight}
 */
proto.apps.RequestDelWeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestDelWeight} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestDelWeight.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestDelWeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestDelWeight.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes subaccount = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestDelWeight.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes subaccount = 3;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.apps.RequestDelWeight.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.apps.RequestDelWeight.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestDelWeight.prototype.setSubaccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.RequestDelWeight.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestDelWeight.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestSetAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestSetAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestSetAccount.displayName = 'proto.apps.RequestSetAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestSetAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestSetAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestSetAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestSetAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    frozen: jspb.Message.getFieldWithDefault(msg, 2, 0),
    active: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transfer: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestSetAccount}
 */
proto.apps.RequestSetAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestSetAccount;
  return proto.apps.RequestSetAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestSetAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestSetAccount}
 */
proto.apps.RequestSetAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrozen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestSetAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestSetAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestSetAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrozen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getActive();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getTransfer();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestSetAccount.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.RequestSetAccount.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.RequestSetAccount.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestSetAccount.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 frozen = 2;
 * @return {number}
 */
proto.apps.RequestSetAccount.prototype.getFrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.RequestSetAccount.prototype.setFrozen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 active = 3;
 * @return {number}
 */
proto.apps.RequestSetAccount.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.RequestSetAccount.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.RequestSetAccount.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestSetAccount.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 transfer = 5;
 * @return {number}
 */
proto.apps.RequestSetAccount.prototype.getTransfer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.RequestSetAccount.prototype.setTransfer = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ReceiptItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ReceiptItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ReceiptItem.displayName = 'proto.apps.ReceiptItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ReceiptItem.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ReceiptItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ReceiptItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ReceiptItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: msg.getTxhash_asB64(),
    result: msg.getResult_asB64(),
    isok: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ReceiptItem}
 */
proto.apps.ReceiptItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ReceiptItem;
  return proto.apps.ReceiptItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ReceiptItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ReceiptItem}
 */
proto.apps.ReceiptItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResult(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ReceiptItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ReceiptItem.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ReceiptItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ReceiptItem.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getIsok();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes txhash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ReceiptItem.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes txhash = 3;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.apps.ReceiptItem.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes txhash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.apps.ReceiptItem.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ReceiptItem.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes result = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ReceiptItem.prototype.getResult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes result = 4;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.apps.ReceiptItem.prototype.getResult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResult()));
};


/**
 * optional bytes result = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.apps.ReceiptItem.prototype.getResult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResult()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ReceiptItem.prototype.setResult = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool isok = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.apps.ReceiptItem.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.apps.ReceiptItem.prototype.setIsok = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestReceiptCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apps.RequestReceiptCreate.repeatedFields_, null);
};
goog.inherits(proto.apps.RequestReceiptCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestReceiptCreate.displayName = 'proto.apps.RequestReceiptCreate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apps.RequestReceiptCreate.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestReceiptCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestReceiptCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestReceiptCreate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestReceiptCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appversion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
    proto.apps.ReceiptItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestReceiptCreate}
 */
proto.apps.RequestReceiptCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestReceiptCreate;
  return proto.apps.RequestReceiptCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestReceiptCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestReceiptCreate}
 */
proto.apps.RequestReceiptCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppversion(value);
      break;
    case 5:
      var value = new proto.apps.ReceiptItem;
      reader.readMessage(value,proto.apps.ReceiptItem.deserializeBinaryFromReader);
      msg.addReceipts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestReceiptCreate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestReceiptCreate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestReceiptCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestReceiptCreate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getAppversion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apps.ReceiptItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 appId = 3;
 * @return {number}
 */
proto.apps.RequestReceiptCreate.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.RequestReceiptCreate.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appVersion = 4;
 * @return {number}
 */
proto.apps.RequestReceiptCreate.prototype.getAppversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestReceiptCreate.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated ReceiptItem receipts = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.apps.ReceiptItem>}
 */
proto.apps.RequestReceiptCreate.prototype.getReceiptsList = function() {
  return /** @type{!Array.<!proto.apps.ReceiptItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apps.ReceiptItem, 5));
};


/** @param {!Array.<!proto.apps.ReceiptItem>} value */
proto.apps.RequestReceiptCreate.prototype.setReceiptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apps.ReceiptItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apps.ReceiptItem}
 */
proto.apps.RequestReceiptCreate.prototype.addReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apps.ReceiptItem, opt_index);
};


proto.apps.RequestReceiptCreate.prototype.clearReceiptsList = function() {
  this.setReceiptsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestReceipt.displayName = 'proto.apps.RequestReceipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestReceipt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: msg.getTxhash_asB64(),
    appversion: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestReceipt}
 */
proto.apps.RequestReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestReceipt;
  return proto.apps.RequestReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestReceipt}
 */
proto.apps.RequestReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestReceipt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestReceipt.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestReceipt.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getAppversion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes txhash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestReceipt.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes txhash = 3;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.apps.RequestReceipt.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes txhash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.apps.RequestReceipt.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestReceipt.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appVersion = 4;
 * @return {number}
 */
proto.apps.RequestReceipt.prototype.getAppversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestReceipt.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestWeightInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestWeightInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestWeightInfo.displayName = 'proto.apps.RequestWeightInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestWeightInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestWeightInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestWeightInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestWeightInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccount: msg.getSubaccount_asB64(),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestWeightInfo}
 */
proto.apps.RequestWeightInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestWeightInfo;
  return proto.apps.RequestWeightInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestWeightInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestWeightInfo}
 */
proto.apps.RequestWeightInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestWeightInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestWeightInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestWeightInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestWeightInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes subaccount = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestWeightInfo.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes subaccount = 3;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.apps.RequestWeightInfo.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.apps.RequestWeightInfo.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestWeightInfo.prototype.setSubaccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.RequestWeightInfo.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestWeightInfo.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestAccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestAccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestAccountInfo.displayName = 'proto.apps.RequestAccountInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestAccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestAccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestAccountInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestAccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    frozen: jspb.Message.getFieldWithDefault(msg, 2, 0),
    active: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transfer: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestAccountInfo}
 */
proto.apps.RequestAccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestAccountInfo;
  return proto.apps.RequestAccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestAccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestAccountInfo}
 */
proto.apps.RequestAccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrozen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestAccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestAccountInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestAccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestAccountInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrozen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getActive();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getTransfer();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.RequestAccountInfo.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.RequestAccountInfo.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.RequestAccountInfo.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.RequestAccountInfo.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 frozen = 2;
 * @return {number}
 */
proto.apps.RequestAccountInfo.prototype.getFrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.RequestAccountInfo.prototype.setFrozen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 active = 3;
 * @return {number}
 */
proto.apps.RequestAccountInfo.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.RequestAccountInfo.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.RequestAccountInfo.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.RequestAccountInfo.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 transfer = 5;
 * @return {number}
 */
proto.apps.RequestAccountInfo.prototype.getTransfer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.RequestAccountInfo.prototype.setTransfer = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestAppConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestAppConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestAppConf.displayName = 'proto.apps.RequestAppConf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestAppConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestAppConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestAppConf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestAppConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestAppConf}
 */
proto.apps.RequestAppConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestAppConf;
  return proto.apps.RequestAppConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestAppConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestAppConf}
 */
proto.apps.RequestAppConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestAppConf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestAppConf.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestAppConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestAppConf.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 appId = 2;
 * @return {number}
 */
proto.apps.RequestAppConf.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.RequestAppConf.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.RequestWalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.RequestWalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.RequestWalletInfo.displayName = 'proto.apps.RequestWalletInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.RequestWalletInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.RequestWalletInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.RequestWalletInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.RequestWalletInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    coinid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.RequestWalletInfo}
 */
proto.apps.RequestWalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.RequestWalletInfo;
  return proto.apps.RequestWalletInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.RequestWalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.RequestWalletInfo}
 */
proto.apps.RequestWalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.RequestWalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestWalletInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.RequestWalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.RequestWalletInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 coinId = 2;
 * @return {number}
 */
proto.apps.RequestWalletInfo.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.RequestWalletInfo.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.Account.displayName = 'proto.apps.Account';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.Account} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    frozen: jspb.Message.getFieldWithDefault(msg, 2, 0),
    active: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transfer: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.Account}
 */
proto.apps.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.Account;
  return proto.apps.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.Account}
 */
proto.apps.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrozen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.Account} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.Account.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.Account.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrozen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getActive();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getTransfer();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.Account.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.Account.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.Account.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.Account.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 frozen = 2;
 * @return {number}
 */
proto.apps.Account.prototype.getFrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.Account.prototype.setFrozen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 active = 3;
 * @return {number}
 */
proto.apps.Account.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.Account.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.Account.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.Account.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 transfer = 5;
 * @return {number}
 */
proto.apps.Account.prototype.getTransfer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.Account.prototype.setTransfer = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.SubAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.SubAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.SubAccount.displayName = 'proto.apps.SubAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.SubAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.SubAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.SubAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.SubAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    subaccount: msg.getSubaccount_asB64(),
    coinid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transferweight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    queryweight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    managerweight: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.SubAccount}
 */
proto.apps.SubAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.SubAccount;
  return proto.apps.SubAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.SubAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.SubAccount}
 */
proto.apps.SubAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransferweight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueryweight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setManagerweight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.SubAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.SubAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.SubAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.SubAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getTransferweight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getQueryweight();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getManagerweight();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional bytes account = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.SubAccount.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes account = 3;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.SubAccount.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.SubAccount.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.SubAccount.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes subaccount = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apps.SubAccount.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes subaccount = 4;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.apps.SubAccount.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.apps.SubAccount.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.SubAccount.prototype.setSubaccount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 coinId = 5;
 * @return {number}
 */
proto.apps.SubAccount.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.SubAccount.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 transferWeight = 6;
 * @return {number}
 */
proto.apps.SubAccount.prototype.getTransferweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.apps.SubAccount.prototype.setTransferweight = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 queryWeight = 7;
 * @return {number}
 */
proto.apps.SubAccount.prototype.getQueryweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.apps.SubAccount.prototype.setQueryweight = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 managerWeight = 8;
 * @return {number}
 */
proto.apps.SubAccount.prototype.getManagerweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.apps.SubAccount.prototype.setManagerweight = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apps.Response.oneofGroups_);
};
goog.inherits(proto.apps.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.Response.displayName = 'proto.apps.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apps.Response.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.apps.Response.ValueCase = {
  VALUE_NOT_SET: 0,
  EXCEPTION: 1,
  RECEIPT: 2,
  WALLETINFO: 3,
  HASH: 4,
  APPCONF: 5,
  WEIGHTINFO: 6,
  ACCOUNTINFO: 7
};

/**
 * @return {proto.apps.Response.ValueCase}
 */
proto.apps.Response.prototype.getValueCase = function() {
  return /** @type {proto.apps.Response.ValueCase} */(jspb.Message.computeOneofCase(this, proto.apps.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    exception: (f = msg.getException()) && proto.apps.ResponseException.toObject(includeInstance, f),
    receipt: (f = msg.getReceipt()) && proto.apps.ResponseReceipt.toObject(includeInstance, f),
    walletinfo: (f = msg.getWalletinfo()) && proto.apps.ResponseWalletInfo.toObject(includeInstance, f),
    hash: (f = msg.getHash()) && proto.apps.ResponseHash.toObject(includeInstance, f),
    appconf: (f = msg.getAppconf()) && proto.apps.ResponseAppConf.toObject(includeInstance, f),
    weightinfo: (f = msg.getWeightinfo()) && proto.apps.ResponseWeightInfo.toObject(includeInstance, f),
    accountinfo: (f = msg.getAccountinfo()) && proto.apps.ResponseAccountInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.Response}
 */
proto.apps.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.Response;
  return proto.apps.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.Response}
 */
proto.apps.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apps.ResponseException;
      reader.readMessage(value,proto.apps.ResponseException.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    case 2:
      var value = new proto.apps.ResponseReceipt;
      reader.readMessage(value,proto.apps.ResponseReceipt.deserializeBinaryFromReader);
      msg.setReceipt(value);
      break;
    case 3:
      var value = new proto.apps.ResponseWalletInfo;
      reader.readMessage(value,proto.apps.ResponseWalletInfo.deserializeBinaryFromReader);
      msg.setWalletinfo(value);
      break;
    case 4:
      var value = new proto.apps.ResponseHash;
      reader.readMessage(value,proto.apps.ResponseHash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 5:
      var value = new proto.apps.ResponseAppConf;
      reader.readMessage(value,proto.apps.ResponseAppConf.deserializeBinaryFromReader);
      msg.setAppconf(value);
      break;
    case 6:
      var value = new proto.apps.ResponseWeightInfo;
      reader.readMessage(value,proto.apps.ResponseWeightInfo.deserializeBinaryFromReader);
      msg.setWeightinfo(value);
      break;
    case 7:
      var value = new proto.apps.ResponseAccountInfo;
      reader.readMessage(value,proto.apps.ResponseAccountInfo.deserializeBinaryFromReader);
      msg.setAccountinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getException();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apps.ResponseException.serializeBinaryToWriter
    );
  }
  f = this.getReceipt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apps.ResponseReceipt.serializeBinaryToWriter
    );
  }
  f = this.getWalletinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apps.ResponseWalletInfo.serializeBinaryToWriter
    );
  }
  f = this.getHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apps.ResponseHash.serializeBinaryToWriter
    );
  }
  f = this.getAppconf();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apps.ResponseAppConf.serializeBinaryToWriter
    );
  }
  f = this.getWeightinfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apps.ResponseWeightInfo.serializeBinaryToWriter
    );
  }
  f = this.getAccountinfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apps.ResponseAccountInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseException exception = 1;
 * @return {?proto.apps.ResponseException}
 */
proto.apps.Response.prototype.getException = function() {
  return /** @type{?proto.apps.ResponseException} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseException, 1));
};


/** @param {?proto.apps.ResponseException|undefined} value */
proto.apps.Response.prototype.setException = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasException = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseReceipt receipt = 2;
 * @return {?proto.apps.ResponseReceipt}
 */
proto.apps.Response.prototype.getReceipt = function() {
  return /** @type{?proto.apps.ResponseReceipt} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseReceipt, 2));
};


/** @param {?proto.apps.ResponseReceipt|undefined} value */
proto.apps.Response.prototype.setReceipt = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearReceipt = function() {
  this.setReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasReceipt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseWalletInfo walletInfo = 3;
 * @return {?proto.apps.ResponseWalletInfo}
 */
proto.apps.Response.prototype.getWalletinfo = function() {
  return /** @type{?proto.apps.ResponseWalletInfo} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseWalletInfo, 3));
};


/** @param {?proto.apps.ResponseWalletInfo|undefined} value */
proto.apps.Response.prototype.setWalletinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearWalletinfo = function() {
  this.setWalletinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasWalletinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseHash hash = 4;
 * @return {?proto.apps.ResponseHash}
 */
proto.apps.Response.prototype.getHash = function() {
  return /** @type{?proto.apps.ResponseHash} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseHash, 4));
};


/** @param {?proto.apps.ResponseHash|undefined} value */
proto.apps.Response.prototype.setHash = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearHash = function() {
  this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResponseAppConf appConf = 5;
 * @return {?proto.apps.ResponseAppConf}
 */
proto.apps.Response.prototype.getAppconf = function() {
  return /** @type{?proto.apps.ResponseAppConf} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseAppConf, 5));
};


/** @param {?proto.apps.ResponseAppConf|undefined} value */
proto.apps.Response.prototype.setAppconf = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearAppconf = function() {
  this.setAppconf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasAppconf = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResponseWeightInfo weightInfo = 6;
 * @return {?proto.apps.ResponseWeightInfo}
 */
proto.apps.Response.prototype.getWeightinfo = function() {
  return /** @type{?proto.apps.ResponseWeightInfo} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseWeightInfo, 6));
};


/** @param {?proto.apps.ResponseWeightInfo|undefined} value */
proto.apps.Response.prototype.setWeightinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearWeightinfo = function() {
  this.setWeightinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasWeightinfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ResponseAccountInfo accountInfo = 7;
 * @return {?proto.apps.ResponseAccountInfo}
 */
proto.apps.Response.prototype.getAccountinfo = function() {
  return /** @type{?proto.apps.ResponseAccountInfo} */ (
    jspb.Message.getWrapperField(this, proto.apps.ResponseAccountInfo, 7));
};


/** @param {?proto.apps.ResponseAccountInfo|undefined} value */
proto.apps.Response.prototype.setAccountinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.apps.Response.oneofGroups_[0], value);
};


proto.apps.Response.prototype.clearAccountinfo = function() {
  this.setAccountinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apps.Response.prototype.hasAccountinfo = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseException = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ResponseException, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseException.displayName = 'proto.apps.ResponseException';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseException.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseException.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseException} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseException.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseException}
 */
proto.apps.ResponseException.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseException;
  return proto.apps.ResponseException.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseException} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseException}
 */
proto.apps.ResponseException.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseException} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseException.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseException.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseException.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.apps.ResponseException.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apps.ResponseException.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ResponseHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseHash.displayName = 'proto.apps.ResponseHash';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseHash.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseHash} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: msg.getTxhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseHash}
 */
proto.apps.ResponseHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseHash;
  return proto.apps.ResponseHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseHash}
 */
proto.apps.ResponseHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseHash} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseHash.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseHash.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes txHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseHash.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txHash = 1;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.apps.ResponseHash.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes txHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseHash.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseHash.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ResponseReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseReceipt.displayName = 'proto.apps.ResponseReceipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseReceipt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appversion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txhash: msg.getTxhash_asB64(),
    result: msg.getResult_asB64(),
    isok: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseReceipt}
 */
proto.apps.ResponseReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseReceipt;
  return proto.apps.ResponseReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseReceipt}
 */
proto.apps.ResponseReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppversion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResult(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseReceipt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseReceipt.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseReceipt.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getAppversion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getIsok();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 appId = 1;
 * @return {number}
 */
proto.apps.ResponseReceipt.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.apps.ResponseReceipt.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 appVersion = 2;
 * @return {number}
 */
proto.apps.ResponseReceipt.prototype.getAppversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.ResponseReceipt.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes txHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseReceipt.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes txHash = 3;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.apps.ResponseReceipt.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes txHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseReceipt.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseReceipt.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes result = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseReceipt.prototype.getResult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes result = 4;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.apps.ResponseReceipt.prototype.getResult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResult()));
};


/**
 * optional bytes result = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseReceipt.prototype.getResult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResult()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseReceipt.prototype.setResult = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool isOk = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.apps.ResponseReceipt.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.apps.ResponseReceipt.prototype.setIsok = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseWalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ResponseWalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseWalletInfo.displayName = 'proto.apps.ResponseWalletInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseWalletInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseWalletInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseWalletInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseWalletInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    frozen: jspb.Message.getFieldWithDefault(msg, 2, 0),
    active: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseWalletInfo}
 */
proto.apps.ResponseWalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseWalletInfo;
  return proto.apps.ResponseWalletInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseWalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseWalletInfo}
 */
proto.apps.ResponseWalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrozen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseWalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseWalletInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseWalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseWalletInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrozen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getActive();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseWalletInfo.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.ResponseWalletInfo.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseWalletInfo.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseWalletInfo.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 frozen = 2;
 * @return {number}
 */
proto.apps.ResponseWalletInfo.prototype.getFrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.ResponseWalletInfo.prototype.setFrozen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 active = 3;
 * @return {number}
 */
proto.apps.ResponseWalletInfo.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.ResponseWalletInfo.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.ResponseWalletInfo.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.ResponseWalletInfo.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseAppConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apps.ResponseAppConf.repeatedFields_, null);
};
goog.inherits(proto.apps.ResponseAppConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseAppConf.displayName = 'proto.apps.ResponseAppConf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apps.ResponseAppConf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseAppConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseAppConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseAppConf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseAppConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    admin: msg.getAdmin_asB64(),
    sendersList: msg.getSendersList_asB64(),
    appid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appversion: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseAppConf}
 */
proto.apps.ResponseAppConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseAppConf;
  return proto.apps.ResponseAppConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseAppConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseAppConf}
 */
proto.apps.ResponseAppConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdmin(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSenders(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseAppConf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseAppConf.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseAppConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseAppConf.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAdmin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getSendersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = this.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getAppversion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes admin = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseAppConf.prototype.getAdmin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes admin = 1;
 * This is a type-conversion wrapper around `getAdmin()`
 * @return {string}
 */
proto.apps.ResponseAppConf.prototype.getAdmin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdmin()));
};


/**
 * optional bytes admin = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdmin()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseAppConf.prototype.getAdmin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdmin()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseAppConf.prototype.setAdmin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated bytes senders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.apps.ResponseAppConf.prototype.getSendersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 2));
};


/**
 * repeated bytes senders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getSendersList()`
 * @return {!Array.<string>}
 */
proto.apps.ResponseAppConf.prototype.getSendersList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getSendersList()));
};


/**
 * repeated bytes senders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSendersList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.apps.ResponseAppConf.prototype.getSendersList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSendersList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.apps.ResponseAppConf.prototype.setSendersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.apps.ResponseAppConf.prototype.addSenders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.apps.ResponseAppConf.prototype.clearSendersList = function() {
  this.setSendersList([]);
};


/**
 * optional int32 appId = 3;
 * @return {number}
 */
proto.apps.ResponseAppConf.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.ResponseAppConf.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 appVersion = 4;
 * @return {number}
 */
proto.apps.ResponseAppConf.prototype.getAppversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.ResponseAppConf.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseWeightInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ResponseWeightInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseWeightInfo.displayName = 'proto.apps.ResponseWeightInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseWeightInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseWeightInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseWeightInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseWeightInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    subaccount: msg.getSubaccount_asB64(),
    coinid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transferweight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    queryweight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    managerweight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseWeightInfo}
 */
proto.apps.ResponseWeightInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseWeightInfo;
  return proto.apps.ResponseWeightInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseWeightInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseWeightInfo}
 */
proto.apps.ResponseWeightInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransferweight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueryweight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setManagerweight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseWeightInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseWeightInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseWeightInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseWeightInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getTransferweight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getQueryweight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getManagerweight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseWeightInfo.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.ResponseWeightInfo.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseWeightInfo.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseWeightInfo.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes subaccount = 2;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseWeightInfo.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes subaccount = 2;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.apps.ResponseWeightInfo.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseWeightInfo.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseWeightInfo.prototype.setSubaccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 coinId = 3;
 * @return {number}
 */
proto.apps.ResponseWeightInfo.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.ResponseWeightInfo.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 transferWeight = 4;
 * @return {number}
 */
proto.apps.ResponseWeightInfo.prototype.getTransferweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.ResponseWeightInfo.prototype.setTransferweight = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 queryWeight = 5;
 * @return {number}
 */
proto.apps.ResponseWeightInfo.prototype.getQueryweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.ResponseWeightInfo.prototype.setQueryweight = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 managerWeight = 6;
 * @return {number}
 */
proto.apps.ResponseWeightInfo.prototype.getManagerweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.apps.ResponseWeightInfo.prototype.setManagerweight = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apps.ResponseAccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apps.ResponseAccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apps.ResponseAccountInfo.displayName = 'proto.apps.ResponseAccountInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apps.ResponseAccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apps.ResponseAccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apps.ResponseAccountInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apps.ResponseAccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    frozen: jspb.Message.getFieldWithDefault(msg, 2, 0),
    active: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coinid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    transfer: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apps.ResponseAccountInfo}
 */
proto.apps.ResponseAccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apps.ResponseAccountInfo;
  return proto.apps.ResponseAccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apps.ResponseAccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apps.ResponseAccountInfo}
 */
proto.apps.ResponseAccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrozen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.apps.ResponseAccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseAccountInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apps.ResponseAccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.apps.ResponseAccountInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrozen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getActive();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getCoinid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getTransfer();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apps.ResponseAccountInfo.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.apps.ResponseAccountInfo.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.apps.ResponseAccountInfo.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.apps.ResponseAccountInfo.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 frozen = 2;
 * @return {number}
 */
proto.apps.ResponseAccountInfo.prototype.getFrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.apps.ResponseAccountInfo.prototype.setFrozen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 active = 3;
 * @return {number}
 */
proto.apps.ResponseAccountInfo.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.apps.ResponseAccountInfo.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 coinId = 4;
 * @return {number}
 */
proto.apps.ResponseAccountInfo.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.apps.ResponseAccountInfo.prototype.setCoinid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 transfer = 5;
 * @return {number}
 */
proto.apps.ResponseAccountInfo.prototype.getTransfer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.apps.ResponseAccountInfo.prototype.setTransfer = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.apps.App = {
  ADMIN: 0,
  TRANSFER: 1,
  RECEIPT: 2,
  REG: 3,
  ACCOUNTMANAGE: 4,
  LAST: 5,
  MAX: 255,
  CUSTOM: 100000
};

/**
 * @enum {number}
 */
proto.apps.Coin = {
  NILCOIN: 0,
  FZM: 1,
  PAN: 1000,
  BTY: 100000000
};

/**
 * @enum {number}
 */
proto.apps.Sign = {
  NILSIGN: 0,
  ED25519: 1,
  MAXSIGN: 255
};

/**
 * @enum {number}
 */
proto.apps.MessageType = {
  MSGNIL: 0,
  MSGTRANSFER: 1,
  MSGWALLETINFO: 2,
  MSGAPPCONF: 3,
  MSGRECEIPTCREATE: 4,
  MSGRECEIPT: 5,
  MSGCREATEAPP: 6,
  MSGADDSENDER: 7,
  MSGDELSENDER: 8,
  MSGSETADMIN: 9,
  MSGSETAPPVERSION: 10,
  MSGWEIGHTINFO: 11,
  MSGSETWEIGHT: 12,
  MSGDELWEIGHT: 13,
  MSGACCOUNTINFO: 14,
  MSGSETACCOUNT: 15
};

goog.object.extend(exports, proto.apps);
