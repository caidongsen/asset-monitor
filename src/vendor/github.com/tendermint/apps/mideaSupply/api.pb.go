// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package mideaSupply is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		Request
		RequestInitPlatform
		RequestRegisterSupplier
		RequestWarehouseEntry
		RequestWarehouseEntryList
		RequestOpenInvoice
		RequestCheckInvoice
		RequestChangePubkey
		RequestResetPubkey
		RequestRegisterSupplierList
		Response
		ResponseException
		ResponseOK
		Receipt
		ResponseInitPlatform
		ResponseRegisterSupplier
		ResponseWarehouseEntry
		ResponseWarehouseEntryList
		ResponseOpenInvoice
		ResponseCheckInvoice
		ResponseChangePubkey
		ResponseResetPubkey
		ResponseRegisterSupplierList
		Event
		EventInitPlatform
		EventRegisterSupplier
		EventWarehouseEntry
		EventWarehouseEntryList
		EventOpenInvoice
		EventCheckInvoice
		EventChangePubkey
		EventResetPubkey
		EventRegisterSupplierList
		ReceiveHeader
		ReceiveLine
		InvoiceHeader
		InvoiceLine
		UnInvoiceLine
		Platform
		Supplier
		SupplierSite
*/
package mideaSupply

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MsgError                MessageType = 0
	MessageType_MsgInit                 MessageType = 1
	MessageType_MsgShutDown             MessageType = 2
	MessageType_MsgClose                MessageType = 3
	MessageType_MsgInitPlatform         MessageType = 4
	MessageType_MsgRegisterSupplier     MessageType = 5
	MessageType_MsgWarehouseEntry       MessageType = 6
	MessageType_MsgOpenInvoice          MessageType = 7
	MessageType_MsgCheckInvoice         MessageType = 8
	MessageType_MsgChangePubkey         MessageType = 9
	MessageType_MsgRegisterSupplierList MessageType = 10
	MessageType_MsgResetPubkey          MessageType = 11
	MessageType_MsgWarehouseEntryList   MessageType = 12
	MessageType_MsgCount                MessageType = 13
)

var MessageType_name = map[int32]string{
	0:  "MsgError",
	1:  "MsgInit",
	2:  "MsgShutDown",
	3:  "MsgClose",
	4:  "MsgInitPlatform",
	5:  "MsgRegisterSupplier",
	6:  "MsgWarehouseEntry",
	7:  "MsgOpenInvoice",
	8:  "MsgCheckInvoice",
	9:  "MsgChangePubkey",
	10: "MsgRegisterSupplierList",
	11: "MsgResetPubkey",
	12: "MsgWarehouseEntryList",
	13: "MsgCount",
}
var MessageType_value = map[string]int32{
	"MsgError":                0,
	"MsgInit":                 1,
	"MsgShutDown":             2,
	"MsgClose":                3,
	"MsgInitPlatform":         4,
	"MsgRegisterSupplier":     5,
	"MsgWarehouseEntry":       6,
	"MsgOpenInvoice":          7,
	"MsgCheckInvoice":         8,
	"MsgChangePubkey":         9,
	"MsgRegisterSupplierList": 10,
	"MsgResetPubkey":          11,
	"MsgWarehouseEntryList":   12,
	"MsgCount":                13,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type InvoiceState int32

const (
	InvoiceState_IS_UNCHECKED InvoiceState = 0
	InvoiceState_IS_CHECKED   InvoiceState = 1
	InvoiceState_IS_REJECTED  InvoiceState = 2
)

var InvoiceState_name = map[int32]string{
	0: "IS_UNCHECKED",
	1: "IS_CHECKED",
	2: "IS_REJECTED",
}
var InvoiceState_value = map[string]int32{
	"IS_UNCHECKED": 0,
	"IS_CHECKED":   1,
	"IS_REJECTED":  2,
}

func (x InvoiceState) String() string {
	return proto.EnumName(InvoiceState_name, int32(x))
}
func (InvoiceState) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type Request struct {
	// Types that are valid to be assigned to Value:
	//	*Request_InitPlatform
	//	*Request_RegisterSupplier
	//	*Request_WarehouseEntry
	//	*Request_OpenInvoice
	//	*Request_CheckInvoice
	//	*Request_ChangePubkey
	//	*Request_RegisterSupplierList
	//	*Request_ResetPubkey
	//	*Request_WarehouseEntryList
	Value         isRequest_Value `protobuf_oneof:"value"`
	Uid           string          `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`
	InstructionId int64           `protobuf:"varint,11,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Pubkey        []byte          `protobuf:"bytes,12,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Sign          []byte          `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`
	ActionId      MessageType     `protobuf:"varint,14,opt,name=actionId,proto3,enum=mideaSupply.MessageType" json:"actionId,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type isRequest_Value interface {
	isRequest_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_InitPlatform struct {
	InitPlatform *RequestInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Request_RegisterSupplier struct {
	RegisterSupplier *RequestRegisterSupplier `protobuf:"bytes,2,opt,name=registerSupplier,oneof"`
}
type Request_WarehouseEntry struct {
	WarehouseEntry *RequestWarehouseEntry `protobuf:"bytes,3,opt,name=warehouseEntry,oneof"`
}
type Request_OpenInvoice struct {
	OpenInvoice *RequestOpenInvoice `protobuf:"bytes,4,opt,name=openInvoice,oneof"`
}
type Request_CheckInvoice struct {
	CheckInvoice *RequestCheckInvoice `protobuf:"bytes,5,opt,name=checkInvoice,oneof"`
}
type Request_ChangePubkey struct {
	ChangePubkey *RequestChangePubkey `protobuf:"bytes,6,opt,name=changePubkey,oneof"`
}
type Request_RegisterSupplierList struct {
	RegisterSupplierList *RequestRegisterSupplierList `protobuf:"bytes,7,opt,name=registerSupplierList,oneof"`
}
type Request_ResetPubkey struct {
	ResetPubkey *RequestResetPubkey `protobuf:"bytes,8,opt,name=resetPubkey,oneof"`
}
type Request_WarehouseEntryList struct {
	WarehouseEntryList *RequestWarehouseEntryList `protobuf:"bytes,9,opt,name=warehouseEntryList,oneof"`
}

func (*Request_InitPlatform) isRequest_Value()         {}
func (*Request_RegisterSupplier) isRequest_Value()     {}
func (*Request_WarehouseEntry) isRequest_Value()       {}
func (*Request_OpenInvoice) isRequest_Value()          {}
func (*Request_CheckInvoice) isRequest_Value()         {}
func (*Request_ChangePubkey) isRequest_Value()         {}
func (*Request_RegisterSupplierList) isRequest_Value() {}
func (*Request_ResetPubkey) isRequest_Value()          {}
func (*Request_WarehouseEntryList) isRequest_Value()   {}

func (m *Request) GetValue() isRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Request) GetInitPlatform() *RequestInitPlatform {
	if x, ok := m.GetValue().(*Request_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Request) GetRegisterSupplier() *RequestRegisterSupplier {
	if x, ok := m.GetValue().(*Request_RegisterSupplier); ok {
		return x.RegisterSupplier
	}
	return nil
}

func (m *Request) GetWarehouseEntry() *RequestWarehouseEntry {
	if x, ok := m.GetValue().(*Request_WarehouseEntry); ok {
		return x.WarehouseEntry
	}
	return nil
}

func (m *Request) GetOpenInvoice() *RequestOpenInvoice {
	if x, ok := m.GetValue().(*Request_OpenInvoice); ok {
		return x.OpenInvoice
	}
	return nil
}

func (m *Request) GetCheckInvoice() *RequestCheckInvoice {
	if x, ok := m.GetValue().(*Request_CheckInvoice); ok {
		return x.CheckInvoice
	}
	return nil
}

func (m *Request) GetChangePubkey() *RequestChangePubkey {
	if x, ok := m.GetValue().(*Request_ChangePubkey); ok {
		return x.ChangePubkey
	}
	return nil
}

func (m *Request) GetRegisterSupplierList() *RequestRegisterSupplierList {
	if x, ok := m.GetValue().(*Request_RegisterSupplierList); ok {
		return x.RegisterSupplierList
	}
	return nil
}

func (m *Request) GetResetPubkey() *RequestResetPubkey {
	if x, ok := m.GetValue().(*Request_ResetPubkey); ok {
		return x.ResetPubkey
	}
	return nil
}

func (m *Request) GetWarehouseEntryList() *RequestWarehouseEntryList {
	if x, ok := m.GetValue().(*Request_WarehouseEntryList); ok {
		return x.WarehouseEntryList
	}
	return nil
}

func (m *Request) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Request) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *Request) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Request) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Request) GetActionId() MessageType {
	if m != nil {
		return m.ActionId
	}
	return MessageType_MsgError
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_InitPlatform)(nil),
		(*Request_RegisterSupplier)(nil),
		(*Request_WarehouseEntry)(nil),
		(*Request_OpenInvoice)(nil),
		(*Request_CheckInvoice)(nil),
		(*Request_ChangePubkey)(nil),
		(*Request_RegisterSupplierList)(nil),
		(*Request_ResetPubkey)(nil),
		(*Request_WarehouseEntryList)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Request_RegisterSupplier:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterSupplier); err != nil {
			return err
		}
	case *Request_WarehouseEntry:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WarehouseEntry); err != nil {
			return err
		}
	case *Request_OpenInvoice:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenInvoice); err != nil {
			return err
		}
	case *Request_CheckInvoice:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckInvoice); err != nil {
			return err
		}
	case *Request_ChangePubkey:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangePubkey); err != nil {
			return err
		}
	case *Request_RegisterSupplierList:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterSupplierList); err != nil {
			return err
		}
	case *Request_ResetPubkey:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetPubkey); err != nil {
			return err
		}
	case *Request_WarehouseEntryList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WarehouseEntryList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Value has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Request_InitPlatform{msg}
		return true, err
	case 2: // value.registerSupplier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestRegisterSupplier)
		err := b.DecodeMessage(msg)
		m.Value = &Request_RegisterSupplier{msg}
		return true, err
	case 3: // value.warehouseEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestWarehouseEntry)
		err := b.DecodeMessage(msg)
		m.Value = &Request_WarehouseEntry{msg}
		return true, err
	case 4: // value.openInvoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestOpenInvoice)
		err := b.DecodeMessage(msg)
		m.Value = &Request_OpenInvoice{msg}
		return true, err
	case 5: // value.checkInvoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCheckInvoice)
		err := b.DecodeMessage(msg)
		m.Value = &Request_CheckInvoice{msg}
		return true, err
	case 6: // value.changePubkey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestChangePubkey)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ChangePubkey{msg}
		return true, err
	case 7: // value.registerSupplierList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestRegisterSupplierList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_RegisterSupplierList{msg}
		return true, err
	case 8: // value.resetPubkey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestResetPubkey)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ResetPubkey{msg}
		return true, err
	case 9: // value.warehouseEntryList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestWarehouseEntryList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_WarehouseEntryList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RegisterSupplier:
		s := proto.Size(x.RegisterSupplier)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_WarehouseEntry:
		s := proto.Size(x.WarehouseEntry)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_OpenInvoice:
		s := proto.Size(x.OpenInvoice)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_CheckInvoice:
		s := proto.Size(x.CheckInvoice)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ChangePubkey:
		s := proto.Size(x.ChangePubkey)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RegisterSupplierList:
		s := proto.Size(x.RegisterSupplierList)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ResetPubkey:
		s := proto.Size(x.ResetPubkey)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_WarehouseEntryList:
		s := proto.Size(x.WarehouseEntryList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RequestInitPlatform struct {
	PlatformKey []byte `protobuf:"bytes,1,opt,name=platformKey,proto3" json:"platformKey,omitempty"`
	Info        string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RequestInitPlatform) Reset()                    { *m = RequestInitPlatform{} }
func (m *RequestInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*RequestInitPlatform) ProtoMessage()               {}
func (*RequestInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *RequestInitPlatform) GetPlatformKey() []byte {
	if m != nil {
		return m.PlatformKey
	}
	return nil
}

func (m *RequestInitPlatform) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type RequestRegisterSupplier struct {
	UserPubkey []byte    `protobuf:"bytes,1,opt,name=userPubkey,proto3" json:"userPubkey,omitempty"`
	Supplier   *Supplier `protobuf:"bytes,2,opt,name=supplier" json:"supplier,omitempty"`
}

func (m *RequestRegisterSupplier) Reset()                    { *m = RequestRegisterSupplier{} }
func (m *RequestRegisterSupplier) String() string            { return proto.CompactTextString(m) }
func (*RequestRegisterSupplier) ProtoMessage()               {}
func (*RequestRegisterSupplier) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *RequestRegisterSupplier) GetUserPubkey() []byte {
	if m != nil {
		return m.UserPubkey
	}
	return nil
}

func (m *RequestRegisterSupplier) GetSupplier() *Supplier {
	if m != nil {
		return m.Supplier
	}
	return nil
}

type RequestWarehouseEntry struct {
	ReceiveHeader *ReceiveHeader `protobuf:"bytes,1,opt,name=receiveHeader" json:"receiveHeader,omitempty"`
}

func (m *RequestWarehouseEntry) Reset()                    { *m = RequestWarehouseEntry{} }
func (m *RequestWarehouseEntry) String() string            { return proto.CompactTextString(m) }
func (*RequestWarehouseEntry) ProtoMessage()               {}
func (*RequestWarehouseEntry) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *RequestWarehouseEntry) GetReceiveHeader() *ReceiveHeader {
	if m != nil {
		return m.ReceiveHeader
	}
	return nil
}

type RequestWarehouseEntryList struct {
	ReceiveHeaderList []*ReceiveHeader `protobuf:"bytes,1,rep,name=receiveHeaderList" json:"receiveHeaderList,omitempty"`
}

func (m *RequestWarehouseEntryList) Reset()                    { *m = RequestWarehouseEntryList{} }
func (m *RequestWarehouseEntryList) String() string            { return proto.CompactTextString(m) }
func (*RequestWarehouseEntryList) ProtoMessage()               {}
func (*RequestWarehouseEntryList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *RequestWarehouseEntryList) GetReceiveHeaderList() []*ReceiveHeader {
	if m != nil {
		return m.ReceiveHeaderList
	}
	return nil
}

type RequestOpenInvoice struct {
	InvoiceHeader *InvoiceHeader `protobuf:"bytes,1,opt,name=invoiceHeader" json:"invoiceHeader,omitempty"`
}

func (m *RequestOpenInvoice) Reset()                    { *m = RequestOpenInvoice{} }
func (m *RequestOpenInvoice) String() string            { return proto.CompactTextString(m) }
func (*RequestOpenInvoice) ProtoMessage()               {}
func (*RequestOpenInvoice) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *RequestOpenInvoice) GetInvoiceHeader() *InvoiceHeader {
	if m != nil {
		return m.InvoiceHeader
	}
	return nil
}

type RequestCheckInvoice struct {
	IsInvoiceId int64 `protobuf:"varint,1,opt,name=isInvoiceId,proto3" json:"isInvoiceId,omitempty"`
	IsPass      bool  `protobuf:"varint,2,opt,name=isPass,proto3" json:"isPass,omitempty"`
}

func (m *RequestCheckInvoice) Reset()                    { *m = RequestCheckInvoice{} }
func (m *RequestCheckInvoice) String() string            { return proto.CompactTextString(m) }
func (*RequestCheckInvoice) ProtoMessage()               {}
func (*RequestCheckInvoice) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *RequestCheckInvoice) GetIsInvoiceId() int64 {
	if m != nil {
		return m.IsInvoiceId
	}
	return 0
}

func (m *RequestCheckInvoice) GetIsPass() bool {
	if m != nil {
		return m.IsPass
	}
	return false
}

type RequestChangePubkey struct {
	NewPubkey []byte `protobuf:"bytes,1,opt,name=newPubkey,proto3" json:"newPubkey,omitempty"`
}

func (m *RequestChangePubkey) Reset()                    { *m = RequestChangePubkey{} }
func (m *RequestChangePubkey) String() string            { return proto.CompactTextString(m) }
func (*RequestChangePubkey) ProtoMessage()               {}
func (*RequestChangePubkey) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *RequestChangePubkey) GetNewPubkey() []byte {
	if m != nil {
		return m.NewPubkey
	}
	return nil
}

type RequestResetPubkey struct {
	NewPubkey []byte `protobuf:"bytes,1,opt,name=newPubkey,proto3" json:"newPubkey,omitempty"`
	VendorId  int64  `protobuf:"varint,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
}

func (m *RequestResetPubkey) Reset()                    { *m = RequestResetPubkey{} }
func (m *RequestResetPubkey) String() string            { return proto.CompactTextString(m) }
func (*RequestResetPubkey) ProtoMessage()               {}
func (*RequestResetPubkey) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *RequestResetPubkey) GetNewPubkey() []byte {
	if m != nil {
		return m.NewPubkey
	}
	return nil
}

func (m *RequestResetPubkey) GetVendorId() int64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

type RequestRegisterSupplierList struct {
	SupplierList []*Supplier `protobuf:"bytes,1,rep,name=supplierList" json:"supplierList,omitempty"`
}

func (m *RequestRegisterSupplierList) Reset()                    { *m = RequestRegisterSupplierList{} }
func (m *RequestRegisterSupplierList) String() string            { return proto.CompactTextString(m) }
func (*RequestRegisterSupplierList) ProtoMessage()               {}
func (*RequestRegisterSupplierList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *RequestRegisterSupplierList) GetSupplierList() []*Supplier {
	if m != nil {
		return m.SupplierList
	}
	return nil
}

type Response struct {
	// Types that are valid to be assigned to Value:
	//	*Response_InitPlatform
	//	*Response_RegisterSupplier
	//	*Response_WarehouseEntry
	//	*Response_OpenInvoice
	//	*Response_CheckInvoice
	//	*Response_ChangePubkey
	//	*Response_RegisterSupplierList
	//	*Response_ResetPubkey
	//	*Response_WarehouseEntryList
	//	*Response_Ok
	//	*Response_Exception
	Value isResponse_Value `protobuf_oneof:"value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

type isResponse_Value interface {
	isResponse_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_InitPlatform struct {
	InitPlatform *ResponseInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Response_RegisterSupplier struct {
	RegisterSupplier *ResponseRegisterSupplier `protobuf:"bytes,2,opt,name=registerSupplier,oneof"`
}
type Response_WarehouseEntry struct {
	WarehouseEntry *ResponseWarehouseEntry `protobuf:"bytes,3,opt,name=warehouseEntry,oneof"`
}
type Response_OpenInvoice struct {
	OpenInvoice *ResponseOpenInvoice `protobuf:"bytes,4,opt,name=openInvoice,oneof"`
}
type Response_CheckInvoice struct {
	CheckInvoice *ResponseCheckInvoice `protobuf:"bytes,5,opt,name=checkInvoice,oneof"`
}
type Response_ChangePubkey struct {
	ChangePubkey *ResponseChangePubkey `protobuf:"bytes,6,opt,name=changePubkey,oneof"`
}
type Response_RegisterSupplierList struct {
	RegisterSupplierList *ResponseRegisterSupplierList `protobuf:"bytes,7,opt,name=registerSupplierList,oneof"`
}
type Response_ResetPubkey struct {
	ResetPubkey *ResponseResetPubkey `protobuf:"bytes,8,opt,name=resetPubkey,oneof"`
}
type Response_WarehouseEntryList struct {
	WarehouseEntryList *ResponseWarehouseEntryList `protobuf:"bytes,9,opt,name=warehouseEntryList,oneof"`
}
type Response_Ok struct {
	Ok *ResponseOK `protobuf:"bytes,10,opt,name=ok,oneof"`
}
type Response_Exception struct {
	Exception *ResponseException `protobuf:"bytes,11,opt,name=exception,oneof"`
}

func (*Response_InitPlatform) isResponse_Value()         {}
func (*Response_RegisterSupplier) isResponse_Value()     {}
func (*Response_WarehouseEntry) isResponse_Value()       {}
func (*Response_OpenInvoice) isResponse_Value()          {}
func (*Response_CheckInvoice) isResponse_Value()         {}
func (*Response_ChangePubkey) isResponse_Value()         {}
func (*Response_RegisterSupplierList) isResponse_Value() {}
func (*Response_ResetPubkey) isResponse_Value()          {}
func (*Response_WarehouseEntryList) isResponse_Value()   {}
func (*Response_Ok) isResponse_Value()                   {}
func (*Response_Exception) isResponse_Value()            {}

func (m *Response) GetValue() isResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response) GetInitPlatform() *ResponseInitPlatform {
	if x, ok := m.GetValue().(*Response_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Response) GetRegisterSupplier() *ResponseRegisterSupplier {
	if x, ok := m.GetValue().(*Response_RegisterSupplier); ok {
		return x.RegisterSupplier
	}
	return nil
}

func (m *Response) GetWarehouseEntry() *ResponseWarehouseEntry {
	if x, ok := m.GetValue().(*Response_WarehouseEntry); ok {
		return x.WarehouseEntry
	}
	return nil
}

func (m *Response) GetOpenInvoice() *ResponseOpenInvoice {
	if x, ok := m.GetValue().(*Response_OpenInvoice); ok {
		return x.OpenInvoice
	}
	return nil
}

func (m *Response) GetCheckInvoice() *ResponseCheckInvoice {
	if x, ok := m.GetValue().(*Response_CheckInvoice); ok {
		return x.CheckInvoice
	}
	return nil
}

func (m *Response) GetChangePubkey() *ResponseChangePubkey {
	if x, ok := m.GetValue().(*Response_ChangePubkey); ok {
		return x.ChangePubkey
	}
	return nil
}

func (m *Response) GetRegisterSupplierList() *ResponseRegisterSupplierList {
	if x, ok := m.GetValue().(*Response_RegisterSupplierList); ok {
		return x.RegisterSupplierList
	}
	return nil
}

func (m *Response) GetResetPubkey() *ResponseResetPubkey {
	if x, ok := m.GetValue().(*Response_ResetPubkey); ok {
		return x.ResetPubkey
	}
	return nil
}

func (m *Response) GetWarehouseEntryList() *ResponseWarehouseEntryList {
	if x, ok := m.GetValue().(*Response_WarehouseEntryList); ok {
		return x.WarehouseEntryList
	}
	return nil
}

func (m *Response) GetOk() *ResponseOK {
	if x, ok := m.GetValue().(*Response_Ok); ok {
		return x.Ok
	}
	return nil
}

func (m *Response) GetException() *ResponseException {
	if x, ok := m.GetValue().(*Response_Exception); ok {
		return x.Exception
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_InitPlatform)(nil),
		(*Response_RegisterSupplier)(nil),
		(*Response_WarehouseEntry)(nil),
		(*Response_OpenInvoice)(nil),
		(*Response_CheckInvoice)(nil),
		(*Response_ChangePubkey)(nil),
		(*Response_RegisterSupplierList)(nil),
		(*Response_ResetPubkey)(nil),
		(*Response_WarehouseEntryList)(nil),
		(*Response_Ok)(nil),
		(*Response_Exception)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// value
	switch x := m.Value.(type) {
	case *Response_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Response_RegisterSupplier:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterSupplier); err != nil {
			return err
		}
	case *Response_WarehouseEntry:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WarehouseEntry); err != nil {
			return err
		}
	case *Response_OpenInvoice:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenInvoice); err != nil {
			return err
		}
	case *Response_CheckInvoice:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckInvoice); err != nil {
			return err
		}
	case *Response_ChangePubkey:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangePubkey); err != nil {
			return err
		}
	case *Response_RegisterSupplierList:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterSupplierList); err != nil {
			return err
		}
	case *Response_ResetPubkey:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetPubkey); err != nil {
			return err
		}
	case *Response_WarehouseEntryList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WarehouseEntryList); err != nil {
			return err
		}
	case *Response_Ok:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ok); err != nil {
			return err
		}
	case *Response_Exception:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Exception); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Value has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Response_InitPlatform{msg}
		return true, err
	case 2: // value.registerSupplier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseRegisterSupplier)
		err := b.DecodeMessage(msg)
		m.Value = &Response_RegisterSupplier{msg}
		return true, err
	case 3: // value.warehouseEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseWarehouseEntry)
		err := b.DecodeMessage(msg)
		m.Value = &Response_WarehouseEntry{msg}
		return true, err
	case 4: // value.openInvoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseOpenInvoice)
		err := b.DecodeMessage(msg)
		m.Value = &Response_OpenInvoice{msg}
		return true, err
	case 5: // value.checkInvoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseCheckInvoice)
		err := b.DecodeMessage(msg)
		m.Value = &Response_CheckInvoice{msg}
		return true, err
	case 6: // value.changePubkey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseChangePubkey)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ChangePubkey{msg}
		return true, err
	case 7: // value.registerSupplierList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseRegisterSupplierList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_RegisterSupplierList{msg}
		return true, err
	case 8: // value.resetPubkey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseResetPubkey)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ResetPubkey{msg}
		return true, err
	case 9: // value.warehouseEntryList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseWarehouseEntryList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_WarehouseEntryList{msg}
		return true, err
	case 10: // value.ok
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseOK)
		err := b.DecodeMessage(msg)
		m.Value = &Response_Ok{msg}
		return true, err
	case 11: // value.exception
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseException)
		err := b.DecodeMessage(msg)
		m.Value = &Response_Exception{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// value
	switch x := m.Value.(type) {
	case *Response_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RegisterSupplier:
		s := proto.Size(x.RegisterSupplier)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_WarehouseEntry:
		s := proto.Size(x.WarehouseEntry)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_OpenInvoice:
		s := proto.Size(x.OpenInvoice)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_CheckInvoice:
		s := proto.Size(x.CheckInvoice)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ChangePubkey:
		s := proto.Size(x.ChangePubkey)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RegisterSupplierList:
		s := proto.Size(x.RegisterSupplierList)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ResetPubkey:
		s := proto.Size(x.ResetPubkey)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_WarehouseEntryList:
		s := proto.Size(x.WarehouseEntryList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Ok:
		s := proto.Size(x.Ok)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Exception:
		s := proto.Size(x.Exception)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResponseException struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ResponseException) Reset()                    { *m = ResponseException{} }
func (m *ResponseException) String() string            { return proto.CompactTextString(m) }
func (*ResponseException) ProtoMessage()               {}
func (*ResponseException) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

func (m *ResponseException) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ResponseOK struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *ResponseOK) Reset()                    { *m = ResponseOK{} }
func (m *ResponseOK) String() string            { return proto.CompactTextString(m) }
func (*ResponseOK) ProtoMessage()               {}
func (*ResponseOK) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

func (m *ResponseOK) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Receipt struct {
	IsOk bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Err  []byte `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

func (m *Receipt) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *Receipt) GetErr() []byte {
	if m != nil {
		return m.Err
	}
	return nil
}

type ResponseInitPlatform struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseInitPlatform) Reset()                    { *m = ResponseInitPlatform{} }
func (m *ResponseInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*ResponseInitPlatform) ProtoMessage()               {}
func (*ResponseInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

func (m *ResponseInitPlatform) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseInitPlatform) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseRegisterSupplier struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseRegisterSupplier) Reset()                    { *m = ResponseRegisterSupplier{} }
func (m *ResponseRegisterSupplier) String() string            { return proto.CompactTextString(m) }
func (*ResponseRegisterSupplier) ProtoMessage()               {}
func (*ResponseRegisterSupplier) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

func (m *ResponseRegisterSupplier) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseRegisterSupplier) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseWarehouseEntry struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseWarehouseEntry) Reset()                    { *m = ResponseWarehouseEntry{} }
func (m *ResponseWarehouseEntry) String() string            { return proto.CompactTextString(m) }
func (*ResponseWarehouseEntry) ProtoMessage()               {}
func (*ResponseWarehouseEntry) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

func (m *ResponseWarehouseEntry) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseWarehouseEntry) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseWarehouseEntryList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseWarehouseEntryList) Reset()                    { *m = ResponseWarehouseEntryList{} }
func (m *ResponseWarehouseEntryList) String() string            { return proto.CompactTextString(m) }
func (*ResponseWarehouseEntryList) ProtoMessage()               {}
func (*ResponseWarehouseEntryList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func (m *ResponseWarehouseEntryList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseWarehouseEntryList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseOpenInvoice struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseOpenInvoice) Reset()                    { *m = ResponseOpenInvoice{} }
func (m *ResponseOpenInvoice) String() string            { return proto.CompactTextString(m) }
func (*ResponseOpenInvoice) ProtoMessage()               {}
func (*ResponseOpenInvoice) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

func (m *ResponseOpenInvoice) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseOpenInvoice) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseCheckInvoice struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseCheckInvoice) Reset()                    { *m = ResponseCheckInvoice{} }
func (m *ResponseCheckInvoice) String() string            { return proto.CompactTextString(m) }
func (*ResponseCheckInvoice) ProtoMessage()               {}
func (*ResponseCheckInvoice) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{19} }

func (m *ResponseCheckInvoice) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseCheckInvoice) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseChangePubkey struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseChangePubkey) Reset()                    { *m = ResponseChangePubkey{} }
func (m *ResponseChangePubkey) String() string            { return proto.CompactTextString(m) }
func (*ResponseChangePubkey) ProtoMessage()               {}
func (*ResponseChangePubkey) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{20} }

func (m *ResponseChangePubkey) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseChangePubkey) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseResetPubkey struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseResetPubkey) Reset()                    { *m = ResponseResetPubkey{} }
func (m *ResponseResetPubkey) String() string            { return proto.CompactTextString(m) }
func (*ResponseResetPubkey) ProtoMessage()               {}
func (*ResponseResetPubkey) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{21} }

func (m *ResponseResetPubkey) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseResetPubkey) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseRegisterSupplierList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseRegisterSupplierList) Reset()                    { *m = ResponseRegisterSupplierList{} }
func (m *ResponseRegisterSupplierList) String() string            { return proto.CompactTextString(m) }
func (*ResponseRegisterSupplierList) ProtoMessage()               {}
func (*ResponseRegisterSupplierList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{22} }

func (m *ResponseRegisterSupplierList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseRegisterSupplierList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type Event struct {
	// Types that are valid to be assigned to Value:
	//	*Event_InitPlatform
	//	*Event_RegisterSupplier
	//	*Event_WarehouseEntry
	//	*Event_OpenInvoice
	//	*Event_CheckInvoice
	//	*Event_ChangePubkey
	//	*Event_RegisterSupplierList
	//	*Event_ResetPubkey
	//	*Event_WarehouseEntryList
	Value isEvent_Value `protobuf_oneof:"value"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{23} }

type isEvent_Value interface {
	isEvent_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_InitPlatform struct {
	InitPlatform *EventInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Event_RegisterSupplier struct {
	RegisterSupplier *EventRegisterSupplier `protobuf:"bytes,2,opt,name=registerSupplier,oneof"`
}
type Event_WarehouseEntry struct {
	WarehouseEntry *EventWarehouseEntry `protobuf:"bytes,3,opt,name=warehouseEntry,oneof"`
}
type Event_OpenInvoice struct {
	OpenInvoice *EventOpenInvoice `protobuf:"bytes,4,opt,name=openInvoice,oneof"`
}
type Event_CheckInvoice struct {
	CheckInvoice *EventCheckInvoice `protobuf:"bytes,5,opt,name=checkInvoice,oneof"`
}
type Event_ChangePubkey struct {
	ChangePubkey *EventChangePubkey `protobuf:"bytes,6,opt,name=changePubkey,oneof"`
}
type Event_RegisterSupplierList struct {
	RegisterSupplierList *EventRegisterSupplierList `protobuf:"bytes,7,opt,name=registerSupplierList,oneof"`
}
type Event_ResetPubkey struct {
	ResetPubkey *EventResetPubkey `protobuf:"bytes,8,opt,name=resetPubkey,oneof"`
}
type Event_WarehouseEntryList struct {
	WarehouseEntryList *EventWarehouseEntryList `protobuf:"bytes,9,opt,name=warehouseEntryList,oneof"`
}

func (*Event_InitPlatform) isEvent_Value()         {}
func (*Event_RegisterSupplier) isEvent_Value()     {}
func (*Event_WarehouseEntry) isEvent_Value()       {}
func (*Event_OpenInvoice) isEvent_Value()          {}
func (*Event_CheckInvoice) isEvent_Value()         {}
func (*Event_ChangePubkey) isEvent_Value()         {}
func (*Event_RegisterSupplierList) isEvent_Value() {}
func (*Event_ResetPubkey) isEvent_Value()          {}
func (*Event_WarehouseEntryList) isEvent_Value()   {}

func (m *Event) GetValue() isEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Event) GetInitPlatform() *EventInitPlatform {
	if x, ok := m.GetValue().(*Event_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Event) GetRegisterSupplier() *EventRegisterSupplier {
	if x, ok := m.GetValue().(*Event_RegisterSupplier); ok {
		return x.RegisterSupplier
	}
	return nil
}

func (m *Event) GetWarehouseEntry() *EventWarehouseEntry {
	if x, ok := m.GetValue().(*Event_WarehouseEntry); ok {
		return x.WarehouseEntry
	}
	return nil
}

func (m *Event) GetOpenInvoice() *EventOpenInvoice {
	if x, ok := m.GetValue().(*Event_OpenInvoice); ok {
		return x.OpenInvoice
	}
	return nil
}

func (m *Event) GetCheckInvoice() *EventCheckInvoice {
	if x, ok := m.GetValue().(*Event_CheckInvoice); ok {
		return x.CheckInvoice
	}
	return nil
}

func (m *Event) GetChangePubkey() *EventChangePubkey {
	if x, ok := m.GetValue().(*Event_ChangePubkey); ok {
		return x.ChangePubkey
	}
	return nil
}

func (m *Event) GetRegisterSupplierList() *EventRegisterSupplierList {
	if x, ok := m.GetValue().(*Event_RegisterSupplierList); ok {
		return x.RegisterSupplierList
	}
	return nil
}

func (m *Event) GetResetPubkey() *EventResetPubkey {
	if x, ok := m.GetValue().(*Event_ResetPubkey); ok {
		return x.ResetPubkey
	}
	return nil
}

func (m *Event) GetWarehouseEntryList() *EventWarehouseEntryList {
	if x, ok := m.GetValue().(*Event_WarehouseEntryList); ok {
		return x.WarehouseEntryList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_InitPlatform)(nil),
		(*Event_RegisterSupplier)(nil),
		(*Event_WarehouseEntry)(nil),
		(*Event_OpenInvoice)(nil),
		(*Event_CheckInvoice)(nil),
		(*Event_ChangePubkey)(nil),
		(*Event_RegisterSupplierList)(nil),
		(*Event_ResetPubkey)(nil),
		(*Event_WarehouseEntryList)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// value
	switch x := m.Value.(type) {
	case *Event_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Event_RegisterSupplier:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterSupplier); err != nil {
			return err
		}
	case *Event_WarehouseEntry:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WarehouseEntry); err != nil {
			return err
		}
	case *Event_OpenInvoice:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenInvoice); err != nil {
			return err
		}
	case *Event_CheckInvoice:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckInvoice); err != nil {
			return err
		}
	case *Event_ChangePubkey:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangePubkey); err != nil {
			return err
		}
	case *Event_RegisterSupplierList:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterSupplierList); err != nil {
			return err
		}
	case *Event_ResetPubkey:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetPubkey); err != nil {
			return err
		}
	case *Event_WarehouseEntryList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WarehouseEntryList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Value has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Event_InitPlatform{msg}
		return true, err
	case 2: // value.registerSupplier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventRegisterSupplier)
		err := b.DecodeMessage(msg)
		m.Value = &Event_RegisterSupplier{msg}
		return true, err
	case 3: // value.warehouseEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventWarehouseEntry)
		err := b.DecodeMessage(msg)
		m.Value = &Event_WarehouseEntry{msg}
		return true, err
	case 4: // value.openInvoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventOpenInvoice)
		err := b.DecodeMessage(msg)
		m.Value = &Event_OpenInvoice{msg}
		return true, err
	case 5: // value.checkInvoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventCheckInvoice)
		err := b.DecodeMessage(msg)
		m.Value = &Event_CheckInvoice{msg}
		return true, err
	case 6: // value.changePubkey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventChangePubkey)
		err := b.DecodeMessage(msg)
		m.Value = &Event_ChangePubkey{msg}
		return true, err
	case 7: // value.registerSupplierList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventRegisterSupplierList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_RegisterSupplierList{msg}
		return true, err
	case 8: // value.resetPubkey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventResetPubkey)
		err := b.DecodeMessage(msg)
		m.Value = &Event_ResetPubkey{msg}
		return true, err
	case 9: // value.warehouseEntryList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventWarehouseEntryList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_WarehouseEntryList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// value
	switch x := m.Value.(type) {
	case *Event_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_RegisterSupplier:
		s := proto.Size(x.RegisterSupplier)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_WarehouseEntry:
		s := proto.Size(x.WarehouseEntry)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_OpenInvoice:
		s := proto.Size(x.OpenInvoice)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CheckInvoice:
		s := proto.Size(x.CheckInvoice)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ChangePubkey:
		s := proto.Size(x.ChangePubkey)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_RegisterSupplierList:
		s := proto.Size(x.RegisterSupplierList)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ResetPubkey:
		s := proto.Size(x.ResetPubkey)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_WarehouseEntryList:
		s := proto.Size(x.WarehouseEntryList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventInitPlatform struct {
	PlatformKey []byte `protobuf:"bytes,1,opt,name=platformKey,proto3" json:"platformKey,omitempty"`
}

func (m *EventInitPlatform) Reset()                    { *m = EventInitPlatform{} }
func (m *EventInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*EventInitPlatform) ProtoMessage()               {}
func (*EventInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{24} }

func (m *EventInitPlatform) GetPlatformKey() []byte {
	if m != nil {
		return m.PlatformKey
	}
	return nil
}

type EventRegisterSupplier struct {
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *EventRegisterSupplier) Reset()                    { *m = EventRegisterSupplier{} }
func (m *EventRegisterSupplier) String() string            { return proto.CompactTextString(m) }
func (*EventRegisterSupplier) ProtoMessage()               {}
func (*EventRegisterSupplier) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{25} }

func (m *EventRegisterSupplier) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type EventWarehouseEntry struct {
	HeaderId int64   `protobuf:"varint,1,opt,name=headerId,proto3" json:"headerId,omitempty"`
	Line     []int64 `protobuf:"varint,2,rep,packed,name=line" json:"line,omitempty"`
}

func (m *EventWarehouseEntry) Reset()                    { *m = EventWarehouseEntry{} }
func (m *EventWarehouseEntry) String() string            { return proto.CompactTextString(m) }
func (*EventWarehouseEntry) ProtoMessage()               {}
func (*EventWarehouseEntry) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{26} }

func (m *EventWarehouseEntry) GetHeaderId() int64 {
	if m != nil {
		return m.HeaderId
	}
	return 0
}

func (m *EventWarehouseEntry) GetLine() []int64 {
	if m != nil {
		return m.Line
	}
	return nil
}

type EventWarehouseEntryList struct {
	Ids []int64 `protobuf:"varint,2,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *EventWarehouseEntryList) Reset()                    { *m = EventWarehouseEntryList{} }
func (m *EventWarehouseEntryList) String() string            { return proto.CompactTextString(m) }
func (*EventWarehouseEntryList) ProtoMessage()               {}
func (*EventWarehouseEntryList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{27} }

func (m *EventWarehouseEntryList) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type EventOpenInvoice struct {
	InvoiceHeader int64   `protobuf:"varint,1,opt,name=invoiceHeader,proto3" json:"invoiceHeader,omitempty"`
	Line          []int64 `protobuf:"varint,2,rep,packed,name=line" json:"line,omitempty"`
}

func (m *EventOpenInvoice) Reset()                    { *m = EventOpenInvoice{} }
func (m *EventOpenInvoice) String() string            { return proto.CompactTextString(m) }
func (*EventOpenInvoice) ProtoMessage()               {}
func (*EventOpenInvoice) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{28} }

func (m *EventOpenInvoice) GetInvoiceHeader() int64 {
	if m != nil {
		return m.InvoiceHeader
	}
	return 0
}

func (m *EventOpenInvoice) GetLine() []int64 {
	if m != nil {
		return m.Line
	}
	return nil
}

type EventCheckInvoice struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *EventCheckInvoice) Reset()                    { *m = EventCheckInvoice{} }
func (m *EventCheckInvoice) String() string            { return proto.CompactTextString(m) }
func (*EventCheckInvoice) ProtoMessage()               {}
func (*EventCheckInvoice) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{29} }

func (m *EventCheckInvoice) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

type EventChangePubkey struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *EventChangePubkey) Reset()                    { *m = EventChangePubkey{} }
func (m *EventChangePubkey) String() string            { return proto.CompactTextString(m) }
func (*EventChangePubkey) ProtoMessage()               {}
func (*EventChangePubkey) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{30} }

func (m *EventChangePubkey) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

type EventResetPubkey struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *EventResetPubkey) Reset()                    { *m = EventResetPubkey{} }
func (m *EventResetPubkey) String() string            { return proto.CompactTextString(m) }
func (*EventResetPubkey) ProtoMessage()               {}
func (*EventResetPubkey) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{31} }

func (m *EventResetPubkey) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

type EventRegisterSupplierList struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *EventRegisterSupplierList) Reset()                    { *m = EventRegisterSupplierList{} }
func (m *EventRegisterSupplierList) String() string            { return proto.CompactTextString(m) }
func (*EventRegisterSupplierList) ProtoMessage()               {}
func (*EventRegisterSupplierList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{32} }

func (m *EventRegisterSupplierList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 入库头
type ReceiveHeader struct {
	RecHeaderId       int64          `protobuf:"varint,1,opt,name=rec_header_id,json=recHeaderId,proto3" json:"rec_header_id,omitempty"`
	ShipmentHeaderId  int64          `protobuf:"varint,2,opt,name=shipmentHeaderId,proto3" json:"shipmentHeaderId,omitempty"`
	ReceiptNum        string         `protobuf:"bytes,3,opt,name=receiptNum,proto3" json:"receiptNum,omitempty"`
	ReceiveDate       int64          `protobuf:"varint,4,opt,name=receiveDate,proto3" json:"receiveDate,omitempty"`
	ReceivePerson     string         `protobuf:"bytes,5,opt,name=receivePerson,proto3" json:"receivePerson,omitempty"`
	PurchansePerson   string         `protobuf:"bytes,6,opt,name=purchansePerson,proto3" json:"purchansePerson,omitempty"`
	OrganizationId    int64          `protobuf:"varint,7,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	OrganizationCode  string         `protobuf:"bytes,8,opt,name=organizationCode,proto3" json:"organizationCode,omitempty"`
	VendorId          int64          `protobuf:"varint,9,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	VendorCode        string         `protobuf:"bytes,10,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	VendorName        string         `protobuf:"bytes,11,opt,name=vendorName,proto3" json:"vendorName,omitempty"`
	VendorSiteId      int64          `protobuf:"varint,12,opt,name=vendorSiteId,proto3" json:"vendorSiteId,omitempty"`
	VendorSiteCode    string         `protobuf:"bytes,13,opt,name=vendorSiteCode,proto3" json:"vendorSiteCode,omitempty"`
	ReceiveLines      []*ReceiveLine `protobuf:"bytes,14,rep,name=receiveLines" json:"receiveLines,omitempty"`
	AttributeCategory string         `protobuf:"bytes,15,opt,name=attributeCategory,proto3" json:"attributeCategory,omitempty"`
	Attribute1        string         `protobuf:"bytes,16,opt,name=attribute1,proto3" json:"attribute1,omitempty"`
	Attribute2        string         `protobuf:"bytes,17,opt,name=attribute2,proto3" json:"attribute2,omitempty"`
	Attribute3        string         `protobuf:"bytes,18,opt,name=attribute3,proto3" json:"attribute3,omitempty"`
	Attribute4        string         `protobuf:"bytes,19,opt,name=attribute4,proto3" json:"attribute4,omitempty"`
	Attribute5        string         `protobuf:"bytes,20,opt,name=attribute5,proto3" json:"attribute5,omitempty"`
	Attribute6        string         `protobuf:"bytes,21,opt,name=attribute6,proto3" json:"attribute6,omitempty"`
	Attribute7        string         `protobuf:"bytes,22,opt,name=attribute7,proto3" json:"attribute7,omitempty"`
	Attribute8        string         `protobuf:"bytes,23,opt,name=attribute8,proto3" json:"attribute8,omitempty"`
	Attribute9        string         `protobuf:"bytes,24,opt,name=attribute9,proto3" json:"attribute9,omitempty"`
	Attribute10       string         `protobuf:"bytes,25,opt,name=attribute10,proto3" json:"attribute10,omitempty"`
	Attribute11       string         `protobuf:"bytes,26,opt,name=attribute11,proto3" json:"attribute11,omitempty"`
	Attribute12       string         `protobuf:"bytes,27,opt,name=attribute12,proto3" json:"attribute12,omitempty"`
	Attribute13       string         `protobuf:"bytes,28,opt,name=attribute13,proto3" json:"attribute13,omitempty"`
	Attribute14       string         `protobuf:"bytes,29,opt,name=attribute14,proto3" json:"attribute14,omitempty"`
	Attribute15       string         `protobuf:"bytes,30,opt,name=attribute15,proto3" json:"attribute15,omitempty"`
}

func (m *ReceiveHeader) Reset()                    { *m = ReceiveHeader{} }
func (m *ReceiveHeader) String() string            { return proto.CompactTextString(m) }
func (*ReceiveHeader) ProtoMessage()               {}
func (*ReceiveHeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{33} }

func (m *ReceiveHeader) GetRecHeaderId() int64 {
	if m != nil {
		return m.RecHeaderId
	}
	return 0
}

func (m *ReceiveHeader) GetShipmentHeaderId() int64 {
	if m != nil {
		return m.ShipmentHeaderId
	}
	return 0
}

func (m *ReceiveHeader) GetReceiptNum() string {
	if m != nil {
		return m.ReceiptNum
	}
	return ""
}

func (m *ReceiveHeader) GetReceiveDate() int64 {
	if m != nil {
		return m.ReceiveDate
	}
	return 0
}

func (m *ReceiveHeader) GetReceivePerson() string {
	if m != nil {
		return m.ReceivePerson
	}
	return ""
}

func (m *ReceiveHeader) GetPurchansePerson() string {
	if m != nil {
		return m.PurchansePerson
	}
	return ""
}

func (m *ReceiveHeader) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *ReceiveHeader) GetOrganizationCode() string {
	if m != nil {
		return m.OrganizationCode
	}
	return ""
}

func (m *ReceiveHeader) GetVendorId() int64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *ReceiveHeader) GetVendorCode() string {
	if m != nil {
		return m.VendorCode
	}
	return ""
}

func (m *ReceiveHeader) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *ReceiveHeader) GetVendorSiteId() int64 {
	if m != nil {
		return m.VendorSiteId
	}
	return 0
}

func (m *ReceiveHeader) GetVendorSiteCode() string {
	if m != nil {
		return m.VendorSiteCode
	}
	return ""
}

func (m *ReceiveHeader) GetReceiveLines() []*ReceiveLine {
	if m != nil {
		return m.ReceiveLines
	}
	return nil
}

func (m *ReceiveHeader) GetAttributeCategory() string {
	if m != nil {
		return m.AttributeCategory
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute1() string {
	if m != nil {
		return m.Attribute1
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute2() string {
	if m != nil {
		return m.Attribute2
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute3() string {
	if m != nil {
		return m.Attribute3
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute4() string {
	if m != nil {
		return m.Attribute4
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute5() string {
	if m != nil {
		return m.Attribute5
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute6() string {
	if m != nil {
		return m.Attribute6
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute7() string {
	if m != nil {
		return m.Attribute7
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute8() string {
	if m != nil {
		return m.Attribute8
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute9() string {
	if m != nil {
		return m.Attribute9
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute10() string {
	if m != nil {
		return m.Attribute10
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute11() string {
	if m != nil {
		return m.Attribute11
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute12() string {
	if m != nil {
		return m.Attribute12
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute13() string {
	if m != nil {
		return m.Attribute13
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute14() string {
	if m != nil {
		return m.Attribute14
	}
	return ""
}

func (m *ReceiveHeader) GetAttribute15() string {
	if m != nil {
		return m.Attribute15
	}
	return ""
}

// 入库行
type ReceiveLine struct {
	RcvTranId              int64  `protobuf:"varint,1,opt,name=rcvTranId,proto3" json:"rcvTranId,omitempty"`
	ShipmentHeaderId       int64  `protobuf:"varint,2,opt,name=shipmentHeaderId,proto3" json:"shipmentHeaderId,omitempty"`
	ItemId                 int64  `protobuf:"varint,3,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ItemCode               string `protobuf:"bytes,4,opt,name=itemCode,proto3" json:"itemCode,omitempty"`
	ItemDesc               string `protobuf:"bytes,5,opt,name=itemDesc,proto3" json:"itemDesc,omitempty"`
	PrimaryUnit            string `protobuf:"bytes,6,opt,name=primaryUnit,proto3" json:"primaryUnit,omitempty"`
	PoHeaderId             int64  `protobuf:"varint,7,opt,name=poHeaderId,proto3" json:"poHeaderId,omitempty"`
	PoLineId               int64  `protobuf:"varint,8,opt,name=poLineId,proto3" json:"poLineId,omitempty"`
	PoNum                  string `protobuf:"bytes,9,opt,name=poNum,proto3" json:"poNum,omitempty"`
	LineNum                string `protobuf:"bytes,10,opt,name=lineNum,proto3" json:"lineNum,omitempty"`
	CurrencyCode           string `protobuf:"bytes,11,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	Quantity               int64  `protobuf:"varint,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	PoUnitPrice            int64  `protobuf:"varint,13,opt,name=poUnitPrice,proto3" json:"poUnitPrice,omitempty"`
	PriceMatched           int64  `protobuf:"varint,14,opt,name=priceMatched,proto3" json:"priceMatched,omitempty"`
	QuantityMatched        int64  `protobuf:"varint,15,opt,name=quantityMatched,proto3" json:"quantityMatched,omitempty"`
	AmountMatched          int64  `protobuf:"varint,16,opt,name=amountMatched,proto3" json:"amountMatched,omitempty"`
	Remark                 string `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	RcvTranType            string `protobuf:"bytes,18,opt,name=rcvTranType,proto3" json:"rcvTranType,omitempty"`
	RcvTranDate            int64  `protobuf:"varint,19,opt,name=rcvTranDate,proto3" json:"rcvTranDate,omitempty"`
	ReturnQuantity         int64  `protobuf:"varint,20,opt,name=returnQuantity,proto3" json:"returnQuantity,omitempty"`
	TopTranId              int64  `protobuf:"varint,21,opt,name=topTranId,proto3" json:"topTranId,omitempty"`
	AttributeCategory      string `protobuf:"bytes,22,opt,name=attributeCategory,proto3" json:"attributeCategory,omitempty"`
	Attribute1             string `protobuf:"bytes,23,opt,name=attribute1,proto3" json:"attribute1,omitempty"`
	Attribute2             string `protobuf:"bytes,24,opt,name=attribute2,proto3" json:"attribute2,omitempty"`
	Attribute3             string `protobuf:"bytes,25,opt,name=attribute3,proto3" json:"attribute3,omitempty"`
	Attribute4             string `protobuf:"bytes,26,opt,name=attribute4,proto3" json:"attribute4,omitempty"`
	Attribute5             string `protobuf:"bytes,27,opt,name=attribute5,proto3" json:"attribute5,omitempty"`
	Attribute6             string `protobuf:"bytes,28,opt,name=attribute6,proto3" json:"attribute6,omitempty"`
	Attribute7             string `protobuf:"bytes,29,opt,name=attribute7,proto3" json:"attribute7,omitempty"`
	Attribute8             string `protobuf:"bytes,30,opt,name=attribute8,proto3" json:"attribute8,omitempty"`
	Attribute9             string `protobuf:"bytes,31,opt,name=attribute9,proto3" json:"attribute9,omitempty"`
	Attribute10            string `protobuf:"bytes,32,opt,name=attribute10,proto3" json:"attribute10,omitempty"`
	Attribute11            string `protobuf:"bytes,33,opt,name=attribute11,proto3" json:"attribute11,omitempty"`
	Attribute12            string `protobuf:"bytes,34,opt,name=attribute12,proto3" json:"attribute12,omitempty"`
	Attribute13            string `protobuf:"bytes,35,opt,name=attribute13,proto3" json:"attribute13,omitempty"`
	Attribute14            string `protobuf:"bytes,36,opt,name=attribute14,proto3" json:"attribute14,omitempty"`
	Attribute15            string `protobuf:"bytes,37,opt,name=attribute15,proto3" json:"attribute15,omitempty"`
	CurrencyConversionRate int64  `protobuf:"varint,38,opt,name=currencyConversionRate,proto3" json:"currencyConversionRate,omitempty"`
	CurrencyConversionDate int64  `protobuf:"varint,39,opt,name=currencyConversionDate,proto3" json:"currencyConversionDate,omitempty"`
}

func (m *ReceiveLine) Reset()                    { *m = ReceiveLine{} }
func (m *ReceiveLine) String() string            { return proto.CompactTextString(m) }
func (*ReceiveLine) ProtoMessage()               {}
func (*ReceiveLine) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{34} }

func (m *ReceiveLine) GetRcvTranId() int64 {
	if m != nil {
		return m.RcvTranId
	}
	return 0
}

func (m *ReceiveLine) GetShipmentHeaderId() int64 {
	if m != nil {
		return m.ShipmentHeaderId
	}
	return 0
}

func (m *ReceiveLine) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ReceiveLine) GetItemCode() string {
	if m != nil {
		return m.ItemCode
	}
	return ""
}

func (m *ReceiveLine) GetItemDesc() string {
	if m != nil {
		return m.ItemDesc
	}
	return ""
}

func (m *ReceiveLine) GetPrimaryUnit() string {
	if m != nil {
		return m.PrimaryUnit
	}
	return ""
}

func (m *ReceiveLine) GetPoHeaderId() int64 {
	if m != nil {
		return m.PoHeaderId
	}
	return 0
}

func (m *ReceiveLine) GetPoLineId() int64 {
	if m != nil {
		return m.PoLineId
	}
	return 0
}

func (m *ReceiveLine) GetPoNum() string {
	if m != nil {
		return m.PoNum
	}
	return ""
}

func (m *ReceiveLine) GetLineNum() string {
	if m != nil {
		return m.LineNum
	}
	return ""
}

func (m *ReceiveLine) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *ReceiveLine) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ReceiveLine) GetPoUnitPrice() int64 {
	if m != nil {
		return m.PoUnitPrice
	}
	return 0
}

func (m *ReceiveLine) GetPriceMatched() int64 {
	if m != nil {
		return m.PriceMatched
	}
	return 0
}

func (m *ReceiveLine) GetQuantityMatched() int64 {
	if m != nil {
		return m.QuantityMatched
	}
	return 0
}

func (m *ReceiveLine) GetAmountMatched() int64 {
	if m != nil {
		return m.AmountMatched
	}
	return 0
}

func (m *ReceiveLine) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *ReceiveLine) GetRcvTranType() string {
	if m != nil {
		return m.RcvTranType
	}
	return ""
}

func (m *ReceiveLine) GetRcvTranDate() int64 {
	if m != nil {
		return m.RcvTranDate
	}
	return 0
}

func (m *ReceiveLine) GetReturnQuantity() int64 {
	if m != nil {
		return m.ReturnQuantity
	}
	return 0
}

func (m *ReceiveLine) GetTopTranId() int64 {
	if m != nil {
		return m.TopTranId
	}
	return 0
}

func (m *ReceiveLine) GetAttributeCategory() string {
	if m != nil {
		return m.AttributeCategory
	}
	return ""
}

func (m *ReceiveLine) GetAttribute1() string {
	if m != nil {
		return m.Attribute1
	}
	return ""
}

func (m *ReceiveLine) GetAttribute2() string {
	if m != nil {
		return m.Attribute2
	}
	return ""
}

func (m *ReceiveLine) GetAttribute3() string {
	if m != nil {
		return m.Attribute3
	}
	return ""
}

func (m *ReceiveLine) GetAttribute4() string {
	if m != nil {
		return m.Attribute4
	}
	return ""
}

func (m *ReceiveLine) GetAttribute5() string {
	if m != nil {
		return m.Attribute5
	}
	return ""
}

func (m *ReceiveLine) GetAttribute6() string {
	if m != nil {
		return m.Attribute6
	}
	return ""
}

func (m *ReceiveLine) GetAttribute7() string {
	if m != nil {
		return m.Attribute7
	}
	return ""
}

func (m *ReceiveLine) GetAttribute8() string {
	if m != nil {
		return m.Attribute8
	}
	return ""
}

func (m *ReceiveLine) GetAttribute9() string {
	if m != nil {
		return m.Attribute9
	}
	return ""
}

func (m *ReceiveLine) GetAttribute10() string {
	if m != nil {
		return m.Attribute10
	}
	return ""
}

func (m *ReceiveLine) GetAttribute11() string {
	if m != nil {
		return m.Attribute11
	}
	return ""
}

func (m *ReceiveLine) GetAttribute12() string {
	if m != nil {
		return m.Attribute12
	}
	return ""
}

func (m *ReceiveLine) GetAttribute13() string {
	if m != nil {
		return m.Attribute13
	}
	return ""
}

func (m *ReceiveLine) GetAttribute14() string {
	if m != nil {
		return m.Attribute14
	}
	return ""
}

func (m *ReceiveLine) GetAttribute15() string {
	if m != nil {
		return m.Attribute15
	}
	return ""
}

func (m *ReceiveLine) GetCurrencyConversionRate() int64 {
	if m != nil {
		return m.CurrencyConversionRate
	}
	return 0
}

func (m *ReceiveLine) GetCurrencyConversionDate() int64 {
	if m != nil {
		return m.CurrencyConversionDate
	}
	return 0
}

// 发票头
type InvoiceHeader struct {
	IspInvoiceId           int64          `protobuf:"varint,1,opt,name=ispInvoiceId,proto3" json:"ispInvoiceId,omitempty"`
	IspInvoiceCode         string         `protobuf:"bytes,2,opt,name=ispInvoiceCode,proto3" json:"ispInvoiceCode,omitempty"`
	OrgId                  int64          `protobuf:"varint,3,opt,name=orgId,proto3" json:"orgId,omitempty"`
	OrgName                string         `protobuf:"bytes,4,opt,name=orgName,proto3" json:"orgName,omitempty"`
	SourceCode             string         `protobuf:"bytes,5,opt,name=sourceCode,proto3" json:"sourceCode,omitempty"`
	VendorId               int64          `protobuf:"varint,6,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	VendorCode             string         `protobuf:"bytes,7,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	VendorName             string         `protobuf:"bytes,8,opt,name=vendorName,proto3" json:"vendorName,omitempty"`
	VendorSiteId           int64          `protobuf:"varint,9,opt,name=vendorSiteId,proto3" json:"vendorSiteId,omitempty"`
	VendorSiteCode         string         `protobuf:"bytes,10,opt,name=vendorSiteCode,proto3" json:"vendorSiteCode,omitempty"`
	VendorSite             string         `protobuf:"bytes,11,opt,name=vendorSite,proto3" json:"vendorSite,omitempty"`
	TcmNoTaxAmount         int64          `protobuf:"varint,12,opt,name=tcmNoTaxAmount,proto3" json:"tcmNoTaxAmount,omitempty"`
	TaxRate                int64          `protobuf:"varint,13,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	TaxAmount              int64          `protobuf:"varint,14,opt,name=taxAmount,proto3" json:"taxAmount,omitempty"`
	CurrencyCode           string         `protobuf:"bytes,15,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	CurrencyConversionRate int64          `protobuf:"varint,16,opt,name=currencyConversionRate,proto3" json:"currencyConversionRate,omitempty"`
	CurrencyConversionDate int64          `protobuf:"varint,17,opt,name=currencyConversionDate,proto3" json:"currencyConversionDate,omitempty"`
	Comments               string         `protobuf:"bytes,18,opt,name=comments,proto3" json:"comments,omitempty"`
	ApInvoiceNumber        string         `protobuf:"bytes,19,opt,name=apInvoiceNumber,proto3" json:"apInvoiceNumber,omitempty"`
	GlDate                 int64          `protobuf:"varint,20,opt,name=glDate,proto3" json:"glDate,omitempty"`
	InvoiceLine            []*InvoiceLine `protobuf:"bytes,21,rep,name=invoiceLine" json:"invoiceLine,omitempty"`
	InvoiceState           InvoiceState   `protobuf:"varint,22,opt,name=invoiceState,proto3,enum=mideaSupply.InvoiceState" json:"invoiceState,omitempty"`
	CreatedBy              string         `protobuf:"bytes,23,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedDate            int64          `protobuf:"varint,24,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	InvoiceStatus          string         `protobuf:"bytes,25,opt,name=invoiceStatus,proto3" json:"invoiceStatus,omitempty"`
	AttributeCategory      string         `protobuf:"bytes,26,opt,name=attributeCategory,proto3" json:"attributeCategory,omitempty"`
	Attribute1             string         `protobuf:"bytes,27,opt,name=attribute1,proto3" json:"attribute1,omitempty"`
	Attribute2             string         `protobuf:"bytes,28,opt,name=attribute2,proto3" json:"attribute2,omitempty"`
	Attribute3             string         `protobuf:"bytes,29,opt,name=attribute3,proto3" json:"attribute3,omitempty"`
	Attribute4             string         `protobuf:"bytes,30,opt,name=attribute4,proto3" json:"attribute4,omitempty"`
	Attribute5             string         `protobuf:"bytes,31,opt,name=attribute5,proto3" json:"attribute5,omitempty"`
	Attribute6             string         `protobuf:"bytes,32,opt,name=attribute6,proto3" json:"attribute6,omitempty"`
	Attribute7             string         `protobuf:"bytes,33,opt,name=attribute7,proto3" json:"attribute7,omitempty"`
	Attribute8             string         `protobuf:"bytes,34,opt,name=attribute8,proto3" json:"attribute8,omitempty"`
	Attribute9             string         `protobuf:"bytes,35,opt,name=attribute9,proto3" json:"attribute9,omitempty"`
	Attribute10            string         `protobuf:"bytes,36,opt,name=attribute10,proto3" json:"attribute10,omitempty"`
	Attribute11            string         `protobuf:"bytes,37,opt,name=attribute11,proto3" json:"attribute11,omitempty"`
	Attribute12            string         `protobuf:"bytes,38,opt,name=attribute12,proto3" json:"attribute12,omitempty"`
	Attribute13            string         `protobuf:"bytes,39,opt,name=attribute13,proto3" json:"attribute13,omitempty"`
	Attribute14            string         `protobuf:"bytes,40,opt,name=attribute14,proto3" json:"attribute14,omitempty"`
	Attribute15            string         `protobuf:"bytes,41,opt,name=attribute15,proto3" json:"attribute15,omitempty"`
}

func (m *InvoiceHeader) Reset()                    { *m = InvoiceHeader{} }
func (m *InvoiceHeader) String() string            { return proto.CompactTextString(m) }
func (*InvoiceHeader) ProtoMessage()               {}
func (*InvoiceHeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{35} }

func (m *InvoiceHeader) GetIspInvoiceId() int64 {
	if m != nil {
		return m.IspInvoiceId
	}
	return 0
}

func (m *InvoiceHeader) GetIspInvoiceCode() string {
	if m != nil {
		return m.IspInvoiceCode
	}
	return ""
}

func (m *InvoiceHeader) GetOrgId() int64 {
	if m != nil {
		return m.OrgId
	}
	return 0
}

func (m *InvoiceHeader) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *InvoiceHeader) GetSourceCode() string {
	if m != nil {
		return m.SourceCode
	}
	return ""
}

func (m *InvoiceHeader) GetVendorId() int64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *InvoiceHeader) GetVendorCode() string {
	if m != nil {
		return m.VendorCode
	}
	return ""
}

func (m *InvoiceHeader) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *InvoiceHeader) GetVendorSiteId() int64 {
	if m != nil {
		return m.VendorSiteId
	}
	return 0
}

func (m *InvoiceHeader) GetVendorSiteCode() string {
	if m != nil {
		return m.VendorSiteCode
	}
	return ""
}

func (m *InvoiceHeader) GetVendorSite() string {
	if m != nil {
		return m.VendorSite
	}
	return ""
}

func (m *InvoiceHeader) GetTcmNoTaxAmount() int64 {
	if m != nil {
		return m.TcmNoTaxAmount
	}
	return 0
}

func (m *InvoiceHeader) GetTaxRate() int64 {
	if m != nil {
		return m.TaxRate
	}
	return 0
}

func (m *InvoiceHeader) GetTaxAmount() int64 {
	if m != nil {
		return m.TaxAmount
	}
	return 0
}

func (m *InvoiceHeader) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *InvoiceHeader) GetCurrencyConversionRate() int64 {
	if m != nil {
		return m.CurrencyConversionRate
	}
	return 0
}

func (m *InvoiceHeader) GetCurrencyConversionDate() int64 {
	if m != nil {
		return m.CurrencyConversionDate
	}
	return 0
}

func (m *InvoiceHeader) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *InvoiceHeader) GetApInvoiceNumber() string {
	if m != nil {
		return m.ApInvoiceNumber
	}
	return ""
}

func (m *InvoiceHeader) GetGlDate() int64 {
	if m != nil {
		return m.GlDate
	}
	return 0
}

func (m *InvoiceHeader) GetInvoiceLine() []*InvoiceLine {
	if m != nil {
		return m.InvoiceLine
	}
	return nil
}

func (m *InvoiceHeader) GetInvoiceState() InvoiceState {
	if m != nil {
		return m.InvoiceState
	}
	return InvoiceState_IS_UNCHECKED
}

func (m *InvoiceHeader) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *InvoiceHeader) GetCreatedDate() int64 {
	if m != nil {
		return m.CreatedDate
	}
	return 0
}

func (m *InvoiceHeader) GetInvoiceStatus() string {
	if m != nil {
		return m.InvoiceStatus
	}
	return ""
}

func (m *InvoiceHeader) GetAttributeCategory() string {
	if m != nil {
		return m.AttributeCategory
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute1() string {
	if m != nil {
		return m.Attribute1
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute2() string {
	if m != nil {
		return m.Attribute2
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute3() string {
	if m != nil {
		return m.Attribute3
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute4() string {
	if m != nil {
		return m.Attribute4
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute5() string {
	if m != nil {
		return m.Attribute5
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute6() string {
	if m != nil {
		return m.Attribute6
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute7() string {
	if m != nil {
		return m.Attribute7
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute8() string {
	if m != nil {
		return m.Attribute8
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute9() string {
	if m != nil {
		return m.Attribute9
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute10() string {
	if m != nil {
		return m.Attribute10
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute11() string {
	if m != nil {
		return m.Attribute11
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute12() string {
	if m != nil {
		return m.Attribute12
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute13() string {
	if m != nil {
		return m.Attribute13
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute14() string {
	if m != nil {
		return m.Attribute14
	}
	return ""
}

func (m *InvoiceHeader) GetAttribute15() string {
	if m != nil {
		return m.Attribute15
	}
	return ""
}

// 发票行
type InvoiceLine struct {
	IspInvoiceId       int64  `protobuf:"varint,1,opt,name=ispInvoiceId,proto3" json:"ispInvoiceId,omitempty"`
	IspInvoiceLineId   int64  `protobuf:"varint,2,opt,name=ispInvoiceLineId,proto3" json:"ispInvoiceLineId,omitempty"`
	IspTranId          int64  `protobuf:"varint,3,opt,name=ispTranId,proto3" json:"ispTranId,omitempty"`
	OrganizationId     int64  `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	OrganizationCode   string `protobuf:"bytes,5,opt,name=organizationCode,proto3" json:"organizationCode,omitempty"`
	LineNum            int64  `protobuf:"varint,6,opt,name=lineNum,proto3" json:"lineNum,omitempty"`
	InventoryItemId    int64  `protobuf:"varint,7,opt,name=inventoryItemId,proto3" json:"inventoryItemId,omitempty"`
	ItemCode           string `protobuf:"bytes,8,opt,name=itemCode,proto3" json:"itemCode,omitempty"`
	ItemDesc           string `protobuf:"bytes,9,opt,name=itemDesc,proto3" json:"itemDesc,omitempty"`
	ItemUom            string `protobuf:"bytes,10,opt,name=itemUom,proto3" json:"itemUom,omitempty"`
	Quantity           int64  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price              int64  `protobuf:"varint,12,opt,name=price,proto3" json:"price,omitempty"`
	ShareFlag          string `protobuf:"bytes,13,opt,name=shareFlag,proto3" json:"shareFlag,omitempty"`
	LineType           string `protobuf:"bytes,14,opt,name=lineType,proto3" json:"lineType,omitempty"`
	PenaltyId          int64  `protobuf:"varint,15,opt,name=penaltyId,proto3" json:"penaltyId,omitempty"`
	OverduePenaltyRate int64  `protobuf:"varint,16,opt,name=overduePenaltyRate,proto3" json:"overduePenaltyRate,omitempty"`
	LineAmount         int64  `protobuf:"varint,17,opt,name=lineAmount,proto3" json:"lineAmount,omitempty"`
	PoPrice            int64  `protobuf:"varint,18,opt,name=poPrice,proto3" json:"poPrice,omitempty"`
	AttributeCategory  string `protobuf:"bytes,19,opt,name=attributeCategory,proto3" json:"attributeCategory,omitempty"`
	Attribute1         string `protobuf:"bytes,20,opt,name=attribute1,proto3" json:"attribute1,omitempty"`
	Attribute2         string `protobuf:"bytes,21,opt,name=attribute2,proto3" json:"attribute2,omitempty"`
	Attribute3         string `protobuf:"bytes,22,opt,name=attribute3,proto3" json:"attribute3,omitempty"`
	Attribute4         string `protobuf:"bytes,23,opt,name=attribute4,proto3" json:"attribute4,omitempty"`
	Attribute5         string `protobuf:"bytes,24,opt,name=attribute5,proto3" json:"attribute5,omitempty"`
	Attribute6         string `protobuf:"bytes,25,opt,name=attribute6,proto3" json:"attribute6,omitempty"`
	Attribute7         string `protobuf:"bytes,26,opt,name=attribute7,proto3" json:"attribute7,omitempty"`
	Attribute8         string `protobuf:"bytes,27,opt,name=attribute8,proto3" json:"attribute8,omitempty"`
	Attribute9         string `protobuf:"bytes,28,opt,name=attribute9,proto3" json:"attribute9,omitempty"`
	Attribute10        string `protobuf:"bytes,29,opt,name=attribute10,proto3" json:"attribute10,omitempty"`
	Attribute11        string `protobuf:"bytes,30,opt,name=attribute11,proto3" json:"attribute11,omitempty"`
	Attribute12        string `protobuf:"bytes,31,opt,name=attribute12,proto3" json:"attribute12,omitempty"`
	Attribute13        string `protobuf:"bytes,32,opt,name=attribute13,proto3" json:"attribute13,omitempty"`
	Attribute14        string `protobuf:"bytes,33,opt,name=attribute14,proto3" json:"attribute14,omitempty"`
	Attribute15        string `protobuf:"bytes,34,opt,name=attribute15,proto3" json:"attribute15,omitempty"`
}

func (m *InvoiceLine) Reset()                    { *m = InvoiceLine{} }
func (m *InvoiceLine) String() string            { return proto.CompactTextString(m) }
func (*InvoiceLine) ProtoMessage()               {}
func (*InvoiceLine) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{36} }

func (m *InvoiceLine) GetIspInvoiceId() int64 {
	if m != nil {
		return m.IspInvoiceId
	}
	return 0
}

func (m *InvoiceLine) GetIspInvoiceLineId() int64 {
	if m != nil {
		return m.IspInvoiceLineId
	}
	return 0
}

func (m *InvoiceLine) GetIspTranId() int64 {
	if m != nil {
		return m.IspTranId
	}
	return 0
}

func (m *InvoiceLine) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *InvoiceLine) GetOrganizationCode() string {
	if m != nil {
		return m.OrganizationCode
	}
	return ""
}

func (m *InvoiceLine) GetLineNum() int64 {
	if m != nil {
		return m.LineNum
	}
	return 0
}

func (m *InvoiceLine) GetInventoryItemId() int64 {
	if m != nil {
		return m.InventoryItemId
	}
	return 0
}

func (m *InvoiceLine) GetItemCode() string {
	if m != nil {
		return m.ItemCode
	}
	return ""
}

func (m *InvoiceLine) GetItemDesc() string {
	if m != nil {
		return m.ItemDesc
	}
	return ""
}

func (m *InvoiceLine) GetItemUom() string {
	if m != nil {
		return m.ItemUom
	}
	return ""
}

func (m *InvoiceLine) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *InvoiceLine) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *InvoiceLine) GetShareFlag() string {
	if m != nil {
		return m.ShareFlag
	}
	return ""
}

func (m *InvoiceLine) GetLineType() string {
	if m != nil {
		return m.LineType
	}
	return ""
}

func (m *InvoiceLine) GetPenaltyId() int64 {
	if m != nil {
		return m.PenaltyId
	}
	return 0
}

func (m *InvoiceLine) GetOverduePenaltyRate() int64 {
	if m != nil {
		return m.OverduePenaltyRate
	}
	return 0
}

func (m *InvoiceLine) GetLineAmount() int64 {
	if m != nil {
		return m.LineAmount
	}
	return 0
}

func (m *InvoiceLine) GetPoPrice() int64 {
	if m != nil {
		return m.PoPrice
	}
	return 0
}

func (m *InvoiceLine) GetAttributeCategory() string {
	if m != nil {
		return m.AttributeCategory
	}
	return ""
}

func (m *InvoiceLine) GetAttribute1() string {
	if m != nil {
		return m.Attribute1
	}
	return ""
}

func (m *InvoiceLine) GetAttribute2() string {
	if m != nil {
		return m.Attribute2
	}
	return ""
}

func (m *InvoiceLine) GetAttribute3() string {
	if m != nil {
		return m.Attribute3
	}
	return ""
}

func (m *InvoiceLine) GetAttribute4() string {
	if m != nil {
		return m.Attribute4
	}
	return ""
}

func (m *InvoiceLine) GetAttribute5() string {
	if m != nil {
		return m.Attribute5
	}
	return ""
}

func (m *InvoiceLine) GetAttribute6() string {
	if m != nil {
		return m.Attribute6
	}
	return ""
}

func (m *InvoiceLine) GetAttribute7() string {
	if m != nil {
		return m.Attribute7
	}
	return ""
}

func (m *InvoiceLine) GetAttribute8() string {
	if m != nil {
		return m.Attribute8
	}
	return ""
}

func (m *InvoiceLine) GetAttribute9() string {
	if m != nil {
		return m.Attribute9
	}
	return ""
}

func (m *InvoiceLine) GetAttribute10() string {
	if m != nil {
		return m.Attribute10
	}
	return ""
}

func (m *InvoiceLine) GetAttribute11() string {
	if m != nil {
		return m.Attribute11
	}
	return ""
}

func (m *InvoiceLine) GetAttribute12() string {
	if m != nil {
		return m.Attribute12
	}
	return ""
}

func (m *InvoiceLine) GetAttribute13() string {
	if m != nil {
		return m.Attribute13
	}
	return ""
}

func (m *InvoiceLine) GetAttribute14() string {
	if m != nil {
		return m.Attribute14
	}
	return ""
}

func (m *InvoiceLine) GetAttribute15() string {
	if m != nil {
		return m.Attribute15
	}
	return ""
}

type UnInvoiceLine struct {
	VendorCode        string `protobuf:"bytes,1,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	VendorName        string `protobuf:"bytes,2,opt,name=vendorName,proto3" json:"vendorName,omitempty"`
	VendorSiteCode    string `protobuf:"bytes,3,opt,name=vendorSiteCode,proto3" json:"vendorSiteCode,omitempty"`
	PoNum             string `protobuf:"bytes,4,opt,name=poNum,proto3" json:"poNum,omitempty"`
	ReceiptNum        string `protobuf:"bytes,5,opt,name=receiptNum,proto3" json:"receiptNum,omitempty"`
	ReceiveDate       int64  `protobuf:"varint,6,opt,name=receiveDate,proto3" json:"receiveDate,omitempty"`
	ItemCode          string `protobuf:"bytes,7,opt,name=itemCode,proto3" json:"itemCode,omitempty"`
	ItemDesc          string `protobuf:"bytes,8,opt,name=itemDesc,proto3" json:"itemDesc,omitempty"`
	PrimayUnit        string `protobuf:"bytes,9,opt,name=primayUnit,proto3" json:"primayUnit,omitempty"`
	QuantityReceived  int64  `protobuf:"varint,10,opt,name=quantityReceived,proto3" json:"quantityReceived,omitempty"`
	QuantityMatched   int64  `protobuf:"varint,11,opt,name=quantityMatched,proto3" json:"quantityMatched,omitempty"`
	PoUnitPrice       int64  `protobuf:"varint,12,opt,name=poUnitPrice,proto3" json:"poUnitPrice,omitempty"`
	RightAmount       int64  `protobuf:"varint,13,opt,name=rightAmount,proto3" json:"rightAmount,omitempty"`
	CurrencyCode      string `protobuf:"bytes,14,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	OrginalCode       string `protobuf:"bytes,15,opt,name=orginalCode,proto3" json:"orginalCode,omitempty"`
	OrganizationId    int64  `protobuf:"varint,16,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	TranId            int64  `protobuf:"varint,17,opt,name=tranId,proto3" json:"tranId,omitempty"`
	QuantityUnmatched int64  `protobuf:"varint,18,opt,name=quantityUnmatched,proto3" json:"quantityUnmatched,omitempty"`
	CurrencyAmount    int64  `protobuf:"varint,19,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	OrginalAmount     int64  `protobuf:"varint,20,opt,name=orginalAmount,proto3" json:"orginalAmount,omitempty"`
}

func (m *UnInvoiceLine) Reset()                    { *m = UnInvoiceLine{} }
func (m *UnInvoiceLine) String() string            { return proto.CompactTextString(m) }
func (*UnInvoiceLine) ProtoMessage()               {}
func (*UnInvoiceLine) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{37} }

func (m *UnInvoiceLine) GetVendorCode() string {
	if m != nil {
		return m.VendorCode
	}
	return ""
}

func (m *UnInvoiceLine) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *UnInvoiceLine) GetVendorSiteCode() string {
	if m != nil {
		return m.VendorSiteCode
	}
	return ""
}

func (m *UnInvoiceLine) GetPoNum() string {
	if m != nil {
		return m.PoNum
	}
	return ""
}

func (m *UnInvoiceLine) GetReceiptNum() string {
	if m != nil {
		return m.ReceiptNum
	}
	return ""
}

func (m *UnInvoiceLine) GetReceiveDate() int64 {
	if m != nil {
		return m.ReceiveDate
	}
	return 0
}

func (m *UnInvoiceLine) GetItemCode() string {
	if m != nil {
		return m.ItemCode
	}
	return ""
}

func (m *UnInvoiceLine) GetItemDesc() string {
	if m != nil {
		return m.ItemDesc
	}
	return ""
}

func (m *UnInvoiceLine) GetPrimayUnit() string {
	if m != nil {
		return m.PrimayUnit
	}
	return ""
}

func (m *UnInvoiceLine) GetQuantityReceived() int64 {
	if m != nil {
		return m.QuantityReceived
	}
	return 0
}

func (m *UnInvoiceLine) GetQuantityMatched() int64 {
	if m != nil {
		return m.QuantityMatched
	}
	return 0
}

func (m *UnInvoiceLine) GetPoUnitPrice() int64 {
	if m != nil {
		return m.PoUnitPrice
	}
	return 0
}

func (m *UnInvoiceLine) GetRightAmount() int64 {
	if m != nil {
		return m.RightAmount
	}
	return 0
}

func (m *UnInvoiceLine) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *UnInvoiceLine) GetOrginalCode() string {
	if m != nil {
		return m.OrginalCode
	}
	return ""
}

func (m *UnInvoiceLine) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *UnInvoiceLine) GetTranId() int64 {
	if m != nil {
		return m.TranId
	}
	return 0
}

func (m *UnInvoiceLine) GetQuantityUnmatched() int64 {
	if m != nil {
		return m.QuantityUnmatched
	}
	return 0
}

func (m *UnInvoiceLine) GetCurrencyAmount() int64 {
	if m != nil {
		return m.CurrencyAmount
	}
	return 0
}

func (m *UnInvoiceLine) GetOrginalAmount() int64 {
	if m != nil {
		return m.OrginalAmount
	}
	return 0
}

type Platform struct {
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Platform) Reset()                    { *m = Platform{} }
func (m *Platform) String() string            { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()               {}
func (*Platform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{38} }

func (m *Platform) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Platform) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type Supplier struct {
	UserPubkey   []byte           `protobuf:"bytes,1,opt,name=userPubkey,proto3" json:"userPubkey,omitempty"`
	VendorId     int64            `protobuf:"varint,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	VendorCode   string           `protobuf:"bytes,3,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	VendorName   string           `protobuf:"bytes,4,opt,name=vendorName,proto3" json:"vendorName,omitempty"`
	SupplierSite []*SupplierSite  `protobuf:"bytes,5,rep,name=supplierSite" json:"supplierSite,omitempty"`
	RcvHeaders   []*ReceiveHeader `protobuf:"bytes,6,rep,name=rcvHeaders" json:"rcvHeaders,omitempty"`
	InvHeaders   []*InvoiceHeader `protobuf:"bytes,7,rep,name=invHeaders" json:"invHeaders,omitempty"`
	UninvLines   []*UnInvoiceLine `protobuf:"bytes,8,rep,name=uninvLines" json:"uninvLines,omitempty"`
	Unlinenum    int64            `protobuf:"varint,9,opt,name=unlinenum,proto3" json:"unlinenum,omitempty"`
	Unlineamount int64            `protobuf:"varint,10,opt,name=unlineamount,proto3" json:"unlineamount,omitempty"`
	Rcvlines     []int64          `protobuf:"varint,11,rep,packed,name=rcvlines" json:"rcvlines,omitempty"`
}

func (m *Supplier) Reset()                    { *m = Supplier{} }
func (m *Supplier) String() string            { return proto.CompactTextString(m) }
func (*Supplier) ProtoMessage()               {}
func (*Supplier) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{39} }

func (m *Supplier) GetUserPubkey() []byte {
	if m != nil {
		return m.UserPubkey
	}
	return nil
}

func (m *Supplier) GetVendorId() int64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *Supplier) GetVendorCode() string {
	if m != nil {
		return m.VendorCode
	}
	return ""
}

func (m *Supplier) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *Supplier) GetSupplierSite() []*SupplierSite {
	if m != nil {
		return m.SupplierSite
	}
	return nil
}

func (m *Supplier) GetRcvHeaders() []*ReceiveHeader {
	if m != nil {
		return m.RcvHeaders
	}
	return nil
}

func (m *Supplier) GetInvHeaders() []*InvoiceHeader {
	if m != nil {
		return m.InvHeaders
	}
	return nil
}

func (m *Supplier) GetUninvLines() []*UnInvoiceLine {
	if m != nil {
		return m.UninvLines
	}
	return nil
}

func (m *Supplier) GetUnlinenum() int64 {
	if m != nil {
		return m.Unlinenum
	}
	return 0
}

func (m *Supplier) GetUnlineamount() int64 {
	if m != nil {
		return m.Unlineamount
	}
	return 0
}

func (m *Supplier) GetRcvlines() []int64 {
	if m != nil {
		return m.Rcvlines
	}
	return nil
}

type SupplierSite struct {
	SiteId   int64  `protobuf:"varint,1,opt,name=siteId,proto3" json:"siteId,omitempty"`
	SiteCode string `protobuf:"bytes,2,opt,name=siteCode,proto3" json:"siteCode,omitempty"`
}

func (m *SupplierSite) Reset()                    { *m = SupplierSite{} }
func (m *SupplierSite) String() string            { return proto.CompactTextString(m) }
func (*SupplierSite) ProtoMessage()               {}
func (*SupplierSite) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{40} }

func (m *SupplierSite) GetSiteId() int64 {
	if m != nil {
		return m.SiteId
	}
	return 0
}

func (m *SupplierSite) GetSiteCode() string {
	if m != nil {
		return m.SiteCode
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "mideaSupply.Request")
	proto.RegisterType((*RequestInitPlatform)(nil), "mideaSupply.RequestInitPlatform")
	proto.RegisterType((*RequestRegisterSupplier)(nil), "mideaSupply.RequestRegisterSupplier")
	proto.RegisterType((*RequestWarehouseEntry)(nil), "mideaSupply.RequestWarehouseEntry")
	proto.RegisterType((*RequestWarehouseEntryList)(nil), "mideaSupply.RequestWarehouseEntryList")
	proto.RegisterType((*RequestOpenInvoice)(nil), "mideaSupply.RequestOpenInvoice")
	proto.RegisterType((*RequestCheckInvoice)(nil), "mideaSupply.RequestCheckInvoice")
	proto.RegisterType((*RequestChangePubkey)(nil), "mideaSupply.RequestChangePubkey")
	proto.RegisterType((*RequestResetPubkey)(nil), "mideaSupply.RequestResetPubkey")
	proto.RegisterType((*RequestRegisterSupplierList)(nil), "mideaSupply.RequestRegisterSupplierList")
	proto.RegisterType((*Response)(nil), "mideaSupply.Response")
	proto.RegisterType((*ResponseException)(nil), "mideaSupply.ResponseException")
	proto.RegisterType((*ResponseOK)(nil), "mideaSupply.ResponseOK")
	proto.RegisterType((*Receipt)(nil), "mideaSupply.Receipt")
	proto.RegisterType((*ResponseInitPlatform)(nil), "mideaSupply.ResponseInitPlatform")
	proto.RegisterType((*ResponseRegisterSupplier)(nil), "mideaSupply.ResponseRegisterSupplier")
	proto.RegisterType((*ResponseWarehouseEntry)(nil), "mideaSupply.ResponseWarehouseEntry")
	proto.RegisterType((*ResponseWarehouseEntryList)(nil), "mideaSupply.ResponseWarehouseEntryList")
	proto.RegisterType((*ResponseOpenInvoice)(nil), "mideaSupply.ResponseOpenInvoice")
	proto.RegisterType((*ResponseCheckInvoice)(nil), "mideaSupply.ResponseCheckInvoice")
	proto.RegisterType((*ResponseChangePubkey)(nil), "mideaSupply.ResponseChangePubkey")
	proto.RegisterType((*ResponseResetPubkey)(nil), "mideaSupply.ResponseResetPubkey")
	proto.RegisterType((*ResponseRegisterSupplierList)(nil), "mideaSupply.ResponseRegisterSupplierList")
	proto.RegisterType((*Event)(nil), "mideaSupply.Event")
	proto.RegisterType((*EventInitPlatform)(nil), "mideaSupply.EventInitPlatform")
	proto.RegisterType((*EventRegisterSupplier)(nil), "mideaSupply.EventRegisterSupplier")
	proto.RegisterType((*EventWarehouseEntry)(nil), "mideaSupply.EventWarehouseEntry")
	proto.RegisterType((*EventWarehouseEntryList)(nil), "mideaSupply.EventWarehouseEntryList")
	proto.RegisterType((*EventOpenInvoice)(nil), "mideaSupply.EventOpenInvoice")
	proto.RegisterType((*EventCheckInvoice)(nil), "mideaSupply.EventCheckInvoice")
	proto.RegisterType((*EventChangePubkey)(nil), "mideaSupply.EventChangePubkey")
	proto.RegisterType((*EventResetPubkey)(nil), "mideaSupply.EventResetPubkey")
	proto.RegisterType((*EventRegisterSupplierList)(nil), "mideaSupply.EventRegisterSupplierList")
	proto.RegisterType((*ReceiveHeader)(nil), "mideaSupply.ReceiveHeader")
	proto.RegisterType((*ReceiveLine)(nil), "mideaSupply.ReceiveLine")
	proto.RegisterType((*InvoiceHeader)(nil), "mideaSupply.InvoiceHeader")
	proto.RegisterType((*InvoiceLine)(nil), "mideaSupply.InvoiceLine")
	proto.RegisterType((*UnInvoiceLine)(nil), "mideaSupply.UnInvoiceLine")
	proto.RegisterType((*Platform)(nil), "mideaSupply.Platform")
	proto.RegisterType((*Supplier)(nil), "mideaSupply.Supplier")
	proto.RegisterType((*SupplierSite)(nil), "mideaSupply.SupplierSite")
	proto.RegisterEnum("mideaSupply.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("mideaSupply.InvoiceState", InvoiceState_name, InvoiceState_value)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if m.InstructionId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.ActionId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ActionId))
	}
	return i, nil
}

func (m *Request_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n2, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Request_RegisterSupplier) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterSupplier != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterSupplier.Size()))
		n3, err := m.RegisterSupplier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Request_WarehouseEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WarehouseEntry != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.WarehouseEntry.Size()))
		n4, err := m.WarehouseEntry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Request_OpenInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OpenInvoice != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OpenInvoice.Size()))
		n5, err := m.OpenInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Request_CheckInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CheckInvoice != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CheckInvoice.Size()))
		n6, err := m.CheckInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Request_ChangePubkey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangePubkey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangePubkey.Size()))
		n7, err := m.ChangePubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Request_RegisterSupplierList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterSupplierList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterSupplierList.Size()))
		n8, err := m.RegisterSupplierList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Request_ResetPubkey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetPubkey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ResetPubkey.Size()))
		n9, err := m.ResetPubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Request_WarehouseEntryList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WarehouseEntryList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.WarehouseEntryList.Size()))
		n10, err := m.WarehouseEntryList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *RequestInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlatformKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlatformKey)))
		i += copy(dAtA[i:], m.PlatformKey)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *RequestRegisterSupplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterSupplier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPubkey)))
		i += copy(dAtA[i:], m.UserPubkey)
	}
	if m.Supplier != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Supplier.Size()))
		n11, err := m.Supplier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *RequestWarehouseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestWarehouseEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReceiveHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveHeader.Size()))
		n12, err := m.ReceiveHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *RequestWarehouseEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestWarehouseEntryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReceiveHeaderList) > 0 {
		for _, msg := range m.ReceiveHeaderList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestOpenInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestOpenInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InvoiceHeader.Size()))
		n13, err := m.InvoiceHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *RequestCheckInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCheckInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsInvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IsInvoiceId))
	}
	if m.IsPass {
		dAtA[i] = 0x10
		i++
		if m.IsPass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestChangePubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChangePubkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NewPubkey)))
		i += copy(dAtA[i:], m.NewPubkey)
	}
	return i, nil
}

func (m *RequestResetPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestResetPubkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NewPubkey)))
		i += copy(dAtA[i:], m.NewPubkey)
	}
	if m.VendorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VendorId))
	}
	return i, nil
}

func (m *RequestRegisterSupplierList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterSupplierList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SupplierList) > 0 {
		for _, msg := range m.SupplierList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn14, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	return i, nil
}

func (m *Response_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n15, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Response_RegisterSupplier) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterSupplier != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterSupplier.Size()))
		n16, err := m.RegisterSupplier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Response_WarehouseEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WarehouseEntry != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.WarehouseEntry.Size()))
		n17, err := m.WarehouseEntry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Response_OpenInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OpenInvoice != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OpenInvoice.Size()))
		n18, err := m.OpenInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Response_CheckInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CheckInvoice != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CheckInvoice.Size()))
		n19, err := m.CheckInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Response_ChangePubkey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangePubkey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangePubkey.Size()))
		n20, err := m.ChangePubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Response_RegisterSupplierList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterSupplierList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterSupplierList.Size()))
		n21, err := m.RegisterSupplierList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Response_ResetPubkey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetPubkey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ResetPubkey.Size()))
		n22, err := m.ResetPubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Response_WarehouseEntryList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WarehouseEntryList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.WarehouseEntryList.Size()))
		n23, err := m.WarehouseEntryList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Response_Ok) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ok != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ok.Size()))
		n24, err := m.Ok.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Response_Exception) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Exception != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Exception.Size()))
		n25, err := m.Exception.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *ResponseException) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseException) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ResponseOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseOK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOk {
		dAtA[i] = 0x8
		i++
		if m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func (m *ResponseInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n26, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *ResponseRegisterSupplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseRegisterSupplier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n27, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *ResponseWarehouseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseWarehouseEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n28, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *ResponseWarehouseEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseWarehouseEntryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n29, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ResponseOpenInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseOpenInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n30, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *ResponseCheckInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCheckInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n31, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ResponseChangePubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseChangePubkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n32, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *ResponseResetPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseResetPubkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n33, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ResponseRegisterSupplierList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseRegisterSupplierList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n34, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn35, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	return i, nil
}

func (m *Event_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n36, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *Event_RegisterSupplier) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterSupplier != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterSupplier.Size()))
		n37, err := m.RegisterSupplier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *Event_WarehouseEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WarehouseEntry != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.WarehouseEntry.Size()))
		n38, err := m.WarehouseEntry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *Event_OpenInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OpenInvoice != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OpenInvoice.Size()))
		n39, err := m.OpenInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *Event_CheckInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CheckInvoice != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CheckInvoice.Size()))
		n40, err := m.CheckInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *Event_ChangePubkey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ChangePubkey != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangePubkey.Size()))
		n41, err := m.ChangePubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *Event_RegisterSupplierList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterSupplierList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterSupplierList.Size()))
		n42, err := m.RegisterSupplierList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *Event_ResetPubkey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResetPubkey != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ResetPubkey.Size()))
		n43, err := m.ResetPubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *Event_WarehouseEntryList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WarehouseEntryList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.WarehouseEntryList.Size()))
		n44, err := m.WarehouseEntryList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *EventInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlatformKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlatformKey)))
		i += copy(dAtA[i:], m.PlatformKey)
	}
	return i, nil
}

func (m *EventRegisterSupplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRegisterSupplier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	return i, nil
}

func (m *EventWarehouseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWarehouseEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeaderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.HeaderId))
	}
	if len(m.Line) > 0 {
		dAtA46 := make([]byte, len(m.Line)*10)
		var j45 int
		for _, num1 := range m.Line {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j45))
		i += copy(dAtA[i:], dAtA46[:j45])
	}
	return i, nil
}

func (m *EventWarehouseEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWarehouseEntryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA48 := make([]byte, len(m.Ids)*10)
		var j47 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA48[j47] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j47++
			}
			dAtA48[j47] = uint8(num)
			j47++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j47))
		i += copy(dAtA[i:], dAtA48[:j47])
	}
	return i, nil
}

func (m *EventOpenInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOpenInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceHeader != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InvoiceHeader))
	}
	if len(m.Line) > 0 {
		dAtA50 := make([]byte, len(m.Line)*10)
		var j49 int
		for _, num1 := range m.Line {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j49))
		i += copy(dAtA[i:], dAtA50[:j49])
	}
	return i, nil
}

func (m *EventCheckInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCheckInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *EventChangePubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChangePubkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *EventResetPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResetPubkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *EventRegisterSupplierList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRegisterSupplierList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ReceiveHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RecHeaderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RecHeaderId))
	}
	if m.ShipmentHeaderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ShipmentHeaderId))
	}
	if len(m.ReceiptNum) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReceiptNum)))
		i += copy(dAtA[i:], m.ReceiptNum)
	}
	if m.ReceiveDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveDate))
	}
	if len(m.ReceivePerson) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReceivePerson)))
		i += copy(dAtA[i:], m.ReceivePerson)
	}
	if len(m.PurchansePerson) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PurchansePerson)))
		i += copy(dAtA[i:], m.PurchansePerson)
	}
	if m.OrganizationId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrganizationId))
	}
	if len(m.OrganizationCode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationCode)))
		i += copy(dAtA[i:], m.OrganizationCode)
	}
	if m.VendorId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VendorId))
	}
	if len(m.VendorCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorCode)))
		i += copy(dAtA[i:], m.VendorCode)
	}
	if len(m.VendorName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorName)))
		i += copy(dAtA[i:], m.VendorName)
	}
	if m.VendorSiteId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VendorSiteId))
	}
	if len(m.VendorSiteCode) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorSiteCode)))
		i += copy(dAtA[i:], m.VendorSiteCode)
	}
	if len(m.ReceiveLines) > 0 {
		for _, msg := range m.ReceiveLines {
			dAtA[i] = 0x72
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AttributeCategory) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AttributeCategory)))
		i += copy(dAtA[i:], m.AttributeCategory)
	}
	if len(m.Attribute1) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute1)))
		i += copy(dAtA[i:], m.Attribute1)
	}
	if len(m.Attribute2) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute2)))
		i += copy(dAtA[i:], m.Attribute2)
	}
	if len(m.Attribute3) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute3)))
		i += copy(dAtA[i:], m.Attribute3)
	}
	if len(m.Attribute4) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute4)))
		i += copy(dAtA[i:], m.Attribute4)
	}
	if len(m.Attribute5) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute5)))
		i += copy(dAtA[i:], m.Attribute5)
	}
	if len(m.Attribute6) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute6)))
		i += copy(dAtA[i:], m.Attribute6)
	}
	if len(m.Attribute7) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute7)))
		i += copy(dAtA[i:], m.Attribute7)
	}
	if len(m.Attribute8) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute8)))
		i += copy(dAtA[i:], m.Attribute8)
	}
	if len(m.Attribute9) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute9)))
		i += copy(dAtA[i:], m.Attribute9)
	}
	if len(m.Attribute10) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute10)))
		i += copy(dAtA[i:], m.Attribute10)
	}
	if len(m.Attribute11) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute11)))
		i += copy(dAtA[i:], m.Attribute11)
	}
	if len(m.Attribute12) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute12)))
		i += copy(dAtA[i:], m.Attribute12)
	}
	if len(m.Attribute13) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute13)))
		i += copy(dAtA[i:], m.Attribute13)
	}
	if len(m.Attribute14) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute14)))
		i += copy(dAtA[i:], m.Attribute14)
	}
	if len(m.Attribute15) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute15)))
		i += copy(dAtA[i:], m.Attribute15)
	}
	return i, nil
}

func (m *ReceiveLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveLine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RcvTranId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RcvTranId))
	}
	if m.ShipmentHeaderId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ShipmentHeaderId))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ItemId))
	}
	if len(m.ItemCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemCode)))
		i += copy(dAtA[i:], m.ItemCode)
	}
	if len(m.ItemDesc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemDesc)))
		i += copy(dAtA[i:], m.ItemDesc)
	}
	if len(m.PrimaryUnit) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PrimaryUnit)))
		i += copy(dAtA[i:], m.PrimaryUnit)
	}
	if m.PoHeaderId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoHeaderId))
	}
	if m.PoLineId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoLineId))
	}
	if len(m.PoNum) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PoNum)))
		i += copy(dAtA[i:], m.PoNum)
	}
	if len(m.LineNum) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LineNum)))
		i += copy(dAtA[i:], m.LineNum)
	}
	if len(m.CurrencyCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CurrencyCode)))
		i += copy(dAtA[i:], m.CurrencyCode)
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Quantity))
	}
	if m.PoUnitPrice != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoUnitPrice))
	}
	if m.PriceMatched != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PriceMatched))
	}
	if m.QuantityMatched != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.QuantityMatched))
	}
	if m.AmountMatched != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AmountMatched))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if len(m.RcvTranType) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RcvTranType)))
		i += copy(dAtA[i:], m.RcvTranType)
	}
	if m.RcvTranDate != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RcvTranDate))
	}
	if m.ReturnQuantity != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ReturnQuantity))
	}
	if m.TopTranId != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TopTranId))
	}
	if len(m.AttributeCategory) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AttributeCategory)))
		i += copy(dAtA[i:], m.AttributeCategory)
	}
	if len(m.Attribute1) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute1)))
		i += copy(dAtA[i:], m.Attribute1)
	}
	if len(m.Attribute2) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute2)))
		i += copy(dAtA[i:], m.Attribute2)
	}
	if len(m.Attribute3) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute3)))
		i += copy(dAtA[i:], m.Attribute3)
	}
	if len(m.Attribute4) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute4)))
		i += copy(dAtA[i:], m.Attribute4)
	}
	if len(m.Attribute5) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute5)))
		i += copy(dAtA[i:], m.Attribute5)
	}
	if len(m.Attribute6) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute6)))
		i += copy(dAtA[i:], m.Attribute6)
	}
	if len(m.Attribute7) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute7)))
		i += copy(dAtA[i:], m.Attribute7)
	}
	if len(m.Attribute8) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute8)))
		i += copy(dAtA[i:], m.Attribute8)
	}
	if len(m.Attribute9) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute9)))
		i += copy(dAtA[i:], m.Attribute9)
	}
	if len(m.Attribute10) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute10)))
		i += copy(dAtA[i:], m.Attribute10)
	}
	if len(m.Attribute11) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute11)))
		i += copy(dAtA[i:], m.Attribute11)
	}
	if len(m.Attribute12) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute12)))
		i += copy(dAtA[i:], m.Attribute12)
	}
	if len(m.Attribute13) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute13)))
		i += copy(dAtA[i:], m.Attribute13)
	}
	if len(m.Attribute14) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute14)))
		i += copy(dAtA[i:], m.Attribute14)
	}
	if len(m.Attribute15) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute15)))
		i += copy(dAtA[i:], m.Attribute15)
	}
	if m.CurrencyConversionRate != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CurrencyConversionRate))
	}
	if m.CurrencyConversionDate != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CurrencyConversionDate))
	}
	return i, nil
}

func (m *InvoiceHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IspInvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IspInvoiceId))
	}
	if len(m.IspInvoiceCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IspInvoiceCode)))
		i += copy(dAtA[i:], m.IspInvoiceCode)
	}
	if m.OrgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrgId))
	}
	if len(m.OrgName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgName)))
		i += copy(dAtA[i:], m.OrgName)
	}
	if len(m.SourceCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceCode)))
		i += copy(dAtA[i:], m.SourceCode)
	}
	if m.VendorId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VendorId))
	}
	if len(m.VendorCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorCode)))
		i += copy(dAtA[i:], m.VendorCode)
	}
	if len(m.VendorName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorName)))
		i += copy(dAtA[i:], m.VendorName)
	}
	if m.VendorSiteId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VendorSiteId))
	}
	if len(m.VendorSiteCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorSiteCode)))
		i += copy(dAtA[i:], m.VendorSiteCode)
	}
	if len(m.VendorSite) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorSite)))
		i += copy(dAtA[i:], m.VendorSite)
	}
	if m.TcmNoTaxAmount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TcmNoTaxAmount))
	}
	if m.TaxRate != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TaxRate))
	}
	if m.TaxAmount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TaxAmount))
	}
	if len(m.CurrencyCode) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CurrencyCode)))
		i += copy(dAtA[i:], m.CurrencyCode)
	}
	if m.CurrencyConversionRate != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CurrencyConversionRate))
	}
	if m.CurrencyConversionDate != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CurrencyConversionDate))
	}
	if len(m.Comments) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Comments)))
		i += copy(dAtA[i:], m.Comments)
	}
	if len(m.ApInvoiceNumber) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ApInvoiceNumber)))
		i += copy(dAtA[i:], m.ApInvoiceNumber)
	}
	if m.GlDate != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GlDate))
	}
	if len(m.InvoiceLine) > 0 {
		for _, msg := range m.InvoiceLine {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InvoiceState != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InvoiceState))
	}
	if len(m.CreatedBy) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreatedBy)))
		i += copy(dAtA[i:], m.CreatedBy)
	}
	if m.CreatedDate != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CreatedDate))
	}
	if len(m.InvoiceStatus) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.InvoiceStatus)))
		i += copy(dAtA[i:], m.InvoiceStatus)
	}
	if len(m.AttributeCategory) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AttributeCategory)))
		i += copy(dAtA[i:], m.AttributeCategory)
	}
	if len(m.Attribute1) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute1)))
		i += copy(dAtA[i:], m.Attribute1)
	}
	if len(m.Attribute2) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute2)))
		i += copy(dAtA[i:], m.Attribute2)
	}
	if len(m.Attribute3) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute3)))
		i += copy(dAtA[i:], m.Attribute3)
	}
	if len(m.Attribute4) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute4)))
		i += copy(dAtA[i:], m.Attribute4)
	}
	if len(m.Attribute5) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute5)))
		i += copy(dAtA[i:], m.Attribute5)
	}
	if len(m.Attribute6) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute6)))
		i += copy(dAtA[i:], m.Attribute6)
	}
	if len(m.Attribute7) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute7)))
		i += copy(dAtA[i:], m.Attribute7)
	}
	if len(m.Attribute8) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute8)))
		i += copy(dAtA[i:], m.Attribute8)
	}
	if len(m.Attribute9) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute9)))
		i += copy(dAtA[i:], m.Attribute9)
	}
	if len(m.Attribute10) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute10)))
		i += copy(dAtA[i:], m.Attribute10)
	}
	if len(m.Attribute11) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute11)))
		i += copy(dAtA[i:], m.Attribute11)
	}
	if len(m.Attribute12) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute12)))
		i += copy(dAtA[i:], m.Attribute12)
	}
	if len(m.Attribute13) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute13)))
		i += copy(dAtA[i:], m.Attribute13)
	}
	if len(m.Attribute14) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute14)))
		i += copy(dAtA[i:], m.Attribute14)
	}
	if len(m.Attribute15) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute15)))
		i += copy(dAtA[i:], m.Attribute15)
	}
	return i, nil
}

func (m *InvoiceLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceLine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IspInvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IspInvoiceId))
	}
	if m.IspInvoiceLineId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IspInvoiceLineId))
	}
	if m.IspTranId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IspTranId))
	}
	if m.OrganizationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrganizationId))
	}
	if len(m.OrganizationCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationCode)))
		i += copy(dAtA[i:], m.OrganizationCode)
	}
	if m.LineNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LineNum))
	}
	if m.InventoryItemId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InventoryItemId))
	}
	if len(m.ItemCode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemCode)))
		i += copy(dAtA[i:], m.ItemCode)
	}
	if len(m.ItemDesc) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemDesc)))
		i += copy(dAtA[i:], m.ItemDesc)
	}
	if len(m.ItemUom) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemUom)))
		i += copy(dAtA[i:], m.ItemUom)
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Quantity))
	}
	if m.Price != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Price))
	}
	if len(m.ShareFlag) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareFlag)))
		i += copy(dAtA[i:], m.ShareFlag)
	}
	if len(m.LineType) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LineType)))
		i += copy(dAtA[i:], m.LineType)
	}
	if m.PenaltyId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PenaltyId))
	}
	if m.OverduePenaltyRate != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverduePenaltyRate))
	}
	if m.LineAmount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LineAmount))
	}
	if m.PoPrice != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoPrice))
	}
	if len(m.AttributeCategory) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AttributeCategory)))
		i += copy(dAtA[i:], m.AttributeCategory)
	}
	if len(m.Attribute1) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute1)))
		i += copy(dAtA[i:], m.Attribute1)
	}
	if len(m.Attribute2) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute2)))
		i += copy(dAtA[i:], m.Attribute2)
	}
	if len(m.Attribute3) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute3)))
		i += copy(dAtA[i:], m.Attribute3)
	}
	if len(m.Attribute4) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute4)))
		i += copy(dAtA[i:], m.Attribute4)
	}
	if len(m.Attribute5) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute5)))
		i += copy(dAtA[i:], m.Attribute5)
	}
	if len(m.Attribute6) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute6)))
		i += copy(dAtA[i:], m.Attribute6)
	}
	if len(m.Attribute7) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute7)))
		i += copy(dAtA[i:], m.Attribute7)
	}
	if len(m.Attribute8) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute8)))
		i += copy(dAtA[i:], m.Attribute8)
	}
	if len(m.Attribute9) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute9)))
		i += copy(dAtA[i:], m.Attribute9)
	}
	if len(m.Attribute10) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute10)))
		i += copy(dAtA[i:], m.Attribute10)
	}
	if len(m.Attribute11) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute11)))
		i += copy(dAtA[i:], m.Attribute11)
	}
	if len(m.Attribute12) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute12)))
		i += copy(dAtA[i:], m.Attribute12)
	}
	if len(m.Attribute13) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute13)))
		i += copy(dAtA[i:], m.Attribute13)
	}
	if len(m.Attribute14) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute14)))
		i += copy(dAtA[i:], m.Attribute14)
	}
	if len(m.Attribute15) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute15)))
		i += copy(dAtA[i:], m.Attribute15)
	}
	return i, nil
}

func (m *UnInvoiceLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnInvoiceLine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VendorCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorCode)))
		i += copy(dAtA[i:], m.VendorCode)
	}
	if len(m.VendorName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorName)))
		i += copy(dAtA[i:], m.VendorName)
	}
	if len(m.VendorSiteCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorSiteCode)))
		i += copy(dAtA[i:], m.VendorSiteCode)
	}
	if len(m.PoNum) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PoNum)))
		i += copy(dAtA[i:], m.PoNum)
	}
	if len(m.ReceiptNum) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReceiptNum)))
		i += copy(dAtA[i:], m.ReceiptNum)
	}
	if m.ReceiveDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveDate))
	}
	if len(m.ItemCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemCode)))
		i += copy(dAtA[i:], m.ItemCode)
	}
	if len(m.ItemDesc) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemDesc)))
		i += copy(dAtA[i:], m.ItemDesc)
	}
	if len(m.PrimayUnit) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PrimayUnit)))
		i += copy(dAtA[i:], m.PrimayUnit)
	}
	if m.QuantityReceived != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.QuantityReceived))
	}
	if m.QuantityMatched != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.QuantityMatched))
	}
	if m.PoUnitPrice != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoUnitPrice))
	}
	if m.RightAmount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RightAmount))
	}
	if len(m.CurrencyCode) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CurrencyCode)))
		i += copy(dAtA[i:], m.CurrencyCode)
	}
	if len(m.OrginalCode) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrginalCode)))
		i += copy(dAtA[i:], m.OrginalCode)
	}
	if m.OrganizationId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrganizationId))
	}
	if m.TranId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TranId))
	}
	if m.QuantityUnmatched != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.QuantityUnmatched))
	}
	if m.CurrencyAmount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CurrencyAmount))
	}
	if m.OrginalAmount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrginalAmount))
	}
	return i, nil
}

func (m *Platform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Platform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *Supplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supplier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPubkey)))
		i += copy(dAtA[i:], m.UserPubkey)
	}
	if m.VendorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VendorId))
	}
	if len(m.VendorCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorCode)))
		i += copy(dAtA[i:], m.VendorCode)
	}
	if len(m.VendorName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.VendorName)))
		i += copy(dAtA[i:], m.VendorName)
	}
	if len(m.SupplierSite) > 0 {
		for _, msg := range m.SupplierSite {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RcvHeaders) > 0 {
		for _, msg := range m.RcvHeaders {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InvHeaders) > 0 {
		for _, msg := range m.InvHeaders {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UninvLines) > 0 {
		for _, msg := range m.UninvLines {
			dAtA[i] = 0x42
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Unlinenum != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Unlinenum))
	}
	if m.Unlineamount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Unlineamount))
	}
	if len(m.Rcvlines) > 0 {
		dAtA52 := make([]byte, len(m.Rcvlines)*10)
		var j51 int
		for _, num1 := range m.Rcvlines {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(j51))
		i += copy(dAtA[i:], dAtA52[:j51])
	}
	return i, nil
}

func (m *SupplierSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplierSite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SiteId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SiteId))
	}
	if len(m.SiteCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SiteCode)))
		i += copy(dAtA[i:], m.SiteCode)
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ActionId != 0 {
		n += 1 + sovApi(uint64(m.ActionId))
	}
	return n
}

func (m *Request_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_RegisterSupplier) Size() (n int) {
	var l int
	_ = l
	if m.RegisterSupplier != nil {
		l = m.RegisterSupplier.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_WarehouseEntry) Size() (n int) {
	var l int
	_ = l
	if m.WarehouseEntry != nil {
		l = m.WarehouseEntry.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_OpenInvoice) Size() (n int) {
	var l int
	_ = l
	if m.OpenInvoice != nil {
		l = m.OpenInvoice.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_CheckInvoice) Size() (n int) {
	var l int
	_ = l
	if m.CheckInvoice != nil {
		l = m.CheckInvoice.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ChangePubkey) Size() (n int) {
	var l int
	_ = l
	if m.ChangePubkey != nil {
		l = m.ChangePubkey.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_RegisterSupplierList) Size() (n int) {
	var l int
	_ = l
	if m.RegisterSupplierList != nil {
		l = m.RegisterSupplierList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ResetPubkey) Size() (n int) {
	var l int
	_ = l
	if m.ResetPubkey != nil {
		l = m.ResetPubkey.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_WarehouseEntryList) Size() (n int) {
	var l int
	_ = l
	if m.WarehouseEntryList != nil {
		l = m.WarehouseEntryList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RequestInitPlatform) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlatformKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestRegisterSupplier) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Supplier != nil {
		l = m.Supplier.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestWarehouseEntry) Size() (n int) {
	var l int
	_ = l
	if m.ReceiveHeader != nil {
		l = m.ReceiveHeader.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestWarehouseEntryList) Size() (n int) {
	var l int
	_ = l
	if len(m.ReceiveHeaderList) > 0 {
		for _, e := range m.ReceiveHeaderList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestOpenInvoice) Size() (n int) {
	var l int
	_ = l
	if m.InvoiceHeader != nil {
		l = m.InvoiceHeader.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestCheckInvoice) Size() (n int) {
	var l int
	_ = l
	if m.IsInvoiceId != 0 {
		n += 1 + sovApi(uint64(m.IsInvoiceId))
	}
	if m.IsPass {
		n += 2
	}
	return n
}

func (m *RequestChangePubkey) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestResetPubkey) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VendorId != 0 {
		n += 1 + sovApi(uint64(m.VendorId))
	}
	return n
}

func (m *RequestRegisterSupplierList) Size() (n int) {
	var l int
	_ = l
	if len(m.SupplierList) > 0 {
		for _, e := range m.SupplierList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Response_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_RegisterSupplier) Size() (n int) {
	var l int
	_ = l
	if m.RegisterSupplier != nil {
		l = m.RegisterSupplier.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_WarehouseEntry) Size() (n int) {
	var l int
	_ = l
	if m.WarehouseEntry != nil {
		l = m.WarehouseEntry.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_OpenInvoice) Size() (n int) {
	var l int
	_ = l
	if m.OpenInvoice != nil {
		l = m.OpenInvoice.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_CheckInvoice) Size() (n int) {
	var l int
	_ = l
	if m.CheckInvoice != nil {
		l = m.CheckInvoice.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ChangePubkey) Size() (n int) {
	var l int
	_ = l
	if m.ChangePubkey != nil {
		l = m.ChangePubkey.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_RegisterSupplierList) Size() (n int) {
	var l int
	_ = l
	if m.RegisterSupplierList != nil {
		l = m.RegisterSupplierList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ResetPubkey) Size() (n int) {
	var l int
	_ = l
	if m.ResetPubkey != nil {
		l = m.ResetPubkey.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_WarehouseEntryList) Size() (n int) {
	var l int
	_ = l
	if m.WarehouseEntryList != nil {
		l = m.WarehouseEntryList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_Ok) Size() (n int) {
	var l int
	_ = l
	if m.Ok != nil {
		l = m.Ok.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_Exception) Size() (n int) {
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ResponseException) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseOK) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *Receipt) Size() (n int) {
	var l int
	_ = l
	if m.IsOk {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseInitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseRegisterSupplier) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseWarehouseEntry) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseWarehouseEntryList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseOpenInvoice) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseCheckInvoice) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseChangePubkey) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseResetPubkey) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseRegisterSupplierList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Event_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_RegisterSupplier) Size() (n int) {
	var l int
	_ = l
	if m.RegisterSupplier != nil {
		l = m.RegisterSupplier.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_WarehouseEntry) Size() (n int) {
	var l int
	_ = l
	if m.WarehouseEntry != nil {
		l = m.WarehouseEntry.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_OpenInvoice) Size() (n int) {
	var l int
	_ = l
	if m.OpenInvoice != nil {
		l = m.OpenInvoice.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_CheckInvoice) Size() (n int) {
	var l int
	_ = l
	if m.CheckInvoice != nil {
		l = m.CheckInvoice.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_ChangePubkey) Size() (n int) {
	var l int
	_ = l
	if m.ChangePubkey != nil {
		l = m.ChangePubkey.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_RegisterSupplierList) Size() (n int) {
	var l int
	_ = l
	if m.RegisterSupplierList != nil {
		l = m.RegisterSupplierList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_ResetPubkey) Size() (n int) {
	var l int
	_ = l
	if m.ResetPubkey != nil {
		l = m.ResetPubkey.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_WarehouseEntryList) Size() (n int) {
	var l int
	_ = l
	if m.WarehouseEntryList != nil {
		l = m.WarehouseEntryList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *EventInitPlatform) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlatformKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventRegisterSupplier) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventWarehouseEntry) Size() (n int) {
	var l int
	_ = l
	if m.HeaderId != 0 {
		n += 1 + sovApi(uint64(m.HeaderId))
	}
	if len(m.Line) > 0 {
		l = 0
		for _, e := range m.Line {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *EventWarehouseEntryList) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *EventOpenInvoice) Size() (n int) {
	var l int
	_ = l
	if m.InvoiceHeader != 0 {
		n += 1 + sovApi(uint64(m.InvoiceHeader))
	}
	if len(m.Line) > 0 {
		l = 0
		for _, e := range m.Line {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *EventCheckInvoice) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *EventChangePubkey) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *EventResetPubkey) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *EventRegisterSupplierList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ReceiveHeader) Size() (n int) {
	var l int
	_ = l
	if m.RecHeaderId != 0 {
		n += 1 + sovApi(uint64(m.RecHeaderId))
	}
	if m.ShipmentHeaderId != 0 {
		n += 1 + sovApi(uint64(m.ShipmentHeaderId))
	}
	l = len(m.ReceiptNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReceiveDate != 0 {
		n += 1 + sovApi(uint64(m.ReceiveDate))
	}
	l = len(m.ReceivePerson)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PurchansePerson)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OrganizationId != 0 {
		n += 1 + sovApi(uint64(m.OrganizationId))
	}
	l = len(m.OrganizationCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VendorId != 0 {
		n += 1 + sovApi(uint64(m.VendorId))
	}
	l = len(m.VendorCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VendorName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VendorSiteId != 0 {
		n += 1 + sovApi(uint64(m.VendorSiteId))
	}
	l = len(m.VendorSiteCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ReceiveLines) > 0 {
		for _, e := range m.ReceiveLines {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.AttributeCategory)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute3)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute4)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute5)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute6)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute7)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute8)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute9)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute10)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute11)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute12)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute13)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute14)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute15)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ReceiveLine) Size() (n int) {
	var l int
	_ = l
	if m.RcvTranId != 0 {
		n += 1 + sovApi(uint64(m.RcvTranId))
	}
	if m.ShipmentHeaderId != 0 {
		n += 1 + sovApi(uint64(m.ShipmentHeaderId))
	}
	if m.ItemId != 0 {
		n += 1 + sovApi(uint64(m.ItemId))
	}
	l = len(m.ItemCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ItemDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PrimaryUnit)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PoHeaderId != 0 {
		n += 1 + sovApi(uint64(m.PoHeaderId))
	}
	if m.PoLineId != 0 {
		n += 1 + sovApi(uint64(m.PoLineId))
	}
	l = len(m.PoNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LineNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CurrencyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovApi(uint64(m.Quantity))
	}
	if m.PoUnitPrice != 0 {
		n += 1 + sovApi(uint64(m.PoUnitPrice))
	}
	if m.PriceMatched != 0 {
		n += 1 + sovApi(uint64(m.PriceMatched))
	}
	if m.QuantityMatched != 0 {
		n += 1 + sovApi(uint64(m.QuantityMatched))
	}
	if m.AmountMatched != 0 {
		n += 2 + sovApi(uint64(m.AmountMatched))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.RcvTranType)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.RcvTranDate != 0 {
		n += 2 + sovApi(uint64(m.RcvTranDate))
	}
	if m.ReturnQuantity != 0 {
		n += 2 + sovApi(uint64(m.ReturnQuantity))
	}
	if m.TopTranId != 0 {
		n += 2 + sovApi(uint64(m.TopTranId))
	}
	l = len(m.AttributeCategory)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute3)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute4)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute5)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute6)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute7)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute8)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute9)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute10)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute11)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute12)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute13)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute14)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute15)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CurrencyConversionRate != 0 {
		n += 2 + sovApi(uint64(m.CurrencyConversionRate))
	}
	if m.CurrencyConversionDate != 0 {
		n += 2 + sovApi(uint64(m.CurrencyConversionDate))
	}
	return n
}

func (m *InvoiceHeader) Size() (n int) {
	var l int
	_ = l
	if m.IspInvoiceId != 0 {
		n += 1 + sovApi(uint64(m.IspInvoiceId))
	}
	l = len(m.IspInvoiceCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OrgId != 0 {
		n += 1 + sovApi(uint64(m.OrgId))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VendorId != 0 {
		n += 1 + sovApi(uint64(m.VendorId))
	}
	l = len(m.VendorCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VendorName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VendorSiteId != 0 {
		n += 1 + sovApi(uint64(m.VendorSiteId))
	}
	l = len(m.VendorSiteCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VendorSite)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TcmNoTaxAmount != 0 {
		n += 1 + sovApi(uint64(m.TcmNoTaxAmount))
	}
	if m.TaxRate != 0 {
		n += 1 + sovApi(uint64(m.TaxRate))
	}
	if m.TaxAmount != 0 {
		n += 1 + sovApi(uint64(m.TaxAmount))
	}
	l = len(m.CurrencyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CurrencyConversionRate != 0 {
		n += 2 + sovApi(uint64(m.CurrencyConversionRate))
	}
	if m.CurrencyConversionDate != 0 {
		n += 2 + sovApi(uint64(m.CurrencyConversionDate))
	}
	l = len(m.Comments)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ApInvoiceNumber)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.GlDate != 0 {
		n += 2 + sovApi(uint64(m.GlDate))
	}
	if len(m.InvoiceLine) > 0 {
		for _, e := range m.InvoiceLine {
			l = e.Size()
			n += 2 + l + sovApi(uint64(l))
		}
	}
	if m.InvoiceState != 0 {
		n += 2 + sovApi(uint64(m.InvoiceState))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CreatedDate != 0 {
		n += 2 + sovApi(uint64(m.CreatedDate))
	}
	l = len(m.InvoiceStatus)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.AttributeCategory)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute3)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute4)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute5)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute6)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute7)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute8)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute9)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute10)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute11)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute12)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute13)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute14)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute15)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}

func (m *InvoiceLine) Size() (n int) {
	var l int
	_ = l
	if m.IspInvoiceId != 0 {
		n += 1 + sovApi(uint64(m.IspInvoiceId))
	}
	if m.IspInvoiceLineId != 0 {
		n += 1 + sovApi(uint64(m.IspInvoiceLineId))
	}
	if m.IspTranId != 0 {
		n += 1 + sovApi(uint64(m.IspTranId))
	}
	if m.OrganizationId != 0 {
		n += 1 + sovApi(uint64(m.OrganizationId))
	}
	l = len(m.OrganizationCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LineNum != 0 {
		n += 1 + sovApi(uint64(m.LineNum))
	}
	if m.InventoryItemId != 0 {
		n += 1 + sovApi(uint64(m.InventoryItemId))
	}
	l = len(m.ItemCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ItemDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ItemUom)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovApi(uint64(m.Quantity))
	}
	if m.Price != 0 {
		n += 1 + sovApi(uint64(m.Price))
	}
	l = len(m.ShareFlag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LineType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PenaltyId != 0 {
		n += 1 + sovApi(uint64(m.PenaltyId))
	}
	if m.OverduePenaltyRate != 0 {
		n += 2 + sovApi(uint64(m.OverduePenaltyRate))
	}
	if m.LineAmount != 0 {
		n += 2 + sovApi(uint64(m.LineAmount))
	}
	if m.PoPrice != 0 {
		n += 2 + sovApi(uint64(m.PoPrice))
	}
	l = len(m.AttributeCategory)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute3)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute4)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute5)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute6)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute7)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute8)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute9)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute10)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute11)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute12)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute13)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute14)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute15)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UnInvoiceLine) Size() (n int) {
	var l int
	_ = l
	l = len(m.VendorCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VendorName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VendorSiteCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PoNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ReceiptNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReceiveDate != 0 {
		n += 1 + sovApi(uint64(m.ReceiveDate))
	}
	l = len(m.ItemCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ItemDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PrimayUnit)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.QuantityReceived != 0 {
		n += 1 + sovApi(uint64(m.QuantityReceived))
	}
	if m.QuantityMatched != 0 {
		n += 1 + sovApi(uint64(m.QuantityMatched))
	}
	if m.PoUnitPrice != 0 {
		n += 1 + sovApi(uint64(m.PoUnitPrice))
	}
	if m.RightAmount != 0 {
		n += 1 + sovApi(uint64(m.RightAmount))
	}
	l = len(m.CurrencyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrginalCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OrganizationId != 0 {
		n += 2 + sovApi(uint64(m.OrganizationId))
	}
	if m.TranId != 0 {
		n += 2 + sovApi(uint64(m.TranId))
	}
	if m.QuantityUnmatched != 0 {
		n += 2 + sovApi(uint64(m.QuantityUnmatched))
	}
	if m.CurrencyAmount != 0 {
		n += 2 + sovApi(uint64(m.CurrencyAmount))
	}
	if m.OrginalAmount != 0 {
		n += 2 + sovApi(uint64(m.OrginalAmount))
	}
	return n
}

func (m *Platform) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Supplier) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VendorId != 0 {
		n += 1 + sovApi(uint64(m.VendorId))
	}
	l = len(m.VendorCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VendorName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.SupplierSite) > 0 {
		for _, e := range m.SupplierSite {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.RcvHeaders) > 0 {
		for _, e := range m.RcvHeaders {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.InvHeaders) > 0 {
		for _, e := range m.InvHeaders {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.UninvLines) > 0 {
		for _, e := range m.UninvLines {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Unlinenum != 0 {
		n += 1 + sovApi(uint64(m.Unlinenum))
	}
	if m.Unlineamount != 0 {
		n += 1 + sovApi(uint64(m.Unlineamount))
	}
	if len(m.Rcvlines) > 0 {
		l = 0
		for _, e := range m.Rcvlines {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *SupplierSite) Size() (n int) {
	var l int
	_ = l
	if m.SiteId != 0 {
		n += 1 + sovApi(uint64(m.SiteId))
	}
	l = len(m.SiteCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestRegisterSupplier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_RegisterSupplier{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarehouseEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestWarehouseEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_WarehouseEntry{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestOpenInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_OpenInvoice{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCheckInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_CheckInvoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestChangePubkey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ChangePubkey{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSupplierList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestRegisterSupplierList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_RegisterSupplierList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestResetPubkey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ResetPubkey{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarehouseEntryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestWarehouseEntryList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_WarehouseEntryList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformKey = append(m.PlatformKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatformKey == nil {
				m.PlatformKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterSupplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterSupplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterSupplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPubkey = append(m.UserPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPubkey == nil {
				m.UserPubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supplier == nil {
				m.Supplier = &Supplier{}
			}
			if err := m.Supplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestWarehouseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestWarehouseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestWarehouseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceiveHeader == nil {
				m.ReceiveHeader = &ReceiveHeader{}
			}
			if err := m.ReceiveHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestWarehouseEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestWarehouseEntryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestWarehouseEntryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveHeaderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveHeaderList = append(m.ReceiveHeaderList, &ReceiveHeader{})
			if err := m.ReceiveHeaderList[len(m.ReceiveHeaderList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestOpenInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestOpenInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestOpenInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvoiceHeader == nil {
				m.InvoiceHeader = &InvoiceHeader{}
			}
			if err := m.InvoiceHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCheckInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCheckInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCheckInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInvoiceId", wireType)
			}
			m.IsInvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsInvoiceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPass = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChangePubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChangePubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChangePubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPubkey = append(m.NewPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewPubkey == nil {
				m.NewPubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestResetPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestResetPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestResetPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPubkey = append(m.NewPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewPubkey == nil {
				m.NewPubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			m.VendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterSupplierList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterSupplierList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterSupplierList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierList = append(m.SupplierList, &Supplier{})
			if err := m.SupplierList[len(m.SupplierList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseRegisterSupplier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_RegisterSupplier{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarehouseEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseWarehouseEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_WarehouseEntry{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseOpenInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_OpenInvoice{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseCheckInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_CheckInvoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseChangePubkey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ChangePubkey{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSupplierList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseRegisterSupplierList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_RegisterSupplierList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseResetPubkey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ResetPubkey{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarehouseEntryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseWarehouseEntryList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_WarehouseEntryList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseOK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_Ok{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseException{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_Exception{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseException) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseException: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseException: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOk = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = append(m.Err[:0], dAtA[iNdEx:postIndex]...)
			if m.Err == nil {
				m.Err = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseRegisterSupplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseRegisterSupplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseRegisterSupplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseWarehouseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseWarehouseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseWarehouseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseWarehouseEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseWarehouseEntryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseWarehouseEntryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOpenInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseOpenInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseOpenInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCheckInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCheckInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCheckInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseChangePubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseChangePubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseChangePubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseResetPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseResetPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseResetPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseRegisterSupplierList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseRegisterSupplierList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseRegisterSupplierList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventRegisterSupplier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_RegisterSupplier{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarehouseEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventWarehouseEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_WarehouseEntry{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventOpenInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_OpenInvoice{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventCheckInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_CheckInvoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventChangePubkey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_ChangePubkey{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterSupplierList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventRegisterSupplierList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_RegisterSupplierList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventResetPubkey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_ResetPubkey{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarehouseEntryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventWarehouseEntryList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_WarehouseEntryList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformKey = append(m.PlatformKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatformKey == nil {
				m.PlatformKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRegisterSupplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRegisterSupplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRegisterSupplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWarehouseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWarehouseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWarehouseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderId", wireType)
			}
			m.HeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Line = append(m.Line, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Line = append(m.Line, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWarehouseEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWarehouseEntryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWarehouseEntryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOpenInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOpenInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOpenInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceHeader", wireType)
			}
			m.InvoiceHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceHeader |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Line = append(m.Line, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Line = append(m.Line, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCheckInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCheckInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCheckInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChangePubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChangePubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChangePubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventResetPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResetPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResetPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRegisterSupplierList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRegisterSupplierList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRegisterSupplierList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecHeaderId", wireType)
			}
			m.RecHeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecHeaderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipmentHeaderId", wireType)
			}
			m.ShipmentHeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipmentHeaderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveDate", wireType)
			}
			m.ReceiveDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePerson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivePerson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchansePerson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchansePerson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			m.OrganizationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			m.VendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorSiteId", wireType)
			}
			m.VendorSiteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorSiteId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorSiteCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorSiteCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveLines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveLines = append(m.ReceiveLines, &ReceiveLine{})
			if err := m.ReceiveLines[len(m.ReceiveLines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute7 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute8", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute8 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute9", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute9 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute10", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute10 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute11", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute11 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute12", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute12 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute13", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute13 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute14 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute15", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute15 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvTranId", wireType)
			}
			m.RcvTranId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvTranId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipmentHeaderId", wireType)
			}
			m.ShipmentHeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipmentHeaderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoHeaderId", wireType)
			}
			m.PoHeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoHeaderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoLineId", wireType)
			}
			m.PoLineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoLineId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoUnitPrice", wireType)
			}
			m.PoUnitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoUnitPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMatched", wireType)
			}
			m.PriceMatched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceMatched |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuantityMatched", wireType)
			}
			m.QuantityMatched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuantityMatched |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountMatched", wireType)
			}
			m.AmountMatched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountMatched |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvTranType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcvTranType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvTranDate", wireType)
			}
			m.RcvTranDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvTranDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnQuantity", wireType)
			}
			m.ReturnQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnQuantity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopTranId", wireType)
			}
			m.TopTranId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopTranId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute7 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute8", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute8 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute9", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute9 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute10", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute10 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute11", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute11 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute12", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute12 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute13", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute13 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute14 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute15", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute15 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyConversionRate", wireType)
			}
			m.CurrencyConversionRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyConversionRate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyConversionDate", wireType)
			}
			m.CurrencyConversionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyConversionDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IspInvoiceId", wireType)
			}
			m.IspInvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IspInvoiceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IspInvoiceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IspInvoiceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			m.OrgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			m.VendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorSiteId", wireType)
			}
			m.VendorSiteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorSiteId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorSiteCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorSiteCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorSite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorSite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcmNoTaxAmount", wireType)
			}
			m.TcmNoTaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcmNoTaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			m.TaxRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaxRate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxAmount", wireType)
			}
			m.TaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyConversionRate", wireType)
			}
			m.CurrencyConversionRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyConversionRate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyConversionDate", wireType)
			}
			m.CurrencyConversionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyConversionDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApInvoiceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApInvoiceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlDate", wireType)
			}
			m.GlDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceLine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceLine = append(m.InvoiceLine, &InvoiceLine{})
			if err := m.InvoiceLine[len(m.InvoiceLine)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceState", wireType)
			}
			m.InvoiceState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceState |= (InvoiceState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			m.CreatedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute7 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute8", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute8 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute9", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute9 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute10", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute10 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute11", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute11 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute12", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute12 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute13", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute13 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute14 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute15", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute15 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IspInvoiceId", wireType)
			}
			m.IspInvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IspInvoiceId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IspInvoiceLineId", wireType)
			}
			m.IspInvoiceLineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IspInvoiceLineId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IspTranId", wireType)
			}
			m.IspTranId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IspTranId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			m.OrganizationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNum", wireType)
			}
			m.LineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryItemId", wireType)
			}
			m.InventoryItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InventoryItemId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemUom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemUom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyId", wireType)
			}
			m.PenaltyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverduePenaltyRate", wireType)
			}
			m.OverduePenaltyRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverduePenaltyRate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineAmount", wireType)
			}
			m.LineAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoPrice", wireType)
			}
			m.PoPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute7 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute8", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute8 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute9", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute9 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute10", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute10 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute11", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute11 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute12", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute12 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute13", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute13 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute14 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute15", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute15 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnInvoiceLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnInvoiceLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnInvoiceLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorSiteCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorSiteCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveDate", wireType)
			}
			m.ReceiveDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimayUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimayUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuantityReceived", wireType)
			}
			m.QuantityReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuantityReceived |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuantityMatched", wireType)
			}
			m.QuantityMatched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuantityMatched |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoUnitPrice", wireType)
			}
			m.PoUnitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoUnitPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightAmount", wireType)
			}
			m.RightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrginalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrginalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			m.OrganizationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranId", wireType)
			}
			m.TranId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TranId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuantityUnmatched", wireType)
			}
			m.QuantityUnmatched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuantityUnmatched |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyAmount", wireType)
			}
			m.CurrencyAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrginalAmount", wireType)
			}
			m.OrginalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrginalAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Platform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Platform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Platform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPubkey = append(m.UserPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPubkey == nil {
				m.UserPubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			m.VendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierSite = append(m.SupplierSite, &SupplierSite{})
			if err := m.SupplierSite[len(m.SupplierSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcvHeaders = append(m.RcvHeaders, &ReceiveHeader{})
			if err := m.RcvHeaders[len(m.RcvHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvHeaders = append(m.InvHeaders, &InvoiceHeader{})
			if err := m.InvHeaders[len(m.InvHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UninvLines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UninvLines = append(m.UninvLines, &UnInvoiceLine{})
			if err := m.UninvLines[len(m.UninvLines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlinenum", wireType)
			}
			m.Unlinenum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unlinenum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlineamount", wireType)
			}
			m.Unlineamount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unlineamount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rcvlines = append(m.Rcvlines, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rcvlines = append(m.Rcvlines, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcvlines", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplierSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplierSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplierSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteId", wireType)
			}
			m.SiteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 2849 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x5a, 0xdd, 0x72, 0xdb, 0xc6,
	0xf5, 0x17, 0x45, 0x7d, 0x90, 0x4b, 0x4a, 0x82, 0x56, 0x96, 0x04, 0xc9, 0xb2, 0x4c, 0x23, 0x8e,
	0x23, 0xfb, 0xff, 0x1f, 0xa7, 0x96, 0x3f, 0x12, 0x67, 0x9a, 0x4e, 0x6d, 0x49, 0x89, 0x18, 0x5b,
	0x8e, 0x0a, 0xd9, 0x69, 0x32, 0xd3, 0xa9, 0x07, 0x26, 0x37, 0x14, 0x6a, 0x11, 0x60, 0x16, 0x20,
	0x13, 0xf6, 0x49, 0xfa, 0x00, 0x7d, 0x87, 0xde, 0xf4, 0xa2, 0x33, 0x9d, 0xcc, 0xf4, 0xb2, 0x77,
	0xbd, 0xed, 0xb8, 0x77, 0xbd, 0xed, 0x0b, 0x74, 0xce, 0xee, 0x02, 0xd8, 0x05, 0x96, 0x58, 0xba,
	0xe3, 0xdc, 0xe1, 0x9c, 0x3d, 0x7b, 0xf6, 0xf3, 0xfc, 0x7e, 0xe7, 0x00, 0x40, 0x75, 0x6f, 0xe0,
	0xdf, 0x1e, 0xd0, 0x30, 0x0e, 0x71, 0xa3, 0xef, 0x77, 0x89, 0x77, 0x36, 0x1c, 0x0c, 0x2e, 0xc6,
	0xce, 0xbf, 0x17, 0xd0, 0xa2, 0x4b, 0xbe, 0x1b, 0x92, 0x28, 0xc6, 0x9f, 0xa1, 0xa6, 0x1f, 0xf8,
	0xf1, 0xe9, 0x85, 0x17, 0x7f, 0x1b, 0xd2, 0xbe, 0x5d, 0x69, 0x55, 0xf6, 0x1a, 0xfb, 0xad, 0xdb,
	0x92, 0xfd, 0x6d, 0x61, 0xdb, 0x96, 0xec, 0x8e, 0x67, 0x5c, 0xa5, 0x1f, 0x76, 0x91, 0x45, 0x49,
	0xcf, 0x8f, 0x62, 0x42, 0x59, 0x2f, 0x9f, 0x50, 0x7b, 0x96, 0xf9, 0xba, 0xae, 0xf3, 0xe5, 0xe6,
	0x6c, 0x8f, 0x67, 0xdc, 0x42, 0x7f, 0xfc, 0x14, 0x2d, 0x7f, 0xef, 0x51, 0x72, 0x1e, 0x0e, 0x23,
	0x72, 0x14, 0xc4, 0x74, 0x6c, 0x57, 0x99, 0x47, 0x47, 0xe7, 0xf1, 0xd7, 0x8a, 0xe5, 0xf1, 0x8c,
	0x9b, 0xeb, 0x8b, 0x0f, 0x50, 0x23, 0x1c, 0x90, 0xa0, 0x1d, 0x8c, 0x42, 0xbf, 0x43, 0xec, 0x39,
	0xe6, 0xea, 0xaa, 0xce, 0xd5, 0x97, 0x99, 0xd9, 0xf1, 0x8c, 0x2b, 0xf7, 0x82, 0xed, 0xea, 0x9c,
	0x93, 0xce, 0xeb, 0xc4, 0xcb, 0xfc, 0xe4, 0xed, 0x3a, 0x90, 0xec, 0x60, 0xbb, 0xe4, 0x7e, 0xdc,
	0x8f, 0x17, 0xf4, 0xc8, 0xe9, 0xf0, 0xd5, 0x6b, 0x32, 0xb6, 0x17, 0xca, 0xfc, 0x64, 0x76, 0xdc,
	0x4f, 0x26, 0xe3, 0xdf, 0xa2, 0x4b, 0xf9, 0x6d, 0x7b, 0xea, 0x47, 0xb1, 0xbd, 0xc8, 0xfc, 0xed,
	0x4d, 0xb3, 0xf5, 0x60, 0x7f, 0x3c, 0xe3, 0x6a, 0xfd, 0xc0, 0xa6, 0x51, 0x12, 0x91, 0x58, 0x4c,
	0xb3, 0x36, 0x79, 0xd3, 0xdc, 0xcc, 0x0c, 0x36, 0x4d, 0xea, 0x85, 0xbf, 0x46, 0x58, 0x3d, 0x0b,
	0x36, 0xc5, 0x3a, 0xf3, 0x75, 0xc3, 0x7c, 0x96, 0x62, 0x82, 0x1a, 0x1f, 0xd8, 0x42, 0xd5, 0xa1,
	0xdf, 0xb5, 0x51, 0xab, 0xb2, 0x57, 0x77, 0xe1, 0x11, 0x5f, 0x47, 0x4b, 0x7e, 0x10, 0xc5, 0x74,
	0xd8, 0x89, 0xfd, 0x30, 0x68, 0x77, 0xed, 0x46, 0xab, 0xb2, 0x57, 0x75, 0x55, 0x25, 0xde, 0x40,
	0x0b, 0x03, 0xbe, 0xa2, 0x66, 0xab, 0xb2, 0xd7, 0x74, 0x85, 0x84, 0x31, 0x9a, 0x8b, 0xfc, 0x5e,
	0x60, 0x2f, 0x31, 0x2d, 0x7b, 0xc6, 0xf7, 0x50, 0xcd, 0x4b, 0x9c, 0x2d, 0xb7, 0x2a, 0x7b, 0xcb,
	0xfb, 0xb6, 0x32, 0xe7, 0x13, 0x12, 0x45, 0x5e, 0x8f, 0x3c, 0x1f, 0x0f, 0x88, 0x9b, 0x5a, 0x3e,
	0x5e, 0x44, 0xf3, 0x23, 0xef, 0x62, 0x48, 0x9c, 0x27, 0x68, 0x4d, 0x13, 0x3f, 0xb8, 0x85, 0x1a,
	0x03, 0xf1, 0xfc, 0x84, 0x8c, 0x59, 0xd8, 0x35, 0x5d, 0x59, 0x05, 0x73, 0xf1, 0x83, 0x6f, 0x43,
	0x16, 0x45, 0x75, 0x97, 0x3d, 0x3b, 0x17, 0x68, 0x73, 0xc2, 0x29, 0xe2, 0x5d, 0x84, 0x86, 0x11,
	0xa1, 0xe2, 0xa0, 0xb8, 0x3f, 0x49, 0x83, 0xef, 0xa0, 0x5a, 0xa4, 0x06, 0xe6, 0xba, 0xb2, 0x8c,
	0xc4, 0x91, 0x9b, 0x9a, 0x39, 0xdf, 0xa0, 0x75, 0xed, 0x81, 0xe0, 0x5f, 0xa2, 0x25, 0x4a, 0x3a,
	0xc4, 0x1f, 0x91, 0x63, 0xe2, 0x75, 0x09, 0x15, 0xa8, 0xb1, 0x9d, 0x3b, 0x4b, 0xc9, 0xc2, 0x55,
	0x3b, 0x38, 0x04, 0x6d, 0x4d, 0x3c, 0x6b, 0x7c, 0x8c, 0x56, 0x15, 0x6b, 0x76, 0x5d, 0x2a, 0xad,
	0xaa, 0x61, 0x88, 0x62, 0x27, 0xe7, 0x2b, 0x84, 0x8b, 0x31, 0x0d, 0xd3, 0xf7, 0x45, 0x5c, 0x4e,
	0x9e, 0x7e, 0x5b, 0xb6, 0x70, 0xd5, 0x0e, 0xce, 0x97, 0xe9, 0xa1, 0xca, 0x51, 0x0e, 0x87, 0xea,
	0x47, 0x42, 0x68, 0x77, 0x99, 0xdb, 0xaa, 0x2b, 0xab, 0xe0, 0xe2, 0xf9, 0xd1, 0xa9, 0x17, 0x45,
	0xec, 0x0c, 0x6a, 0xae, 0x90, 0x9c, 0xbb, 0x92, 0x43, 0x29, 0xbc, 0x77, 0x50, 0x3d, 0x20, 0xdf,
	0x2b, 0x67, 0x9a, 0x29, 0x9c, 0x67, 0xe9, 0xea, 0xa4, 0xe0, 0x2b, 0xef, 0x83, 0xb7, 0x51, 0x6d,
	0x44, 0x82, 0x6e, 0x48, 0xdb, 0x5d, 0x36, 0x85, 0xaa, 0x9b, 0xca, 0xce, 0xd7, 0xe8, 0x72, 0x09,
	0x46, 0xe0, 0x87, 0xa8, 0x19, 0xc9, 0x18, 0xc3, 0x4f, 0x64, 0xc2, 0x2d, 0x52, 0x4c, 0x9d, 0x1f,
	0x17, 0x50, 0xcd, 0x25, 0xd1, 0x20, 0x0c, 0x22, 0x82, 0x3f, 0xd7, 0x52, 0xce, 0xb5, 0xdc, 0xc9,
	0x72, 0xe3, 0x52, 0xce, 0x39, 0x9b, 0xc8, 0x39, 0xef, 0x6b, 0x9d, 0x4d, 0x45, 0x3a, 0x27, 0x13,
	0x48, 0xe7, 0x3d, 0xad, 0x4b, 0x23, 0xeb, 0x1c, 0xea, 0x58, 0xa7, 0xa5, 0xf5, 0x55, 0x42, 0x3b,
	0x9f, 0x6b, 0x69, 0x47, 0xbf, 0x65, 0xa5, 0xbc, 0xf3, 0xb9, 0x96, 0x77, 0x26, 0x39, 0x2a, 0x21,
	0x9e, 0x97, 0xa5, 0xc4, 0x73, 0x73, 0xaa, 0xfd, 0x2f, 0x65, 0x9e, 0x43, 0x1d, 0xf3, 0xb4, 0x26,
	0xf8, 0x9d, 0x48, 0x3d, 0xdf, 0x94, 0x50, 0xcf, 0x07, 0x53, 0x9c, 0x68, 0x09, 0xf7, 0xdc, 0x44,
	0xb3, 0xe1, 0x6b, 0x46, 0x3d, 0x8d, 0xfd, 0x4d, 0xfd, 0x81, 0x3e, 0x39, 0x9e, 0x71, 0x67, 0xc3,
	0xd7, 0xf8, 0x17, 0xa8, 0x4e, 0x7e, 0xe8, 0x90, 0x01, 0x70, 0x03, 0x23, 0xa4, 0xc6, 0xfe, 0xae,
	0xb6, 0xc7, 0x51, 0x62, 0x75, 0x3c, 0xe3, 0x66, 0x5d, 0x32, 0x32, 0xb9, 0x89, 0x56, 0x0b, 0xa6,
	0xf8, 0x12, 0x9a, 0x27, 0x94, 0x86, 0x1c, 0xc6, 0xea, 0x2e, 0x17, 0x9c, 0x1d, 0x84, 0xb2, 0x79,
	0xe0, 0x65, 0x36, 0xd9, 0x0a, 0xc3, 0x9c, 0xd9, 0xf0, 0xb5, 0xf3, 0x21, 0x64, 0x80, 0x1d, 0xe2,
	0x0f, 0x62, 0xc6, 0x33, 0xd1, 0x97, 0x49, 0x23, 0x7b, 0x06, 0x5e, 0x25, 0x94, 0x07, 0x53, 0xd3,
	0x85, 0x47, 0xe7, 0x5b, 0x74, 0x49, 0x17, 0x93, 0x45, 0xbe, 0xad, 0xe8, 0xf8, 0x76, 0x0f, 0xcd,
	0x93, 0x11, 0x09, 0x62, 0x11, 0x9e, 0x58, 0x59, 0xfc, 0x11, 0xb4, 0xb8, 0xdc, 0xc0, 0xf9, 0x1d,
	0xb2, 0x27, 0x5d, 0x97, 0x77, 0x3e, 0xd6, 0x39, 0xda, 0xd0, 0x9f, 0xfa, 0x3b, 0x1f, 0xe9, 0x02,
	0x6d, 0x4f, 0xbe, 0x5f, 0xef, 0x7c, 0x34, 0x02, 0x64, 0x52, 0xc0, 0x94, 0x77, 0x3e, 0x8c, 0x74,
	0x25, 0x14, 0x16, 0xfc, 0x49, 0xc7, 0x91, 0x20, 0xe8, 0x27, 0xdc, 0x36, 0x99, 0x4f, 0xdf, 0xf5,
	0x30, 0x01, 0xda, 0x29, 0x03, 0xc4, 0x77, 0x3e, 0xde, 0x9f, 0xe7, 0xd1, 0x3c, 0x53, 0xe0, 0x43,
	0x2d, 0xf1, 0xee, 0x16, 0xbb, 0x96, 0xb2, 0xee, 0xe9, 0x44, 0xd6, 0x75, 0x34, 0x93, 0x98, 0x86,
	0x72, 0xbf, 0x98, 0x40, 0xb9, 0xad, 0xa2, 0x3f, 0x23, 0xdf, 0x3e, 0xd2, 0xf1, 0xed, 0x95, 0xa2,
	0xa3, 0x12, 0xb2, 0x3d, 0xd4, 0x92, 0xad, 0x66, 0x9b, 0x4a, 0x99, 0xf6, 0x50, 0xcb, 0xb4, 0x5a,
	0x2f, 0x25, 0x34, 0xfb, 0x9b, 0x52, 0x9a, 0xbd, 0x61, 0xde, 0xf0, 0x52, 0x8e, 0x7d, 0xa4, 0xe3,
	0xd8, 0x2b, 0x3a, 0xa7, 0x13, 0x09, 0xf6, 0xab, 0x12, 0x82, 0xbd, 0x6e, 0x3a, 0xbf, 0xc9, 0xec,
	0x9a, 0x51, 0xde, 0x7d, 0xb4, 0x5a, 0xb8, 0x93, 0xe6, 0xea, 0xc9, 0xf9, 0x10, 0xad, 0x6b, 0xf7,
	0x43, 0x2a, 0xfd, 0x2a, 0x72, 0xe9, 0xe7, 0x1c, 0xa1, 0x35, 0xcd, 0x0c, 0x21, 0x5f, 0x3e, 0x67,
	0x39, 0x7f, 0x1a, 0x88, 0xa9, 0x0c, 0xcc, 0x79, 0xe1, 0x07, 0xc4, 0x9e, 0x6d, 0x55, 0xf7, 0xaa,
	0x2e, 0x7b, 0x76, 0xfe, 0x0f, 0x6d, 0x4e, 0x58, 0x28, 0x90, 0xaa, 0xdf, 0x8d, 0x84, 0x35, 0x3c,
	0x3a, 0x4f, 0x91, 0x95, 0xbf, 0x8c, 0x3c, 0xfc, 0xf3, 0xc5, 0x49, 0x35, 0x57, 0x80, 0x68, 0x87,
	0x7e, 0x28, 0x76, 0xea, 0xed, 0xc1, 0x58, 0xea, 0xfa, 0xb6, 0xf8, 0xea, 0x7c, 0x2c, 0xd6, 0xf0,
	0xd6, 0x90, 0xe9, 0x3c, 0x42, 0x5b, 0x13, 0xaf, 0xec, 0x94, 0x2e, 0x7e, 0xac, 0xa1, 0x25, 0xa5,
	0x08, 0xc4, 0x0e, 0x2b, 0x4d, 0x5f, 0xf2, 0x33, 0x7a, 0xe9, 0xa7, 0x45, 0x18, 0x25, 0x9d, 0xe3,
	0xe4, 0xdc, 0x6e, 0x21, 0x2b, 0x3a, 0xf7, 0x07, 0x7d, 0x12, 0xc4, 0x89, 0x4e, 0xd4, 0x42, 0x05,
	0x3d, 0x94, 0xd5, 0x94, 0x27, 0x4a, 0xcf, 0x86, 0x7d, 0x86, 0x4b, 0x75, 0x57, 0xd2, 0xc0, 0x4d,
	0x14, 0x65, 0xe7, 0xa1, 0x17, 0x73, 0xbc, 0xe1, 0xa3, 0x25, 0x2a, 0x58, 0x89, 0x10, 0x4f, 0x09,
	0x8d, 0xc2, 0x80, 0xe1, 0x49, 0xdd, 0x55, 0x95, 0x78, 0x0f, 0xad, 0x0c, 0x86, 0x14, 0x62, 0x3f,
	0x4a, 0xec, 0x16, 0x98, 0x5d, 0x5e, 0x8d, 0x6f, 0xa0, 0xe5, 0x90, 0xf6, 0xbc, 0xc0, 0xff, 0xbd,
	0x27, 0xb6, 0x66, 0x91, 0x0d, 0x9a, 0xd3, 0xc2, 0x2a, 0x65, 0xcd, 0x41, 0xd8, 0x25, 0x2c, 0xc2,
	0xeb, 0x6e, 0x41, 0xaf, 0x54, 0x85, 0x75, 0xb5, 0x2a, 0x84, 0x1d, 0xe0, 0xcf, 0xcc, 0x03, 0x7f,
	0xd5, 0x22, 0x69, 0xb2, 0xf6, 0x67, 0x5e, 0x9f, 0xb0, 0xec, 0x36, 0x6d, 0x07, 0x0d, 0x76, 0x50,
	0x93, 0x4b, 0x67, 0x7e, 0x0c, 0x55, 0x71, 0x93, 0xf9, 0x57, 0x74, 0xb0, 0xa6, 0x4c, 0x66, 0xe3,
	0x2c, 0x31, 0x3f, 0x39, 0x2d, 0xfe, 0x39, 0x6a, 0x8a, 0x6d, 0x7b, 0xea, 0x07, 0x24, 0xb2, 0x97,
	0x59, 0x09, 0x6a, 0xeb, 0x5e, 0x0a, 0x80, 0x81, 0xab, 0x58, 0xe3, 0xff, 0x47, 0xab, 0x5e, 0x1c,
	0x53, 0xff, 0xd5, 0x30, 0x26, 0x07, 0x5e, 0x4c, 0x7a, 0x21, 0x1d, 0xdb, 0x2b, 0x6c, 0xa0, 0x62,
	0x03, 0xac, 0x2b, 0x55, 0xde, 0xb1, 0x2d, 0xbe, 0xae, 0x4c, 0xa3, 0xb4, 0xef, 0xdb, 0xab, 0xb9,
	0xf6, 0x7d, 0xa5, 0xfd, 0xae, 0x8d, 0x73, 0xed, 0x77, 0x95, 0xf6, 0x7b, 0xf6, 0x5a, 0xae, 0xfd,
	0x9e, 0xd2, 0x7e, 0xdf, 0xbe, 0x94, 0x6b, 0xbf, 0xaf, 0xb4, 0x3f, 0xb0, 0xd7, 0x73, 0xed, 0x0f,
	0x94, 0xf6, 0x8f, 0xec, 0x8d, 0x5c, 0xfb, 0x47, 0x4a, 0xfb, 0xc7, 0xf6, 0x66, 0xae, 0xfd, 0x63,
	0xa5, 0xfd, 0xa1, 0x6d, 0xe7, 0xda, 0x1f, 0xc2, 0xcd, 0xcf, 0x76, 0xe3, 0x67, 0xf6, 0x16, 0x33,
	0x90, 0x55, 0xaa, 0xc5, 0x1d, 0x7b, 0x3b, 0x6f, 0x71, 0x47, 0xb5, 0xd8, 0xb7, 0x2f, 0xe7, 0x2d,
	0xf6, 0x55, 0x8b, 0xbb, 0xf6, 0x4e, 0xde, 0xe2, 0xae, 0x6a, 0x71, 0xcf, 0xbe, 0x92, 0xb7, 0xb8,
	0xa7, 0x5a, 0xdc, 0xb7, 0x77, 0xf3, 0x16, 0xf7, 0x9d, 0x3f, 0x21, 0xd4, 0x90, 0xee, 0x0d, 0xde,
	0x41, 0x75, 0xda, 0x19, 0x3d, 0xa7, 0x5e, 0x86, 0x3c, 0x99, 0xe2, 0xad, 0xf0, 0x63, 0x03, 0x2d,
	0xf8, 0x31, 0xe9, 0xb7, 0xbb, 0x0c, 0x3b, 0xaa, 0xae, 0x90, 0x20, 0xe2, 0xe0, 0x89, 0xdd, 0xf5,
	0x39, 0x36, 0xa1, 0x54, 0x4e, 0xda, 0x0e, 0x49, 0xd4, 0x11, 0x60, 0x91, 0xca, 0x8c, 0xf9, 0xa8,
	0xdf, 0xf7, 0xe8, 0xf8, 0x45, 0xe0, 0xc7, 0x02, 0x23, 0x64, 0x15, 0x9c, 0xdb, 0x20, 0x4c, 0xe7,
	0xc5, 0xb1, 0x41, 0xd2, 0x80, 0xf7, 0x41, 0x08, 0xab, 0x6c, 0x77, 0x19, 0x1e, 0x54, 0xdd, 0x54,
	0x86, 0x52, 0x72, 0x10, 0x02, 0xd0, 0xd5, 0x79, 0x29, 0xc9, 0x04, 0x6c, 0xa3, 0x45, 0x20, 0x18,
	0xd0, 0xf3, 0xf0, 0x4f, 0x44, 0x88, 0xed, 0xce, 0x90, 0x52, 0x12, 0x74, 0xc6, 0x6c, 0x25, 0x3c,
	0xfa, 0x15, 0x1d, 0x8c, 0xf7, 0xdd, 0xd0, 0x0b, 0x62, 0x3f, 0x1e, 0x8b, 0xd8, 0x4f, 0x65, 0xb6,
	0x9a, 0x10, 0x66, 0x7d, 0x4a, 0x21, 0xd3, 0x5a, 0xe2, 0xe8, 0x29, 0xa9, 0x60, 0x84, 0x01, 0x3c,
	0x9c, 0x78, 0x71, 0xe7, 0x9c, 0xf0, 0x37, 0xb0, 0x55, 0x57, 0xd1, 0x01, 0x76, 0x26, 0x1e, 0x13,
	0xb3, 0x15, 0x66, 0x96, 0x57, 0x03, 0x16, 0x7b, 0xfd, 0x70, 0x18, 0xc4, 0x89, 0x9d, 0xc5, 0x59,
	0x45, 0x51, 0xc2, 0x99, 0x51, 0xd2, 0xf7, 0xe8, 0x6b, 0x11, 0xd5, 0x42, 0x62, 0x58, 0xcf, 0x2f,
	0xc1, 0xf3, 0xf1, 0x80, 0x88, 0x90, 0x96, 0x55, 0x92, 0x05, 0x63, 0x83, 0x35, 0xc1, 0x06, 0x99,
	0x0a, 0x90, 0x8e, 0x92, 0x78, 0x48, 0x83, 0x5f, 0x25, 0x7b, 0x72, 0x89, 0xa3, 0xb7, 0xaa, 0x85,
	0x1b, 0x18, 0x87, 0x03, 0x71, 0x03, 0xd7, 0xf9, 0x0d, 0x4c, 0x15, 0x7a, 0x24, 0xdb, 0x98, 0x0e,
	0xc9, 0x36, 0x0d, 0x48, 0x66, 0x1b, 0x90, 0x6c, 0xcb, 0x80, 0x64, 0xdb, 0x06, 0x24, 0xbb, 0x6c,
	0x40, 0xb2, 0x1d, 0x03, 0x92, 0x5d, 0x31, 0x20, 0xd9, 0xae, 0x01, 0xc9, 0xae, 0x9a, 0x90, 0xac,
	0x65, 0x44, 0xb2, 0x6b, 0x46, 0x24, 0x73, 0x8c, 0x48, 0xf6, 0x9e, 0x11, 0xc9, 0xae, 0x1b, 0x91,
	0xec, 0xfd, 0x02, 0x92, 0xe1, 0x07, 0x68, 0x23, 0x8b, 0xbe, 0x60, 0x44, 0x68, 0xe4, 0x87, 0x81,
	0x0b, 0x97, 0xf1, 0x06, 0xbb, 0x44, 0x13, 0x5a, 0xf5, 0xfd, 0xd8, 0x25, 0xfe, 0x60, 0x52, 0x3f,
	0x68, 0x75, 0xfe, 0xd2, 0x40, 0x4b, 0xca, 0xab, 0x72, 0x88, 0x58, 0x3f, 0x1a, 0xe4, 0xdf, 0x82,
	0x2b, 0x3a, 0x88, 0x82, 0x4c, 0x66, 0xc8, 0xc1, 0xbf, 0x72, 0xe4, 0xb4, 0x80, 0x47, 0x21, 0xed,
	0xa5, 0xe0, 0xc9, 0x05, 0xc0, 0xa3, 0x90, 0xf6, 0x58, 0xba, 0xc1, 0xa1, 0x33, 0x11, 0xe1, 0xa4,
	0xa3, 0x70, 0x48, 0x85, 0x4f, 0x8e, 0x9d, 0x92, 0x46, 0xc9, 0x73, 0x16, 0x4a, 0xf3, 0x9c, 0x45,
	0x43, 0x9e, 0x53, 0x33, 0xe6, 0x39, 0xf5, 0xa9, 0xf2, 0x1c, 0xa4, 0xcd, 0x73, 0xd2, 0xb1, 0x40,
	0xa3, 0xe6, 0x54, 0xa0, 0x01, 0x3f, 0x71, 0xa7, 0xff, 0x2c, 0x7c, 0xee, 0xfd, 0xf0, 0x88, 0x41,
	0x97, 0x40, 0xd6, 0x9c, 0x16, 0x76, 0x2a, 0xf6, 0x7e, 0x60, 0xc7, 0xcf, 0xb1, 0x35, 0x11, 0x19,
	0xbe, 0xa4, 0x9d, 0x97, 0x05, 0xbe, 0xa4, 0xfd, 0xf2, 0xb8, 0xbe, 0xa2, 0xc1, 0xf5, 0xc9, 0x37,
	0xcd, 0xfa, 0x1f, 0x6f, 0xda, 0x6a, 0xd9, 0x4d, 0x83, 0xb3, 0xeb, 0x84, 0x7d, 0x20, 0xd7, 0x48,
	0x40, 0x6f, 0x2a, 0x03, 0x03, 0x78, 0xc9, 0xc5, 0x79, 0x36, 0xec, 0xbf, 0x22, 0x54, 0x24, 0x54,
	0x79, 0x35, 0x60, 0x7b, 0xef, 0x82, 0x8d, 0xc6, 0x71, 0x57, 0x48, 0xf8, 0x13, 0xd4, 0x10, 0x15,
	0x16, 0x50, 0xa1, 0xbd, 0xae, 0x49, 0x2c, 0xdb, 0x59, 0xbb, 0x2b, 0x1b, 0xe3, 0x4f, 0x51, 0x53,
	0x88, 0x67, 0x31, 0x78, 0xde, 0x60, 0x5f, 0x09, 0xb7, 0x74, 0x9d, 0x99, 0x81, 0xab, 0x98, 0xc3,
	0x51, 0x74, 0x28, 0xf1, 0x62, 0xd2, 0x7d, 0x3c, 0x16, 0xe8, 0x9c, 0x29, 0x20, 0xe4, 0x85, 0xc0,
	0x66, 0x6d, 0x73, 0x4a, 0x91, 0x54, 0x52, 0xc5, 0x08, 0xfe, 0x86, 0x91, 0x40, 0x68, 0x55, 0xa9,
	0xa7, 0x8c, 0xed, 0xe9, 0x28, 0xe3, 0xb2, 0x81, 0x32, 0x76, 0x0c, 0x94, 0x71, 0xc5, 0x40, 0x19,
	0xbb, 0x06, 0xca, 0xb8, 0x6a, 0xa0, 0x8c, 0x96, 0x81, 0x32, 0xae, 0x19, 0x28, 0xc3, 0x31, 0x50,
	0xc6, 0x7b, 0x26, 0xca, 0xb8, 0x6e, 0xa4, 0x8c, 0xf7, 0x8d, 0x94, 0x71, 0xc3, 0x48, 0x19, 0x1f,
	0x18, 0x29, 0x63, 0xcf, 0x48, 0x19, 0x37, 0x8b, 0xc9, 0xef, 0x7f, 0x6a, 0xa8, 0x21, 0xdd, 0xed,
	0xa9, 0x00, 0xfc, 0x16, 0xb2, 0x32, 0x59, 0x24, 0x93, 0x22, 0x05, 0xce, 0xeb, 0xe1, 0x7e, 0xfb,
	0x51, 0x92, 0xca, 0x70, 0x20, 0xcf, 0x14, 0x9a, 0x72, 0x76, 0x6e, 0xea, 0x72, 0x76, 0x7e, 0x42,
	0x39, 0x2b, 0x25, 0xac, 0x1c, 0xe5, 0xd3, 0x84, 0x75, 0x0f, 0xad, 0xf8, 0xc1, 0x88, 0x04, 0x71,
	0x48, 0xc7, 0x6d, 0x9e, 0x97, 0xf3, 0x0c, 0x39, 0xaf, 0x56, 0x12, 0xf4, 0x5a, 0x49, 0x82, 0x5e,
	0xcf, 0x25, 0xe8, 0x36, 0x5a, 0x84, 0xe7, 0x17, 0x61, 0x9a, 0x2c, 0x0b, 0x51, 0x49, 0x84, 0x1b,
	0xb9, 0x44, 0x18, 0x12, 0x6f, 0x96, 0x02, 0x73, 0x1c, 0xe7, 0x02, 0xec, 0x5c, 0x74, 0xee, 0x51,
	0xf2, 0xd9, 0x85, 0xd7, 0x13, 0x15, 0x71, 0xa6, 0x00, 0x7f, 0xb0, 0x2c, 0x96, 0x8b, 0x2e, 0xf3,
	0x59, 0x24, 0x32, 0xf4, 0x1c, 0x90, 0xc0, 0xbb, 0x88, 0xc7, 0xed, 0x24, 0x19, 0xce, 0x14, 0xf8,
	0x36, 0xc2, 0xe1, 0x88, 0xd0, 0xee, 0x90, 0x9c, 0x72, 0x9d, 0x04, 0xdb, 0x9a, 0x16, 0x88, 0x06,
	0xf0, 0x2c, 0xd8, 0x82, 0xc3, 0xb4, 0xa4, 0x81, 0x35, 0x0f, 0x42, 0x9e, 0xc2, 0x63, 0xbe, 0xdf,
	0x42, 0xd4, 0xa3, 0xce, 0xda, 0x74, 0xa8, 0x73, 0xc9, 0x80, 0x3a, 0xeb, 0x06, 0xd4, 0xd9, 0x30,
	0xa0, 0xce, 0xa6, 0x01, 0x75, 0x6c, 0x03, 0xea, 0x6c, 0x19, 0x50, 0x67, 0xdb, 0x80, 0x3a, 0x97,
	0x0d, 0xa8, 0xb3, 0x63, 0x42, 0x9d, 0x2b, 0x46, 0xd4, 0xd9, 0x35, 0xa2, 0xce, 0x55, 0x23, 0xea,
	0xb4, 0x8c, 0xa8, 0x73, 0xcd, 0x88, 0x3a, 0x4e, 0x11, 0x75, 0xfe, 0x3a, 0x8f, 0x96, 0x5e, 0x04,
	0x32, 0xee, 0xa8, 0x09, 0x58, 0xc5, 0x90, 0x80, 0xcd, 0x16, 0x12, 0xb0, 0x62, 0x72, 0x55, 0xd5,
	0x26, 0x57, 0x69, 0x91, 0x3b, 0x27, 0x17, 0xb9, 0xea, 0x8b, 0xbe, 0x79, 0xd3, 0x8b, 0xbe, 0x85,
	0xe2, 0x8b, 0x3e, 0x19, 0x31, 0x16, 0x4b, 0x10, 0xa3, 0x96, 0x43, 0x0c, 0x28, 0xd8, 0xa1, 0x7e,
	0xe7, 0x15, 0x3d, 0xc7, 0x13, 0x49, 0x03, 0xc8, 0x97, 0xe0, 0x84, 0x78, 0x47, 0xc1, 0xff, 0x78,
	0xaa, 0xba, 0x05, 0xbd, 0xae, 0x14, 0x6e, 0xe8, 0x4b, 0xe1, 0x5c, 0xe9, 0xdd, 0x2c, 0x96, 0xde,
	0xb0, 0x62, 0xbf, 0x77, 0x1e, 0x8b, 0xb0, 0x17, 0xc5, 0xb9, 0xa4, 0x2a, 0xa4, 0x89, 0xcb, 0x9a,
	0x34, 0xb1, 0x85, 0x1a, 0x21, 0xed, 0xf9, 0x81, 0x77, 0x21, 0x65, 0x92, 0xb2, 0x4a, 0xc3, 0x00,
	0x96, 0x96, 0x01, 0x36, 0xd0, 0x42, 0xcc, 0x49, 0x84, 0x23, 0x90, 0x90, 0x00, 0x63, 0x92, 0xc5,
	0xbd, 0x08, 0xfa, 0x62, 0xd5, 0x1c, 0x87, 0x8a, 0x0d, 0x30, 0x5a, 0x32, 0x3f, 0xb1, 0x30, 0x5e,
	0xa5, 0xe7, 0xb4, 0x90, 0x55, 0x89, 0x49, 0x0a, 0x33, 0x9e, 0x2f, 0xaa, 0x4a, 0xe7, 0x01, 0xaa,
	0xa5, 0x1f, 0x25, 0x26, 0x7c, 0x59, 0xd0, 0xfe, 0xc8, 0xf5, 0x8f, 0x2a, 0xaa, 0x4d, 0xfd, 0xeb,
	0x56, 0xc9, 0x3f, 0x3b, 0xb9, 0xa0, 0xa9, 0x1a, 0x82, 0x66, 0xae, 0x10, 0x34, 0x9f, 0x66, 0x3f,
	0xf5, 0xb0, 0x5a, 0x63, 0x9e, 0x25, 0xbe, 0x5b, 0xda, 0x9f, 0x7a, 0xc0, 0xc0, 0x55, 0xcc, 0xf1,
	0x27, 0x08, 0xd1, 0xce, 0x88, 0x57, 0x7e, 0x91, 0xbd, 0x60, 0xfc, 0x47, 0x4b, 0xb2, 0x86, 0xbe,
	0x7e, 0x90, 0xf6, 0x5d, 0xd4, 0xf4, 0x55, 0xff, 0xc1, 0x92, 0xac, 0xa1, 0xef, 0x30, 0xf0, 0x83,
	0x11, 0x7f, 0x0d, 0x5c, 0xd3, 0xf4, 0x55, 0xb0, 0xc5, 0x95, 0xac, 0x81, 0x1b, 0x87, 0x01, 0xb0,
	0x57, 0x20, 0x5e, 0x74, 0x55, 0xdd, 0x4c, 0x01, 0x77, 0x9a, 0x0b, 0xfc, 0x9d, 0x90, 0x88, 0x34,
	0x45, 0x07, 0x07, 0x42, 0x3b, 0xa3, 0x0b, 0x36, 0x76, 0x83, 0x7d, 0x81, 0x49, 0x65, 0xe7, 0x31,
	0x6a, 0xca, 0xfb, 0x05, 0xb7, 0x22, 0xe2, 0x05, 0x21, 0xcf, 0xa3, 0x84, 0x04, 0x3e, 0xa2, 0x04,
	0xa7, 0xf8, 0xcd, 0x48, 0xe5, 0x5b, 0x7f, 0x9c, 0x45, 0x0d, 0xe9, 0xb7, 0x42, 0xdc, 0x44, 0xb5,
	0x93, 0xa8, 0x77, 0x44, 0x69, 0x48, 0xad, 0x19, 0xdc, 0x40, 0x8b, 0x27, 0x51, 0xaf, 0x1d, 0xf8,
	0xb1, 0x55, 0xc1, 0x2b, 0xa8, 0x71, 0x12, 0xf5, 0xce, 0xce, 0x87, 0xf1, 0x61, 0xf8, 0x7d, 0x60,
	0xcd, 0x0a, 0xdb, 0x83, 0x8b, 0x30, 0x22, 0x56, 0x15, 0xaf, 0xa1, 0x15, 0x61, 0x9b, 0x5c, 0x53,
	0x6b, 0x0e, 0x6f, 0xa2, 0xb5, 0x93, 0xa8, 0x97, 0xff, 0xec, 0x62, 0xcd, 0xe3, 0x75, 0xb4, 0x7a,
	0x12, 0xf5, 0xd4, 0x4f, 0x57, 0xd6, 0x02, 0xc6, 0x68, 0xf9, 0x24, 0xea, 0x49, 0x1f, 0xa9, 0xac,
	0x45, 0xe1, 0x58, 0xfe, 0xd4, 0x64, 0xd5, 0x52, 0x65, 0xf6, 0x11, 0xc9, 0xaa, 0xe3, 0xcb, 0x68,
	0x53, 0x33, 0xda, 0x53, 0x3f, 0x8a, 0x2d, 0x24, 0x5c, 0x4b, 0xdf, 0x8e, 0xac, 0x06, 0xde, 0x42,
	0xeb, 0x85, 0x59, 0x30, 0xf3, 0x66, 0xb2, 0x38, 0x38, 0x04, 0x6b, 0xe9, 0xd6, 0x23, 0xd4, 0x94,
	0xcb, 0x2a, 0x6c, 0xa1, 0x66, 0xfb, 0xec, 0xe5, 0x8b, 0x67, 0x07, 0xc7, 0x47, 0x07, 0x4f, 0x8e,
	0x0e, 0xad, 0x19, 0xbc, 0x8c, 0x50, 0xfb, 0xec, 0x65, 0x22, 0xb3, 0xdd, 0x6a, 0x9f, 0xbd, 0x74,
	0x8f, 0xbe, 0x38, 0x3a, 0x78, 0x7e, 0x74, 0x68, 0xcd, 0x3e, 0xb6, 0xfe, 0xf6, 0x66, 0xb7, 0xf2,
	0xf7, 0x37, 0xbb, 0x95, 0x7f, 0xbe, 0xd9, 0xad, 0xfc, 0xe1, 0x5f, 0xbb, 0x33, 0xaf, 0x16, 0xd8,
	0x0f, 0xd3, 0x77, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x8c, 0xe6, 0x12, 0x3d, 0x2d, 0x00,
	0x00,
}
