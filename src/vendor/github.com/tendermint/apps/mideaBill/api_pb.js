/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mideaBill.BillState', null, global);
goog.exportSymbol('proto.mideaBill.EntInfo', null, global);
goog.exportSymbol('proto.mideaBill.Event', null, global);
goog.exportSymbol('proto.mideaBill.EventApplyBill', null, global);
goog.exportSymbol('proto.mideaBill.MessageType', null, global);
goog.exportSymbol('proto.mideaBill.MideaBill', null, global);
goog.exportSymbol('proto.mideaBill.Receipt', null, global);
goog.exportSymbol('proto.mideaBill.Request', null, global);
goog.exportSymbol('proto.mideaBill.RequestAddUser', null, global);
goog.exportSymbol('proto.mideaBill.RequestApplyBill', null, global);
goog.exportSymbol('proto.mideaBill.RequestApplyBillSign', null, global);
goog.exportSymbol('proto.mideaBill.RequestApplyBillSignRefuse', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillFinancingCheckFail', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillFinancingCheckOk', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillFinancingFail', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillPartFinancing', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillPartTransfer', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillPay', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillQuery', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillTotalFinancing', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillTotalTransfer', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillTransferForcePay', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillTransferRefuse', null, global);
goog.exportSymbol('proto.mideaBill.RequestBillTransferSign', null, global);
goog.exportSymbol('proto.mideaBill.RequestEntIdentifyCheck', null, global);
goog.exportSymbol('proto.mideaBill.RequestEntInfoModify', null, global);
goog.exportSymbol('proto.mideaBill.RequestUserInfoModify', null, global);
goog.exportSymbol('proto.mideaBill.RequestUserPwdModify', null, global);
goog.exportSymbol('proto.mideaBill.RequestUserPwdReset', null, global);
goog.exportSymbol('proto.mideaBill.Response', null, global);
goog.exportSymbol('proto.mideaBill.ResponseAddUser', null, global);
goog.exportSymbol('proto.mideaBill.ResponseApplyBill', null, global);
goog.exportSymbol('proto.mideaBill.ResponseApplyBillSign', null, global);
goog.exportSymbol('proto.mideaBill.ResponseApplyBillSignRefuse', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillFinancingCheckFail', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillFinancingCheckOk', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillFinancingFail', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillPartFinancing', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillPartTransfer', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillPay', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillQuery', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillTotalFinancing', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillTotalTransfer', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillTransferForcePay', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillTransferRefuse', null, global);
goog.exportSymbol('proto.mideaBill.ResponseBillTransferSign', null, global);
goog.exportSymbol('proto.mideaBill.ResponseEntIdentifyCheck', null, global);
goog.exportSymbol('proto.mideaBill.ResponseEntInfoModify', null, global);
goog.exportSymbol('proto.mideaBill.ResponseUserInfoModify', null, global);
goog.exportSymbol('proto.mideaBill.ResponseUserPwdModify', null, global);
goog.exportSymbol('proto.mideaBill.ResponseUserPwdReset', null, global);
goog.exportSymbol('proto.mideaBill.SubTransferOrFinancing', null, global);
goog.exportSymbol('proto.mideaBill.UserInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.MideaBill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mideaBill.MideaBill.repeatedFields_, null);
};
goog.inherits(proto.mideaBill.MideaBill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.MideaBill.displayName = 'proto.mideaBill.MideaBill';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mideaBill.MideaBill.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.MideaBill.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.MideaBill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.MideaBill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.MideaBill.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mideadraftamount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    iuusebillday: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expireday: jspb.Message.getFieldWithDefault(msg, 4, ""),
    issuebillentname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    issuebillentcode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    issuebillpublickey: msg.getIssuebillpublickey_asB64(),
    paynum: jspb.Message.getFieldWithDefault(msg, 8, ""),
    recvbillentname: jspb.Message.getFieldWithDefault(msg, 9, ""),
    recvbillentcode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    recvbillpublickey: msg.getRecvbillpublickey_asB64(),
    waitrecvbillentname: jspb.Message.getFieldWithDefault(msg, 12, ""),
    waitrecvbillentcode: jspb.Message.getFieldWithDefault(msg, 13, ""),
    waitrecvbillpublickey: msg.getWaitrecvbillpublickey_asB64(),
    lastbillentname: jspb.Message.getFieldWithDefault(msg, 15, ""),
    lastbillentcode: jspb.Message.getFieldWithDefault(msg, 16, ""),
    lastbillpublickey: msg.getLastbillpublickey_asB64(),
    signday: jspb.Message.getFieldWithDefault(msg, 18, ""),
    premideadraftid: jspb.Message.getFieldWithDefault(msg, 19, ""),
    nextmideadraftidList: jspb.Message.getRepeatedField(msg, 20),
    billstate: jspb.Message.getFieldWithDefault(msg, 21, 0),
    createtime: jspb.Message.getFieldWithDefault(msg, 22, ""),
    updatetime: jspb.Message.getFieldWithDefault(msg, 23, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.MideaBill}
 */
proto.mideaBill.MideaBill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.MideaBill;
  return proto.mideaBill.MideaBill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.MideaBill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.MideaBill}
 */
proto.mideaBill.MideaBill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMideadraftamount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIuusebillday(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpireday(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuebillentname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuebillentcode(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIssuebillpublickey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaynum(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecvbillentname(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecvbillentcode(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecvbillpublickey(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentcode(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWaitrecvbillpublickey(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastbillentname(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastbillentcode(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastbillpublickey(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignday(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setPremideadraftid(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addNextmideadraftid(value);
      break;
    case 21:
      var value = /** @type {!proto.mideaBill.BillState} */ (reader.readEnum());
      msg.setBillstate(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatetime(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.MideaBill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.MideaBill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.MideaBill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.MideaBill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMideadraftamount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getIuusebillday();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpireday();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIssuebillentname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIssuebillentcode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIssuebillpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getPaynum();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRecvbillpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getWaitrecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getWaitrecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getWaitrecvbillpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getLastbillentname();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLastbillentcode();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getLastbillpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getSignday();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getPremideadraftid();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getNextmideadraftidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getBillstate();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getCreatetime();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getUpdatetime();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double mideaDraftAmount = 2;
 * @return {number}
 */
proto.mideaBill.MideaBill.prototype.getMideadraftamount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mideaBill.MideaBill.prototype.setMideadraftamount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string iuuseBillDay = 3;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getIuusebillday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setIuusebillday = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string expireDay = 4;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getExpireday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setExpireday = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string issueBillEntName = 5;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getIssuebillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setIssuebillentname = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string issueBillEntCode = 6;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getIssuebillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setIssuebillentcode = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes issueBillPublicKey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.MideaBill.prototype.getIssuebillpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes issueBillPublicKey = 7;
 * This is a type-conversion wrapper around `getIssuebillpublickey()`
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getIssuebillpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIssuebillpublickey()));
};


/**
 * optional bytes issueBillPublicKey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIssuebillpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.MideaBill.prototype.getIssuebillpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIssuebillpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.MideaBill.prototype.setIssuebillpublickey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string payNum = 8;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getPaynum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setPaynum = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string recvBillEntName = 9;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getRecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setRecvbillentname = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string recvBillEntCode = 10;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getRecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setRecvbillentcode = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes recvBillPublicKey = 11;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.MideaBill.prototype.getRecvbillpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes recvBillPublicKey = 11;
 * This is a type-conversion wrapper around `getRecvbillpublickey()`
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getRecvbillpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecvbillpublickey()));
};


/**
 * optional bytes recvBillPublicKey = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecvbillpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.MideaBill.prototype.getRecvbillpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecvbillpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.MideaBill.prototype.setRecvbillpublickey = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string waitRecvBillEntName = 12;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getWaitrecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setWaitrecvbillentname = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string waitRecvBillEntCode = 13;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getWaitrecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setWaitrecvbillentcode = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bytes waitRecvBillPublicKey = 14;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.MideaBill.prototype.getWaitrecvbillpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes waitRecvBillPublicKey = 14;
 * This is a type-conversion wrapper around `getWaitrecvbillpublickey()`
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getWaitrecvbillpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWaitrecvbillpublickey()));
};


/**
 * optional bytes waitRecvBillPublicKey = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWaitrecvbillpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.MideaBill.prototype.getWaitrecvbillpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWaitrecvbillpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.MideaBill.prototype.setWaitrecvbillpublickey = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string lastBillEntName = 15;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getLastbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setLastbillentname = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string lastBillEntCode = 16;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getLastbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setLastbillentcode = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional bytes lastBillPublicKey = 17;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.MideaBill.prototype.getLastbillpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes lastBillPublicKey = 17;
 * This is a type-conversion wrapper around `getLastbillpublickey()`
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getLastbillpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastbillpublickey()));
};


/**
 * optional bytes lastBillPublicKey = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastbillpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.MideaBill.prototype.getLastbillpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastbillpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.MideaBill.prototype.setLastbillpublickey = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string signDay = 18;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getSignday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setSignday = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string preMideaDraftId = 19;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getPremideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setPremideadraftid = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * repeated string nextMideaDraftId = 20;
 * @return {!Array.<string>}
 */
proto.mideaBill.MideaBill.prototype.getNextmideadraftidList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 20));
};


/** @param {!Array.<string>} value */
proto.mideaBill.MideaBill.prototype.setNextmideadraftidList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.mideaBill.MideaBill.prototype.addNextmideadraftid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.mideaBill.MideaBill.prototype.clearNextmideadraftidList = function() {
  this.setNextmideadraftidList([]);
};


/**
 * optional BillState billState = 21;
 * @return {!proto.mideaBill.BillState}
 */
proto.mideaBill.MideaBill.prototype.getBillstate = function() {
  return /** @type {!proto.mideaBill.BillState} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {!proto.mideaBill.BillState} value */
proto.mideaBill.MideaBill.prototype.setBillstate = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional string createTime = 22;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getCreatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setCreatetime = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional string updateTime = 23;
 * @return {string}
 */
proto.mideaBill.MideaBill.prototype.getUpdatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.mideaBill.MideaBill.prototype.setUpdatetime = function(value) {
  jspb.Message.setField(this, 23, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.UserInfo.displayName = 'proto.mideaBill.UserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userrole: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contactname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    organizationcode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userstate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userpublickey: msg.getUserpublickey_asB64(),
    entpublickey: msg.getEntpublickey_asB64(),
    createtime: jspb.Message.getFieldWithDefault(msg, 8, ""),
    updatetime: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.UserInfo}
 */
proto.mideaBill.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.UserInfo;
  return proto.mideaBill.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.UserInfo}
 */
proto.mideaBill.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserrole(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationcode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserstate(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserpublickey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntpublickey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatetime(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserrole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContactname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrganizationcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserstate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getEntpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getCreatetime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUpdatetime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string userRole = 2;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getUserrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setUserrole = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string contactName = 3;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getContactname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setContactname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string organizationCode = 4;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getOrganizationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setOrganizationcode = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string userState = 5;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getUserstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setUserstate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes userPublicKey = 6;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.UserInfo.prototype.getUserpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes userPublicKey = 6;
 * This is a type-conversion wrapper around `getUserpublickey()`
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getUserpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserpublickey()));
};


/**
 * optional bytes userPublicKey = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.UserInfo.prototype.getUserpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.UserInfo.prototype.setUserpublickey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes entPublicKey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.UserInfo.prototype.getEntpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes entPublicKey = 7;
 * This is a type-conversion wrapper around `getEntpublickey()`
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getEntpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntpublickey()));
};


/**
 * optional bytes entPublicKey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.UserInfo.prototype.getEntpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.UserInfo.prototype.setEntpublickey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string createTime = 8;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getCreatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setCreatetime = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string updateTime = 9;
 * @return {string}
 */
proto.mideaBill.UserInfo.prototype.getUpdatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.mideaBill.UserInfo.prototype.setUpdatetime = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.EntInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.EntInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.EntInfo.displayName = 'proto.mideaBill.EntInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.EntInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.EntInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.EntInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.EntInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entpublickey: msg.getEntpublickey_asB64(),
    registerdate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    registercapital: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    companysize: jspb.Message.getFieldWithDefault(msg, 6, ""),
    buslicenceno: jspb.Message.getFieldWithDefault(msg, 7, ""),
    entboss: jspb.Message.getFieldWithDefault(msg, 8, ""),
    enttype: jspb.Message.getFieldWithDefault(msg, 9, ""),
    entbosscertno: jspb.Message.getFieldWithDefault(msg, 10, ""),
    bankname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdefault: jspb.Message.getFieldWithDefault(msg, 12, ""),
    accountstate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    accountname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bankaccountnum: jspb.Message.getFieldWithDefault(msg, 15, ""),
    settlingtime: jspb.Message.getFieldWithDefault(msg, 16, ""),
    accounttype: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.EntInfo}
 */
proto.mideaBill.EntInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.EntInfo;
  return proto.mideaBill.EntInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.EntInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.EntInfo}
 */
proto.mideaBill.EntInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntpublickey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegisterdate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRegistercapital(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanysize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuslicenceno(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntboss(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnttype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntbosscertno(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankname(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsdefault(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountstate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountname(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankaccountnum(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlingtime(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccounttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.EntInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.EntInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.EntInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.EntInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRegisterdate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRegistercapital();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCompanysize();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBuslicenceno();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEntboss();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEnttype();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEntbosscertno();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBankname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdefault();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAccountstate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAccountname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBankaccountnum();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getSettlingtime();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAccounttype();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string organizationCode = 1;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getOrganizationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setOrganizationcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string entName = 2;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getEntname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setEntname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes entPublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.EntInfo.prototype.getEntpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes entPublicKey = 3;
 * This is a type-conversion wrapper around `getEntpublickey()`
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getEntpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntpublickey()));
};


/**
 * optional bytes entPublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.EntInfo.prototype.getEntpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.EntInfo.prototype.setEntpublickey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string registerDate = 4;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getRegisterdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setRegisterdate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double registerCapital = 5;
 * @return {number}
 */
proto.mideaBill.EntInfo.prototype.getRegistercapital = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mideaBill.EntInfo.prototype.setRegistercapital = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string companySize = 6;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getCompanysize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setCompanysize = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string busLicenceNo = 7;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getBuslicenceno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setBuslicenceno = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string entBoss = 8;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getEntboss = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setEntboss = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string entType = 9;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getEnttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setEnttype = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string entBossCertNo = 10;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getEntbosscertno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setEntbosscertno = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string bankName = 11;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getBankname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setBankname = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string isDefault = 12;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getIsdefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setIsdefault = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string accountState = 13;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getAccountstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setAccountstate = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string accountName = 14;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getAccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setAccountname = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string bankAccountNum = 15;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getBankaccountnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setBankaccountnum = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string settlingTime = 16;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getSettlingtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setSettlingtime = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string accountType = 17;
 * @return {string}
 */
proto.mideaBill.EntInfo.prototype.getAccounttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.mideaBill.EntInfo.prototype.setAccounttype = function(value) {
  jspb.Message.setField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mideaBill.Request.oneofGroups_);
};
goog.inherits(proto.mideaBill.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.Request.displayName = 'proto.mideaBill.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mideaBill.Request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]];

/**
 * @enum {number}
 */
proto.mideaBill.Request.ValueCase = {
  VALUE_NOT_SET: 0,
  ADDUSER: 1,
  USERINFOMODIFY: 2,
  USERPWDMODIFY: 3,
  USERPWDRESET: 4,
  ENTIDENTIFYCHECK: 5,
  ENTINFOMODIFY: 6,
  APPLYBILL: 7,
  APPLYBILLSIGN: 8,
  APPLYBILLSIGNREFUSE: 9,
  BILLTOTALTRANSFER: 10,
  BILLPARTTRANSFER: 11,
  BILLTRANSFERSIGN: 12,
  BILLTRANSFERREFUSE: 13,
  BILLTRANSFERFORCEPAY: 14,
  BILLTOTALFINANCING: 15,
  BILLPARTFINANCING: 16,
  BILLFINANCINGCHECKOK: 17,
  BILLFINANCINGCHECKFAIL: 18,
  BILLFINANCINGFAIL: 19,
  BILLPAY: 20,
  BILLQUERY: 21
};

/**
 * @return {proto.mideaBill.Request.ValueCase}
 */
proto.mideaBill.Request.prototype.getValueCase = function() {
  return /** @type {proto.mideaBill.Request.ValueCase} */(jspb.Message.computeOneofCase(this, proto.mideaBill.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    adduser: (f = msg.getAdduser()) && proto.mideaBill.RequestAddUser.toObject(includeInstance, f),
    userinfomodify: (f = msg.getUserinfomodify()) && proto.mideaBill.RequestUserInfoModify.toObject(includeInstance, f),
    userpwdmodify: (f = msg.getUserpwdmodify()) && proto.mideaBill.RequestUserPwdModify.toObject(includeInstance, f),
    userpwdreset: (f = msg.getUserpwdreset()) && proto.mideaBill.RequestUserPwdReset.toObject(includeInstance, f),
    entidentifycheck: (f = msg.getEntidentifycheck()) && proto.mideaBill.RequestEntIdentifyCheck.toObject(includeInstance, f),
    entinfomodify: (f = msg.getEntinfomodify()) && proto.mideaBill.RequestEntInfoModify.toObject(includeInstance, f),
    applybill: (f = msg.getApplybill()) && proto.mideaBill.RequestApplyBill.toObject(includeInstance, f),
    applybillsign: (f = msg.getApplybillsign()) && proto.mideaBill.RequestApplyBillSign.toObject(includeInstance, f),
    applybillsignrefuse: (f = msg.getApplybillsignrefuse()) && proto.mideaBill.RequestApplyBillSignRefuse.toObject(includeInstance, f),
    billtotaltransfer: (f = msg.getBilltotaltransfer()) && proto.mideaBill.RequestBillTotalTransfer.toObject(includeInstance, f),
    billparttransfer: (f = msg.getBillparttransfer()) && proto.mideaBill.RequestBillPartTransfer.toObject(includeInstance, f),
    billtransfersign: (f = msg.getBilltransfersign()) && proto.mideaBill.RequestBillTransferSign.toObject(includeInstance, f),
    billtransferrefuse: (f = msg.getBilltransferrefuse()) && proto.mideaBill.RequestBillTransferRefuse.toObject(includeInstance, f),
    billtransferforcepay: (f = msg.getBilltransferforcepay()) && proto.mideaBill.RequestBillTransferForcePay.toObject(includeInstance, f),
    billtotalfinancing: (f = msg.getBilltotalfinancing()) && proto.mideaBill.RequestBillTotalFinancing.toObject(includeInstance, f),
    billpartfinancing: (f = msg.getBillpartfinancing()) && proto.mideaBill.RequestBillPartFinancing.toObject(includeInstance, f),
    billfinancingcheckok: (f = msg.getBillfinancingcheckok()) && proto.mideaBill.RequestBillFinancingCheckOk.toObject(includeInstance, f),
    billfinancingcheckfail: (f = msg.getBillfinancingcheckfail()) && proto.mideaBill.RequestBillFinancingCheckFail.toObject(includeInstance, f),
    billfinancingfail: (f = msg.getBillfinancingfail()) && proto.mideaBill.RequestBillFinancingFail.toObject(includeInstance, f),
    billpay: (f = msg.getBillpay()) && proto.mideaBill.RequestBillPay.toObject(includeInstance, f),
    billquery: (f = msg.getBillquery()) && proto.mideaBill.RequestBillQuery.toObject(includeInstance, f),
    instructionid: jspb.Message.getFieldWithDefault(msg, 22, 0),
    userpublickey: msg.getUserpublickey_asB64(),
    signature: msg.getSignature_asB64(),
    actionid: jspb.Message.getFieldWithDefault(msg, 25, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.Request}
 */
proto.mideaBill.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.Request;
  return proto.mideaBill.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.Request}
 */
proto.mideaBill.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mideaBill.RequestAddUser;
      reader.readMessage(value,proto.mideaBill.RequestAddUser.deserializeBinaryFromReader);
      msg.setAdduser(value);
      break;
    case 2:
      var value = new proto.mideaBill.RequestUserInfoModify;
      reader.readMessage(value,proto.mideaBill.RequestUserInfoModify.deserializeBinaryFromReader);
      msg.setUserinfomodify(value);
      break;
    case 3:
      var value = new proto.mideaBill.RequestUserPwdModify;
      reader.readMessage(value,proto.mideaBill.RequestUserPwdModify.deserializeBinaryFromReader);
      msg.setUserpwdmodify(value);
      break;
    case 4:
      var value = new proto.mideaBill.RequestUserPwdReset;
      reader.readMessage(value,proto.mideaBill.RequestUserPwdReset.deserializeBinaryFromReader);
      msg.setUserpwdreset(value);
      break;
    case 5:
      var value = new proto.mideaBill.RequestEntIdentifyCheck;
      reader.readMessage(value,proto.mideaBill.RequestEntIdentifyCheck.deserializeBinaryFromReader);
      msg.setEntidentifycheck(value);
      break;
    case 6:
      var value = new proto.mideaBill.RequestEntInfoModify;
      reader.readMessage(value,proto.mideaBill.RequestEntInfoModify.deserializeBinaryFromReader);
      msg.setEntinfomodify(value);
      break;
    case 7:
      var value = new proto.mideaBill.RequestApplyBill;
      reader.readMessage(value,proto.mideaBill.RequestApplyBill.deserializeBinaryFromReader);
      msg.setApplybill(value);
      break;
    case 8:
      var value = new proto.mideaBill.RequestApplyBillSign;
      reader.readMessage(value,proto.mideaBill.RequestApplyBillSign.deserializeBinaryFromReader);
      msg.setApplybillsign(value);
      break;
    case 9:
      var value = new proto.mideaBill.RequestApplyBillSignRefuse;
      reader.readMessage(value,proto.mideaBill.RequestApplyBillSignRefuse.deserializeBinaryFromReader);
      msg.setApplybillsignrefuse(value);
      break;
    case 10:
      var value = new proto.mideaBill.RequestBillTotalTransfer;
      reader.readMessage(value,proto.mideaBill.RequestBillTotalTransfer.deserializeBinaryFromReader);
      msg.setBilltotaltransfer(value);
      break;
    case 11:
      var value = new proto.mideaBill.RequestBillPartTransfer;
      reader.readMessage(value,proto.mideaBill.RequestBillPartTransfer.deserializeBinaryFromReader);
      msg.setBillparttransfer(value);
      break;
    case 12:
      var value = new proto.mideaBill.RequestBillTransferSign;
      reader.readMessage(value,proto.mideaBill.RequestBillTransferSign.deserializeBinaryFromReader);
      msg.setBilltransfersign(value);
      break;
    case 13:
      var value = new proto.mideaBill.RequestBillTransferRefuse;
      reader.readMessage(value,proto.mideaBill.RequestBillTransferRefuse.deserializeBinaryFromReader);
      msg.setBilltransferrefuse(value);
      break;
    case 14:
      var value = new proto.mideaBill.RequestBillTransferForcePay;
      reader.readMessage(value,proto.mideaBill.RequestBillTransferForcePay.deserializeBinaryFromReader);
      msg.setBilltransferforcepay(value);
      break;
    case 15:
      var value = new proto.mideaBill.RequestBillTotalFinancing;
      reader.readMessage(value,proto.mideaBill.RequestBillTotalFinancing.deserializeBinaryFromReader);
      msg.setBilltotalfinancing(value);
      break;
    case 16:
      var value = new proto.mideaBill.RequestBillPartFinancing;
      reader.readMessage(value,proto.mideaBill.RequestBillPartFinancing.deserializeBinaryFromReader);
      msg.setBillpartfinancing(value);
      break;
    case 17:
      var value = new proto.mideaBill.RequestBillFinancingCheckOk;
      reader.readMessage(value,proto.mideaBill.RequestBillFinancingCheckOk.deserializeBinaryFromReader);
      msg.setBillfinancingcheckok(value);
      break;
    case 18:
      var value = new proto.mideaBill.RequestBillFinancingCheckFail;
      reader.readMessage(value,proto.mideaBill.RequestBillFinancingCheckFail.deserializeBinaryFromReader);
      msg.setBillfinancingcheckfail(value);
      break;
    case 19:
      var value = new proto.mideaBill.RequestBillFinancingFail;
      reader.readMessage(value,proto.mideaBill.RequestBillFinancingFail.deserializeBinaryFromReader);
      msg.setBillfinancingfail(value);
      break;
    case 20:
      var value = new proto.mideaBill.RequestBillPay;
      reader.readMessage(value,proto.mideaBill.RequestBillPay.deserializeBinaryFromReader);
      msg.setBillpay(value);
      break;
    case 21:
      var value = new proto.mideaBill.RequestBillQuery;
      reader.readMessage(value,proto.mideaBill.RequestBillQuery.deserializeBinaryFromReader);
      msg.setBillquery(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 23:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserpublickey(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 25:
      var value = /** @type {!proto.mideaBill.MessageType} */ (reader.readEnum());
      msg.setActionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdduser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mideaBill.RequestAddUser.serializeBinaryToWriter
    );
  }
  f = message.getUserinfomodify();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mideaBill.RequestUserInfoModify.serializeBinaryToWriter
    );
  }
  f = message.getUserpwdmodify();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mideaBill.RequestUserPwdModify.serializeBinaryToWriter
    );
  }
  f = message.getUserpwdreset();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mideaBill.RequestUserPwdReset.serializeBinaryToWriter
    );
  }
  f = message.getEntidentifycheck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mideaBill.RequestEntIdentifyCheck.serializeBinaryToWriter
    );
  }
  f = message.getEntinfomodify();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.mideaBill.RequestEntInfoModify.serializeBinaryToWriter
    );
  }
  f = message.getApplybill();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.mideaBill.RequestApplyBill.serializeBinaryToWriter
    );
  }
  f = message.getApplybillsign();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.mideaBill.RequestApplyBillSign.serializeBinaryToWriter
    );
  }
  f = message.getApplybillsignrefuse();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.mideaBill.RequestApplyBillSignRefuse.serializeBinaryToWriter
    );
  }
  f = message.getBilltotaltransfer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.mideaBill.RequestBillTotalTransfer.serializeBinaryToWriter
    );
  }
  f = message.getBillparttransfer();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.mideaBill.RequestBillPartTransfer.serializeBinaryToWriter
    );
  }
  f = message.getBilltransfersign();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.mideaBill.RequestBillTransferSign.serializeBinaryToWriter
    );
  }
  f = message.getBilltransferrefuse();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.mideaBill.RequestBillTransferRefuse.serializeBinaryToWriter
    );
  }
  f = message.getBilltransferforcepay();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.mideaBill.RequestBillTransferForcePay.serializeBinaryToWriter
    );
  }
  f = message.getBilltotalfinancing();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.mideaBill.RequestBillTotalFinancing.serializeBinaryToWriter
    );
  }
  f = message.getBillpartfinancing();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.mideaBill.RequestBillPartFinancing.serializeBinaryToWriter
    );
  }
  f = message.getBillfinancingcheckok();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.mideaBill.RequestBillFinancingCheckOk.serializeBinaryToWriter
    );
  }
  f = message.getBillfinancingcheckfail();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.mideaBill.RequestBillFinancingCheckFail.serializeBinaryToWriter
    );
  }
  f = message.getBillfinancingfail();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.mideaBill.RequestBillFinancingFail.serializeBinaryToWriter
    );
  }
  f = message.getBillpay();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.mideaBill.RequestBillPay.serializeBinaryToWriter
    );
  }
  f = message.getBillquery();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.mideaBill.RequestBillQuery.serializeBinaryToWriter
    );
  }
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getUserpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      23,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      24,
      f
    );
  }
  f = message.getActionid();
  if (f !== 0.0) {
    writer.writeEnum(
      25,
      f
    );
  }
};


/**
 * optional RequestAddUser addUser = 1;
 * @return {?proto.mideaBill.RequestAddUser}
 */
proto.mideaBill.Request.prototype.getAdduser = function() {
  return /** @type{?proto.mideaBill.RequestAddUser} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestAddUser, 1));
};


/** @param {?proto.mideaBill.RequestAddUser|undefined} value */
proto.mideaBill.Request.prototype.setAdduser = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearAdduser = function() {
  this.setAdduser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasAdduser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestUserInfoModify userInfoModify = 2;
 * @return {?proto.mideaBill.RequestUserInfoModify}
 */
proto.mideaBill.Request.prototype.getUserinfomodify = function() {
  return /** @type{?proto.mideaBill.RequestUserInfoModify} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestUserInfoModify, 2));
};


/** @param {?proto.mideaBill.RequestUserInfoModify|undefined} value */
proto.mideaBill.Request.prototype.setUserinfomodify = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearUserinfomodify = function() {
  this.setUserinfomodify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasUserinfomodify = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestUserPwdModify userPwdModify = 3;
 * @return {?proto.mideaBill.RequestUserPwdModify}
 */
proto.mideaBill.Request.prototype.getUserpwdmodify = function() {
  return /** @type{?proto.mideaBill.RequestUserPwdModify} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestUserPwdModify, 3));
};


/** @param {?proto.mideaBill.RequestUserPwdModify|undefined} value */
proto.mideaBill.Request.prototype.setUserpwdmodify = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearUserpwdmodify = function() {
  this.setUserpwdmodify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasUserpwdmodify = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestUserPwdReset userPwdReset = 4;
 * @return {?proto.mideaBill.RequestUserPwdReset}
 */
proto.mideaBill.Request.prototype.getUserpwdreset = function() {
  return /** @type{?proto.mideaBill.RequestUserPwdReset} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestUserPwdReset, 4));
};


/** @param {?proto.mideaBill.RequestUserPwdReset|undefined} value */
proto.mideaBill.Request.prototype.setUserpwdreset = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearUserpwdreset = function() {
  this.setUserpwdreset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasUserpwdreset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestEntIdentifyCheck entIdentifyCheck = 5;
 * @return {?proto.mideaBill.RequestEntIdentifyCheck}
 */
proto.mideaBill.Request.prototype.getEntidentifycheck = function() {
  return /** @type{?proto.mideaBill.RequestEntIdentifyCheck} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestEntIdentifyCheck, 5));
};


/** @param {?proto.mideaBill.RequestEntIdentifyCheck|undefined} value */
proto.mideaBill.Request.prototype.setEntidentifycheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearEntidentifycheck = function() {
  this.setEntidentifycheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasEntidentifycheck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestEntInfoModify entInfoModify = 6;
 * @return {?proto.mideaBill.RequestEntInfoModify}
 */
proto.mideaBill.Request.prototype.getEntinfomodify = function() {
  return /** @type{?proto.mideaBill.RequestEntInfoModify} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestEntInfoModify, 6));
};


/** @param {?proto.mideaBill.RequestEntInfoModify|undefined} value */
proto.mideaBill.Request.prototype.setEntinfomodify = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearEntinfomodify = function() {
  this.setEntinfomodify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasEntinfomodify = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestApplyBill applyBill = 7;
 * @return {?proto.mideaBill.RequestApplyBill}
 */
proto.mideaBill.Request.prototype.getApplybill = function() {
  return /** @type{?proto.mideaBill.RequestApplyBill} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestApplyBill, 7));
};


/** @param {?proto.mideaBill.RequestApplyBill|undefined} value */
proto.mideaBill.Request.prototype.setApplybill = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearApplybill = function() {
  this.setApplybill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasApplybill = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RequestApplyBillSign applyBillSign = 8;
 * @return {?proto.mideaBill.RequestApplyBillSign}
 */
proto.mideaBill.Request.prototype.getApplybillsign = function() {
  return /** @type{?proto.mideaBill.RequestApplyBillSign} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestApplyBillSign, 8));
};


/** @param {?proto.mideaBill.RequestApplyBillSign|undefined} value */
proto.mideaBill.Request.prototype.setApplybillsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearApplybillsign = function() {
  this.setApplybillsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasApplybillsign = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestApplyBillSignRefuse applyBillSignRefuse = 9;
 * @return {?proto.mideaBill.RequestApplyBillSignRefuse}
 */
proto.mideaBill.Request.prototype.getApplybillsignrefuse = function() {
  return /** @type{?proto.mideaBill.RequestApplyBillSignRefuse} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestApplyBillSignRefuse, 9));
};


/** @param {?proto.mideaBill.RequestApplyBillSignRefuse|undefined} value */
proto.mideaBill.Request.prototype.setApplybillsignrefuse = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearApplybillsignrefuse = function() {
  this.setApplybillsignrefuse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasApplybillsignrefuse = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RequestBillTotalTransfer billTotalTransfer = 10;
 * @return {?proto.mideaBill.RequestBillTotalTransfer}
 */
proto.mideaBill.Request.prototype.getBilltotaltransfer = function() {
  return /** @type{?proto.mideaBill.RequestBillTotalTransfer} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillTotalTransfer, 10));
};


/** @param {?proto.mideaBill.RequestBillTotalTransfer|undefined} value */
proto.mideaBill.Request.prototype.setBilltotaltransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBilltotaltransfer = function() {
  this.setBilltotaltransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBilltotaltransfer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RequestBillPartTransfer billPartTransfer = 11;
 * @return {?proto.mideaBill.RequestBillPartTransfer}
 */
proto.mideaBill.Request.prototype.getBillparttransfer = function() {
  return /** @type{?proto.mideaBill.RequestBillPartTransfer} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillPartTransfer, 11));
};


/** @param {?proto.mideaBill.RequestBillPartTransfer|undefined} value */
proto.mideaBill.Request.prototype.setBillparttransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillparttransfer = function() {
  this.setBillparttransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillparttransfer = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RequestBillTransferSign billTransferSign = 12;
 * @return {?proto.mideaBill.RequestBillTransferSign}
 */
proto.mideaBill.Request.prototype.getBilltransfersign = function() {
  return /** @type{?proto.mideaBill.RequestBillTransferSign} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillTransferSign, 12));
};


/** @param {?proto.mideaBill.RequestBillTransferSign|undefined} value */
proto.mideaBill.Request.prototype.setBilltransfersign = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBilltransfersign = function() {
  this.setBilltransfersign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBilltransfersign = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RequestBillTransferRefuse billTransferRefuse = 13;
 * @return {?proto.mideaBill.RequestBillTransferRefuse}
 */
proto.mideaBill.Request.prototype.getBilltransferrefuse = function() {
  return /** @type{?proto.mideaBill.RequestBillTransferRefuse} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillTransferRefuse, 13));
};


/** @param {?proto.mideaBill.RequestBillTransferRefuse|undefined} value */
proto.mideaBill.Request.prototype.setBilltransferrefuse = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBilltransferrefuse = function() {
  this.setBilltransferrefuse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBilltransferrefuse = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RequestBillTransferForcePay billTransferForcePay = 14;
 * @return {?proto.mideaBill.RequestBillTransferForcePay}
 */
proto.mideaBill.Request.prototype.getBilltransferforcepay = function() {
  return /** @type{?proto.mideaBill.RequestBillTransferForcePay} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillTransferForcePay, 14));
};


/** @param {?proto.mideaBill.RequestBillTransferForcePay|undefined} value */
proto.mideaBill.Request.prototype.setBilltransferforcepay = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBilltransferforcepay = function() {
  this.setBilltransferforcepay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBilltransferforcepay = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RequestBillTotalFinancing billTotalFinancing = 15;
 * @return {?proto.mideaBill.RequestBillTotalFinancing}
 */
proto.mideaBill.Request.prototype.getBilltotalfinancing = function() {
  return /** @type{?proto.mideaBill.RequestBillTotalFinancing} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillTotalFinancing, 15));
};


/** @param {?proto.mideaBill.RequestBillTotalFinancing|undefined} value */
proto.mideaBill.Request.prototype.setBilltotalfinancing = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBilltotalfinancing = function() {
  this.setBilltotalfinancing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBilltotalfinancing = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RequestBillPartFinancing billPartFinancing = 16;
 * @return {?proto.mideaBill.RequestBillPartFinancing}
 */
proto.mideaBill.Request.prototype.getBillpartfinancing = function() {
  return /** @type{?proto.mideaBill.RequestBillPartFinancing} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillPartFinancing, 16));
};


/** @param {?proto.mideaBill.RequestBillPartFinancing|undefined} value */
proto.mideaBill.Request.prototype.setBillpartfinancing = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillpartfinancing = function() {
  this.setBillpartfinancing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillpartfinancing = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RequestBillFinancingCheckOk billFinancingCheckOk = 17;
 * @return {?proto.mideaBill.RequestBillFinancingCheckOk}
 */
proto.mideaBill.Request.prototype.getBillfinancingcheckok = function() {
  return /** @type{?proto.mideaBill.RequestBillFinancingCheckOk} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillFinancingCheckOk, 17));
};


/** @param {?proto.mideaBill.RequestBillFinancingCheckOk|undefined} value */
proto.mideaBill.Request.prototype.setBillfinancingcheckok = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillfinancingcheckok = function() {
  this.setBillfinancingcheckok(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillfinancingcheckok = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RequestBillFinancingCheckFail billFinancingCheckFail = 18;
 * @return {?proto.mideaBill.RequestBillFinancingCheckFail}
 */
proto.mideaBill.Request.prototype.getBillfinancingcheckfail = function() {
  return /** @type{?proto.mideaBill.RequestBillFinancingCheckFail} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillFinancingCheckFail, 18));
};


/** @param {?proto.mideaBill.RequestBillFinancingCheckFail|undefined} value */
proto.mideaBill.Request.prototype.setBillfinancingcheckfail = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillfinancingcheckfail = function() {
  this.setBillfinancingcheckfail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillfinancingcheckfail = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional RequestBillFinancingFail billFinancingFail = 19;
 * @return {?proto.mideaBill.RequestBillFinancingFail}
 */
proto.mideaBill.Request.prototype.getBillfinancingfail = function() {
  return /** @type{?proto.mideaBill.RequestBillFinancingFail} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillFinancingFail, 19));
};


/** @param {?proto.mideaBill.RequestBillFinancingFail|undefined} value */
proto.mideaBill.Request.prototype.setBillfinancingfail = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillfinancingfail = function() {
  this.setBillfinancingfail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillfinancingfail = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RequestBillPay billPay = 20;
 * @return {?proto.mideaBill.RequestBillPay}
 */
proto.mideaBill.Request.prototype.getBillpay = function() {
  return /** @type{?proto.mideaBill.RequestBillPay} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillPay, 20));
};


/** @param {?proto.mideaBill.RequestBillPay|undefined} value */
proto.mideaBill.Request.prototype.setBillpay = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillpay = function() {
  this.setBillpay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillpay = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional RequestBillQuery billQuery = 21;
 * @return {?proto.mideaBill.RequestBillQuery}
 */
proto.mideaBill.Request.prototype.getBillquery = function() {
  return /** @type{?proto.mideaBill.RequestBillQuery} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.RequestBillQuery, 21));
};


/** @param {?proto.mideaBill.RequestBillQuery|undefined} value */
proto.mideaBill.Request.prototype.setBillquery = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.mideaBill.Request.oneofGroups_[0], value);
};


proto.mideaBill.Request.prototype.clearBillquery = function() {
  this.setBillquery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Request.prototype.hasBillquery = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int64 instructionId = 22;
 * @return {number}
 */
proto.mideaBill.Request.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.mideaBill.Request.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional bytes userPublicKey = 23;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.Request.prototype.getUserpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * optional bytes userPublicKey = 23;
 * This is a type-conversion wrapper around `getUserpublickey()`
 * @return {string}
 */
proto.mideaBill.Request.prototype.getUserpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserpublickey()));
};


/**
 * optional bytes userPublicKey = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.Request.prototype.getUserpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.Request.prototype.setUserpublickey = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional bytes signature = 24;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.Request.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes signature = 24;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.mideaBill.Request.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.mideaBill.Request.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.Request.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional MessageType actionId = 25;
 * @return {!proto.mideaBill.MessageType}
 */
proto.mideaBill.Request.prototype.getActionid = function() {
  return /** @type {!proto.mideaBill.MessageType} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {!proto.mideaBill.MessageType} value */
proto.mideaBill.Request.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 25, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestAddUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestAddUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestAddUser.displayName = 'proto.mideaBill.RequestAddUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestAddUser.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestAddUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestAddUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestAddUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userrole: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contactname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    organizationcode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userstate: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestAddUser}
 */
proto.mideaBill.RequestAddUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestAddUser;
  return proto.mideaBill.RequestAddUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestAddUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestAddUser}
 */
proto.mideaBill.RequestAddUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserrole(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationcode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestAddUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestAddUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestAddUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestAddUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserrole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContactname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrganizationcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserstate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.mideaBill.RequestAddUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestAddUser.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string userRole = 2;
 * @return {string}
 */
proto.mideaBill.RequestAddUser.prototype.getUserrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestAddUser.prototype.setUserrole = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string contactName = 3;
 * @return {string}
 */
proto.mideaBill.RequestAddUser.prototype.getContactname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestAddUser.prototype.setContactname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string organizationCode = 4;
 * @return {string}
 */
proto.mideaBill.RequestAddUser.prototype.getOrganizationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.RequestAddUser.prototype.setOrganizationcode = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string userState = 5;
 * @return {string}
 */
proto.mideaBill.RequestAddUser.prototype.getUserstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mideaBill.RequestAddUser.prototype.setUserstate = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestUserInfoModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestUserInfoModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestUserInfoModify.displayName = 'proto.mideaBill.RequestUserInfoModify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestUserInfoModify.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestUserInfoModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestUserInfoModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestUserInfoModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userrole: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contactname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userstate: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestUserInfoModify}
 */
proto.mideaBill.RequestUserInfoModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestUserInfoModify;
  return proto.mideaBill.RequestUserInfoModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestUserInfoModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestUserInfoModify}
 */
proto.mideaBill.RequestUserInfoModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserrole(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestUserInfoModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestUserInfoModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestUserInfoModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestUserInfoModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserrole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContactname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserstate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.mideaBill.RequestUserInfoModify.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestUserInfoModify.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string userRole = 2;
 * @return {string}
 */
proto.mideaBill.RequestUserInfoModify.prototype.getUserrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestUserInfoModify.prototype.setUserrole = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string contactName = 3;
 * @return {string}
 */
proto.mideaBill.RequestUserInfoModify.prototype.getContactname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestUserInfoModify.prototype.setContactname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string userState = 4;
 * @return {string}
 */
proto.mideaBill.RequestUserInfoModify.prototype.getUserstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.RequestUserInfoModify.prototype.setUserstate = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestUserPwdModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestUserPwdModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestUserPwdModify.displayName = 'proto.mideaBill.RequestUserPwdModify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestUserPwdModify.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestUserPwdModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestUserPwdModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestUserPwdModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userpublickey: msg.getUserpublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestUserPwdModify}
 */
proto.mideaBill.RequestUserPwdModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestUserPwdModify;
  return proto.mideaBill.RequestUserPwdModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestUserPwdModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestUserPwdModify}
 */
proto.mideaBill.RequestUserPwdModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserpublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestUserPwdModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestUserPwdModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestUserPwdModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestUserPwdModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes userPublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.RequestUserPwdModify.prototype.getUserpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes userPublicKey = 1;
 * This is a type-conversion wrapper around `getUserpublickey()`
 * @return {string}
 */
proto.mideaBill.RequestUserPwdModify.prototype.getUserpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserpublickey()));
};


/**
 * optional bytes userPublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestUserPwdModify.prototype.getUserpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.RequestUserPwdModify.prototype.setUserpublickey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestUserPwdReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestUserPwdReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestUserPwdReset.displayName = 'proto.mideaBill.RequestUserPwdReset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestUserPwdReset.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestUserPwdReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestUserPwdReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestUserPwdReset.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestUserPwdReset}
 */
proto.mideaBill.RequestUserPwdReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestUserPwdReset;
  return proto.mideaBill.RequestUserPwdReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestUserPwdReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestUserPwdReset}
 */
proto.mideaBill.RequestUserPwdReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestUserPwdReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestUserPwdReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestUserPwdReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestUserPwdReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.mideaBill.RequestUserPwdReset.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestUserPwdReset.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestEntIdentifyCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestEntIdentifyCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestEntIdentifyCheck.displayName = 'proto.mideaBill.RequestEntIdentifyCheck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestEntIdentifyCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestEntIdentifyCheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestEntIdentifyCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entpublickey: msg.getEntpublickey_asB64(),
    registerdate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    registercapital: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    companysize: jspb.Message.getFieldWithDefault(msg, 6, ""),
    buslicenceno: jspb.Message.getFieldWithDefault(msg, 7, ""),
    entboss: jspb.Message.getFieldWithDefault(msg, 8, ""),
    enttype: jspb.Message.getFieldWithDefault(msg, 9, ""),
    entbosscertno: jspb.Message.getFieldWithDefault(msg, 10, ""),
    bankname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isdefault: jspb.Message.getFieldWithDefault(msg, 12, ""),
    accountstate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    accountname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bankaccountnum: jspb.Message.getFieldWithDefault(msg, 15, ""),
    settlingtime: jspb.Message.getFieldWithDefault(msg, 16, ""),
    accounttype: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestEntIdentifyCheck}
 */
proto.mideaBill.RequestEntIdentifyCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestEntIdentifyCheck;
  return proto.mideaBill.RequestEntIdentifyCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestEntIdentifyCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestEntIdentifyCheck}
 */
proto.mideaBill.RequestEntIdentifyCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntpublickey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegisterdate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRegistercapital(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanysize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuslicenceno(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntboss(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnttype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntbosscertno(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankname(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsdefault(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountstate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountname(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankaccountnum(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlingtime(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccounttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestEntIdentifyCheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestEntIdentifyCheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestEntIdentifyCheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRegisterdate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRegistercapital();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCompanysize();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBuslicenceno();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEntboss();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEnttype();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEntbosscertno();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBankname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsdefault();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAccountstate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAccountname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBankaccountnum();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getSettlingtime();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAccounttype();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string organizationCode = 1;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getOrganizationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setOrganizationcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string entName = 2;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEntname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setEntname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes entPublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEntpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes entPublicKey = 3;
 * This is a type-conversion wrapper around `getEntpublickey()`
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEntpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntpublickey()));
};


/**
 * optional bytes entPublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntpublickey()`
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEntpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setEntpublickey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string registerDate = 4;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getRegisterdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setRegisterdate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double registerCapital = 5;
 * @return {number}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getRegistercapital = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setRegistercapital = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string companySize = 6;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getCompanysize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setCompanysize = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string busLicenceNo = 7;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getBuslicenceno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setBuslicenceno = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string entBoss = 8;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEntboss = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setEntboss = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string entType = 9;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEnttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setEnttype = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string entBossCertNo = 10;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getEntbosscertno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setEntbosscertno = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string bankName = 11;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getBankname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setBankname = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string isDefault = 12;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getIsdefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setIsdefault = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string accountState = 13;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getAccountstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setAccountstate = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string accountName = 14;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getAccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setAccountname = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string bankAccountNum = 15;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getBankaccountnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setBankaccountnum = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string settlingTime = 16;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getSettlingtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setSettlingtime = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string accountType = 17;
 * @return {string}
 */
proto.mideaBill.RequestEntIdentifyCheck.prototype.getAccounttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntIdentifyCheck.prototype.setAccounttype = function(value) {
  jspb.Message.setField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestEntInfoModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestEntInfoModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestEntInfoModify.displayName = 'proto.mideaBill.RequestEntInfoModify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestEntInfoModify.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestEntInfoModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestEntInfoModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestEntInfoModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    registerdate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registercapital: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    companysize: jspb.Message.getFieldWithDefault(msg, 5, ""),
    buslicenceno: jspb.Message.getFieldWithDefault(msg, 6, ""),
    entboss: jspb.Message.getFieldWithDefault(msg, 7, ""),
    enttype: jspb.Message.getFieldWithDefault(msg, 8, ""),
    entbosscertno: jspb.Message.getFieldWithDefault(msg, 9, ""),
    bankname: jspb.Message.getFieldWithDefault(msg, 10, ""),
    isdefault: jspb.Message.getFieldWithDefault(msg, 11, ""),
    accountstate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    accountname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    bankaccountnum: jspb.Message.getFieldWithDefault(msg, 14, ""),
    settlingtime: jspb.Message.getFieldWithDefault(msg, 15, ""),
    accounttype: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestEntInfoModify}
 */
proto.mideaBill.RequestEntInfoModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestEntInfoModify;
  return proto.mideaBill.RequestEntInfoModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestEntInfoModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestEntInfoModify}
 */
proto.mideaBill.RequestEntInfoModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegisterdate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRegistercapital(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanysize(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuslicenceno(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntboss(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnttype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntbosscertno(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankname(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsdefault(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountstate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountname(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankaccountnum(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlingtime(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccounttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestEntInfoModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestEntInfoModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestEntInfoModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestEntInfoModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegisterdate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistercapital();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCompanysize();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBuslicenceno();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEntboss();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEnttype();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEntbosscertno();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBankname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIsdefault();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAccountstate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAccountname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getBankaccountnum();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getSettlingtime();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getAccounttype();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string organizationCode = 1;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getOrganizationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setOrganizationcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string entName = 2;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getEntname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setEntname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string registerDate = 3;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getRegisterdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setRegisterdate = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double registerCapital = 4;
 * @return {number}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getRegistercapital = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.mideaBill.RequestEntInfoModify.prototype.setRegistercapital = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string companySize = 5;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getCompanysize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setCompanysize = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string busLicenceNo = 6;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getBuslicenceno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setBuslicenceno = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string entBoss = 7;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getEntboss = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setEntboss = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string entType = 8;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getEnttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setEnttype = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string entBossCertNo = 9;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getEntbosscertno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setEntbosscertno = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string bankName = 10;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getBankname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setBankname = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string isDefault = 11;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getIsdefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setIsdefault = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string accountState = 12;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getAccountstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setAccountstate = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string accountName = 13;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getAccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setAccountname = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string bankAccountNum = 14;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getBankaccountnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setBankaccountnum = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string settlingTime = 15;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getSettlingtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setSettlingtime = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string accountType = 16;
 * @return {string}
 */
proto.mideaBill.RequestEntInfoModify.prototype.getAccounttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.mideaBill.RequestEntInfoModify.prototype.setAccounttype = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestApplyBill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestApplyBill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestApplyBill.displayName = 'proto.mideaBill.RequestApplyBill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestApplyBill.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestApplyBill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestApplyBill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestApplyBill.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mideadraftamount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    iuusebillday: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expireday: jspb.Message.getFieldWithDefault(msg, 4, ""),
    issuebillentname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    issuebillentcode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    paynum: jspb.Message.getFieldWithDefault(msg, 7, ""),
    waitrecvbillentname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    waitrecvbillentcode: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestApplyBill}
 */
proto.mideaBill.RequestApplyBill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestApplyBill;
  return proto.mideaBill.RequestApplyBill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestApplyBill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestApplyBill}
 */
proto.mideaBill.RequestApplyBill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMideadraftamount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIuusebillday(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpireday(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuebillentname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuebillentcode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaynum(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentname(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestApplyBill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestApplyBill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestApplyBill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestApplyBill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMideadraftamount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getIuusebillday();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpireday();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIssuebillentname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIssuebillentcode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPaynum();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWaitrecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getWaitrecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double mideaDraftAmount = 2;
 * @return {number}
 */
proto.mideaBill.RequestApplyBill.prototype.getMideadraftamount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mideaBill.RequestApplyBill.prototype.setMideadraftamount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string iuuseBillDay = 3;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getIuusebillday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setIuusebillday = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string expireDay = 4;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getExpireday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setExpireday = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string issueBillEntName = 5;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getIssuebillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setIssuebillentname = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string issueBillEntCode = 6;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getIssuebillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setIssuebillentcode = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string payNum = 7;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getPaynum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setPaynum = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string waitRecvBillEntName = 8;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getWaitrecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setWaitrecvbillentname = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string waitRecvBillEntCode = 9;
 * @return {string}
 */
proto.mideaBill.RequestApplyBill.prototype.getWaitrecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBill.prototype.setWaitrecvbillentcode = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestApplyBillSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestApplyBillSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestApplyBillSign.displayName = 'proto.mideaBill.RequestApplyBillSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestApplyBillSign.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestApplyBillSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestApplyBillSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestApplyBillSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestApplyBillSign}
 */
proto.mideaBill.RequestApplyBillSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestApplyBillSign;
  return proto.mideaBill.RequestApplyBillSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestApplyBillSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestApplyBillSign}
 */
proto.mideaBill.RequestApplyBillSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestApplyBillSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestApplyBillSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestApplyBillSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestApplyBillSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestApplyBillSign.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBillSign.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestApplyBillSignRefuse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestApplyBillSignRefuse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestApplyBillSignRefuse.displayName = 'proto.mideaBill.RequestApplyBillSignRefuse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestApplyBillSignRefuse.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestApplyBillSignRefuse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestApplyBillSignRefuse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestApplyBillSignRefuse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestApplyBillSignRefuse}
 */
proto.mideaBill.RequestApplyBillSignRefuse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestApplyBillSignRefuse;
  return proto.mideaBill.RequestApplyBillSignRefuse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestApplyBillSignRefuse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestApplyBillSignRefuse}
 */
proto.mideaBill.RequestApplyBillSignRefuse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestApplyBillSignRefuse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestApplyBillSignRefuse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestApplyBillSignRefuse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestApplyBillSignRefuse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestApplyBillSignRefuse.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestApplyBillSignRefuse.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillTotalTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillTotalTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillTotalTransfer.displayName = 'proto.mideaBill.RequestBillTotalTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillTotalTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillTotalTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillTotalTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTotalTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    waitrecvbillentname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    waitrecvbillentcode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillTotalTransfer}
 */
proto.mideaBill.RequestBillTotalTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillTotalTransfer;
  return proto.mideaBill.RequestBillTotalTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillTotalTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillTotalTransfer}
 */
proto.mideaBill.RequestBillTotalTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillTotalTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillTotalTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillTotalTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTotalTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWaitrecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWaitrecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillTotalTransfer.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTotalTransfer.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string waitRecvBillEntName = 2;
 * @return {string}
 */
proto.mideaBill.RequestBillTotalTransfer.prototype.getWaitrecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTotalTransfer.prototype.setWaitrecvbillentname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string waitRecvBillEntCode = 3;
 * @return {string}
 */
proto.mideaBill.RequestBillTotalTransfer.prototype.getWaitrecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTotalTransfer.prototype.setWaitrecvbillentcode = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.SubTransferOrFinancing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.SubTransferOrFinancing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.SubTransferOrFinancing.displayName = 'proto.mideaBill.SubTransferOrFinancing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.SubTransferOrFinancing.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.SubTransferOrFinancing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.SubTransferOrFinancing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.SubTransferOrFinancing.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mideadraftamount: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    waitrecvbillentname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    waitrecvbillentcode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.SubTransferOrFinancing}
 */
proto.mideaBill.SubTransferOrFinancing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.SubTransferOrFinancing;
  return proto.mideaBill.SubTransferOrFinancing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.SubTransferOrFinancing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.SubTransferOrFinancing}
 */
proto.mideaBill.SubTransferOrFinancing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMideadraftamount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.SubTransferOrFinancing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.SubTransferOrFinancing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.SubTransferOrFinancing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.SubTransferOrFinancing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMideadraftamount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getWaitrecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWaitrecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.SubTransferOrFinancing.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.SubTransferOrFinancing.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double mideaDraftAmount = 2;
 * @return {number}
 */
proto.mideaBill.SubTransferOrFinancing.prototype.getMideadraftamount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mideaBill.SubTransferOrFinancing.prototype.setMideadraftamount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string waitRecvBillEntName = 3;
 * @return {string}
 */
proto.mideaBill.SubTransferOrFinancing.prototype.getWaitrecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.SubTransferOrFinancing.prototype.setWaitrecvbillentname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string waitRecvBillEntCode = 4;
 * @return {string}
 */
proto.mideaBill.SubTransferOrFinancing.prototype.getWaitrecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mideaBill.SubTransferOrFinancing.prototype.setWaitrecvbillentcode = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillPartTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mideaBill.RequestBillPartTransfer.repeatedFields_, null);
};
goog.inherits(proto.mideaBill.RequestBillPartTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillPartTransfer.displayName = 'proto.mideaBill.RequestBillPartTransfer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mideaBill.RequestBillPartTransfer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillPartTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillPartTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillPartTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillPartTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subList: jspb.Message.toObjectList(msg.getSubList(),
    proto.mideaBill.SubTransferOrFinancing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillPartTransfer}
 */
proto.mideaBill.RequestBillPartTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillPartTransfer;
  return proto.mideaBill.RequestBillPartTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillPartTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillPartTransfer}
 */
proto.mideaBill.RequestBillPartTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = new proto.mideaBill.SubTransferOrFinancing;
      reader.readMessage(value,proto.mideaBill.SubTransferOrFinancing.deserializeBinaryFromReader);
      msg.addSub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillPartTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillPartTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillPartTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillPartTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mideaBill.SubTransferOrFinancing.serializeBinaryToWriter
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillPartTransfer.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillPartTransfer.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated SubTransferOrFinancing sub = 2;
 * @return {!Array.<!proto.mideaBill.SubTransferOrFinancing>}
 */
proto.mideaBill.RequestBillPartTransfer.prototype.getSubList = function() {
  return /** @type{!Array.<!proto.mideaBill.SubTransferOrFinancing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mideaBill.SubTransferOrFinancing, 2));
};


/** @param {!Array.<!proto.mideaBill.SubTransferOrFinancing>} value */
proto.mideaBill.RequestBillPartTransfer.prototype.setSubList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mideaBill.SubTransferOrFinancing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mideaBill.SubTransferOrFinancing}
 */
proto.mideaBill.RequestBillPartTransfer.prototype.addSub = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mideaBill.SubTransferOrFinancing, opt_index);
};


proto.mideaBill.RequestBillPartTransfer.prototype.clearSubList = function() {
  this.setSubList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillTransferSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillTransferSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillTransferSign.displayName = 'proto.mideaBill.RequestBillTransferSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillTransferSign.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillTransferSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillTransferSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTransferSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillTransferSign}
 */
proto.mideaBill.RequestBillTransferSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillTransferSign;
  return proto.mideaBill.RequestBillTransferSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillTransferSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillTransferSign}
 */
proto.mideaBill.RequestBillTransferSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillTransferSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillTransferSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillTransferSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTransferSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillTransferSign.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTransferSign.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillTransferRefuse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillTransferRefuse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillTransferRefuse.displayName = 'proto.mideaBill.RequestBillTransferRefuse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillTransferRefuse.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillTransferRefuse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillTransferRefuse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTransferRefuse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillTransferRefuse}
 */
proto.mideaBill.RequestBillTransferRefuse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillTransferRefuse;
  return proto.mideaBill.RequestBillTransferRefuse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillTransferRefuse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillTransferRefuse}
 */
proto.mideaBill.RequestBillTransferRefuse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillTransferRefuse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillTransferRefuse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillTransferRefuse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTransferRefuse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillTransferRefuse.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTransferRefuse.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillTransferForcePay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillTransferForcePay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillTransferForcePay.displayName = 'proto.mideaBill.RequestBillTransferForcePay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillTransferForcePay.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillTransferForcePay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillTransferForcePay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTransferForcePay.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recvbillentname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recvbillentcode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillTransferForcePay}
 */
proto.mideaBill.RequestBillTransferForcePay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillTransferForcePay;
  return proto.mideaBill.RequestBillTransferForcePay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillTransferForcePay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillTransferForcePay}
 */
proto.mideaBill.RequestBillTransferForcePay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecvbillentname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecvbillentcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillTransferForcePay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillTransferForcePay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillTransferForcePay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTransferForcePay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillTransferForcePay.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTransferForcePay.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string recvBillEntName = 2;
 * @return {string}
 */
proto.mideaBill.RequestBillTransferForcePay.prototype.getRecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTransferForcePay.prototype.setRecvbillentname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string recvBillEntCode = 3;
 * @return {string}
 */
proto.mideaBill.RequestBillTransferForcePay.prototype.getRecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTransferForcePay.prototype.setRecvbillentcode = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillTotalFinancing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillTotalFinancing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillTotalFinancing.displayName = 'proto.mideaBill.RequestBillTotalFinancing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillTotalFinancing.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillTotalFinancing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillTotalFinancing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTotalFinancing.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    waitrecvbillentname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    waitrecvbillentcode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillTotalFinancing}
 */
proto.mideaBill.RequestBillTotalFinancing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillTotalFinancing;
  return proto.mideaBill.RequestBillTotalFinancing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillTotalFinancing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillTotalFinancing}
 */
proto.mideaBill.RequestBillTotalFinancing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitrecvbillentcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillTotalFinancing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillTotalFinancing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillTotalFinancing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillTotalFinancing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWaitrecvbillentname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWaitrecvbillentcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillTotalFinancing.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTotalFinancing.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string waitRecvBillEntName = 2;
 * @return {string}
 */
proto.mideaBill.RequestBillTotalFinancing.prototype.getWaitrecvbillentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTotalFinancing.prototype.setWaitrecvbillentname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string waitRecvBillEntCode = 3;
 * @return {string}
 */
proto.mideaBill.RequestBillTotalFinancing.prototype.getWaitrecvbillentcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillTotalFinancing.prototype.setWaitrecvbillentcode = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillPartFinancing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mideaBill.RequestBillPartFinancing.repeatedFields_, null);
};
goog.inherits(proto.mideaBill.RequestBillPartFinancing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillPartFinancing.displayName = 'proto.mideaBill.RequestBillPartFinancing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mideaBill.RequestBillPartFinancing.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillPartFinancing.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillPartFinancing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillPartFinancing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillPartFinancing.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subList: jspb.Message.toObjectList(msg.getSubList(),
    proto.mideaBill.SubTransferOrFinancing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillPartFinancing}
 */
proto.mideaBill.RequestBillPartFinancing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillPartFinancing;
  return proto.mideaBill.RequestBillPartFinancing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillPartFinancing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillPartFinancing}
 */
proto.mideaBill.RequestBillPartFinancing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    case 2:
      var value = new proto.mideaBill.SubTransferOrFinancing;
      reader.readMessage(value,proto.mideaBill.SubTransferOrFinancing.deserializeBinaryFromReader);
      msg.addSub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillPartFinancing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillPartFinancing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillPartFinancing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillPartFinancing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mideaBill.SubTransferOrFinancing.serializeBinaryToWriter
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillPartFinancing.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillPartFinancing.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated SubTransferOrFinancing sub = 2;
 * @return {!Array.<!proto.mideaBill.SubTransferOrFinancing>}
 */
proto.mideaBill.RequestBillPartFinancing.prototype.getSubList = function() {
  return /** @type{!Array.<!proto.mideaBill.SubTransferOrFinancing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mideaBill.SubTransferOrFinancing, 2));
};


/** @param {!Array.<!proto.mideaBill.SubTransferOrFinancing>} value */
proto.mideaBill.RequestBillPartFinancing.prototype.setSubList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mideaBill.SubTransferOrFinancing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mideaBill.SubTransferOrFinancing}
 */
proto.mideaBill.RequestBillPartFinancing.prototype.addSub = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mideaBill.SubTransferOrFinancing, opt_index);
};


proto.mideaBill.RequestBillPartFinancing.prototype.clearSubList = function() {
  this.setSubList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillFinancingCheckOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillFinancingCheckOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillFinancingCheckOk.displayName = 'proto.mideaBill.RequestBillFinancingCheckOk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillFinancingCheckOk.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillFinancingCheckOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillFinancingCheckOk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillFinancingCheckOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillFinancingCheckOk}
 */
proto.mideaBill.RequestBillFinancingCheckOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillFinancingCheckOk;
  return proto.mideaBill.RequestBillFinancingCheckOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillFinancingCheckOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillFinancingCheckOk}
 */
proto.mideaBill.RequestBillFinancingCheckOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillFinancingCheckOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillFinancingCheckOk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillFinancingCheckOk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillFinancingCheckOk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillFinancingCheckOk.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillFinancingCheckOk.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillFinancingCheckFail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillFinancingCheckFail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillFinancingCheckFail.displayName = 'proto.mideaBill.RequestBillFinancingCheckFail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillFinancingCheckFail.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillFinancingCheckFail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillFinancingCheckFail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillFinancingCheckFail.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillFinancingCheckFail}
 */
proto.mideaBill.RequestBillFinancingCheckFail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillFinancingCheckFail;
  return proto.mideaBill.RequestBillFinancingCheckFail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillFinancingCheckFail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillFinancingCheckFail}
 */
proto.mideaBill.RequestBillFinancingCheckFail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillFinancingCheckFail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillFinancingCheckFail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillFinancingCheckFail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillFinancingCheckFail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillFinancingCheckFail.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillFinancingCheckFail.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillFinancingFail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillFinancingFail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillFinancingFail.displayName = 'proto.mideaBill.RequestBillFinancingFail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillFinancingFail.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillFinancingFail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillFinancingFail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillFinancingFail.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillFinancingFail}
 */
proto.mideaBill.RequestBillFinancingFail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillFinancingFail;
  return proto.mideaBill.RequestBillFinancingFail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillFinancingFail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillFinancingFail}
 */
proto.mideaBill.RequestBillFinancingFail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillFinancingFail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillFinancingFail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillFinancingFail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillFinancingFail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillFinancingFail.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillFinancingFail.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillPay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillPay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillPay.displayName = 'proto.mideaBill.RequestBillPay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillPay.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillPay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillPay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillPay.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillPay}
 */
proto.mideaBill.RequestBillPay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillPay;
  return proto.mideaBill.RequestBillPay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillPay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillPay}
 */
proto.mideaBill.RequestBillPay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillPay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillPay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillPay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillPay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillPay.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillPay.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.RequestBillQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.RequestBillQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.RequestBillQuery.displayName = 'proto.mideaBill.RequestBillQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.RequestBillQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.RequestBillQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.RequestBillQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    mideadraftid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.RequestBillQuery}
 */
proto.mideaBill.RequestBillQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.RequestBillQuery;
  return proto.mideaBill.RequestBillQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.RequestBillQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.RequestBillQuery}
 */
proto.mideaBill.RequestBillQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMideadraftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.RequestBillQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.RequestBillQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.RequestBillQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.RequestBillQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMideadraftid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mideaDraftId = 1;
 * @return {string}
 */
proto.mideaBill.RequestBillQuery.prototype.getMideadraftid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.mideaBill.RequestBillQuery.prototype.setMideadraftid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mideaBill.Response.oneofGroups_);
};
goog.inherits(proto.mideaBill.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.Response.displayName = 'proto.mideaBill.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mideaBill.Response.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]];

/**
 * @enum {number}
 */
proto.mideaBill.Response.ValueCase = {
  VALUE_NOT_SET: 0,
  ADDUSER: 1,
  USERINFOMODIFY: 2,
  USERPWDMODIFY: 3,
  USERPWDRESET: 4,
  ENTIDENTIFYCHECK: 5,
  ENTINFOMODIFY: 6,
  APPLYBILL: 7,
  APPLYBILLSIGN: 8,
  APPLYBILLSIGNREFUSE: 9,
  BILLTOTALTRANSFER: 10,
  BILLPARTTRANSFER: 11,
  BILLTRANSFERSIGN: 12,
  BILLTRANSFERREFUSE: 13,
  BILLTRANSFERFORCEPAY: 14,
  BILLTOTALFINANCING: 15,
  BILLPARTFINANCING: 16,
  BILLFINANCINGCHECKOK: 17,
  BILLFINANCINGCHECKFAIL: 18,
  BILLFINANCINGFAIL: 19,
  BILLPAY: 20,
  BILLQUERY: 21
};

/**
 * @return {proto.mideaBill.Response.ValueCase}
 */
proto.mideaBill.Response.prototype.getValueCase = function() {
  return /** @type {proto.mideaBill.Response.ValueCase} */(jspb.Message.computeOneofCase(this, proto.mideaBill.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    adduser: (f = msg.getAdduser()) && proto.mideaBill.ResponseAddUser.toObject(includeInstance, f),
    userinfomodify: (f = msg.getUserinfomodify()) && proto.mideaBill.ResponseUserInfoModify.toObject(includeInstance, f),
    userpwdmodify: (f = msg.getUserpwdmodify()) && proto.mideaBill.ResponseUserPwdModify.toObject(includeInstance, f),
    userpwdreset: (f = msg.getUserpwdreset()) && proto.mideaBill.ResponseUserPwdReset.toObject(includeInstance, f),
    entidentifycheck: (f = msg.getEntidentifycheck()) && proto.mideaBill.ResponseEntIdentifyCheck.toObject(includeInstance, f),
    entinfomodify: (f = msg.getEntinfomodify()) && proto.mideaBill.ResponseEntInfoModify.toObject(includeInstance, f),
    applybill: (f = msg.getApplybill()) && proto.mideaBill.ResponseApplyBill.toObject(includeInstance, f),
    applybillsign: (f = msg.getApplybillsign()) && proto.mideaBill.ResponseApplyBillSign.toObject(includeInstance, f),
    applybillsignrefuse: (f = msg.getApplybillsignrefuse()) && proto.mideaBill.ResponseApplyBillSignRefuse.toObject(includeInstance, f),
    billtotaltransfer: (f = msg.getBilltotaltransfer()) && proto.mideaBill.ResponseBillTotalTransfer.toObject(includeInstance, f),
    billparttransfer: (f = msg.getBillparttransfer()) && proto.mideaBill.ResponseBillPartTransfer.toObject(includeInstance, f),
    billtransfersign: (f = msg.getBilltransfersign()) && proto.mideaBill.ResponseBillTransferSign.toObject(includeInstance, f),
    billtransferrefuse: (f = msg.getBilltransferrefuse()) && proto.mideaBill.ResponseBillTransferRefuse.toObject(includeInstance, f),
    billtransferforcepay: (f = msg.getBilltransferforcepay()) && proto.mideaBill.ResponseBillTransferForcePay.toObject(includeInstance, f),
    billtotalfinancing: (f = msg.getBilltotalfinancing()) && proto.mideaBill.ResponseBillTotalFinancing.toObject(includeInstance, f),
    billpartfinancing: (f = msg.getBillpartfinancing()) && proto.mideaBill.ResponseBillPartFinancing.toObject(includeInstance, f),
    billfinancingcheckok: (f = msg.getBillfinancingcheckok()) && proto.mideaBill.ResponseBillFinancingCheckOk.toObject(includeInstance, f),
    billfinancingcheckfail: (f = msg.getBillfinancingcheckfail()) && proto.mideaBill.ResponseBillFinancingCheckFail.toObject(includeInstance, f),
    billfinancingfail: (f = msg.getBillfinancingfail()) && proto.mideaBill.ResponseBillFinancingFail.toObject(includeInstance, f),
    billpay: (f = msg.getBillpay()) && proto.mideaBill.ResponseBillPay.toObject(includeInstance, f),
    billquery: (f = msg.getBillquery()) && proto.mideaBill.ResponseBillQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.Response}
 */
proto.mideaBill.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.Response;
  return proto.mideaBill.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.Response}
 */
proto.mideaBill.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mideaBill.ResponseAddUser;
      reader.readMessage(value,proto.mideaBill.ResponseAddUser.deserializeBinaryFromReader);
      msg.setAdduser(value);
      break;
    case 2:
      var value = new proto.mideaBill.ResponseUserInfoModify;
      reader.readMessage(value,proto.mideaBill.ResponseUserInfoModify.deserializeBinaryFromReader);
      msg.setUserinfomodify(value);
      break;
    case 3:
      var value = new proto.mideaBill.ResponseUserPwdModify;
      reader.readMessage(value,proto.mideaBill.ResponseUserPwdModify.deserializeBinaryFromReader);
      msg.setUserpwdmodify(value);
      break;
    case 4:
      var value = new proto.mideaBill.ResponseUserPwdReset;
      reader.readMessage(value,proto.mideaBill.ResponseUserPwdReset.deserializeBinaryFromReader);
      msg.setUserpwdreset(value);
      break;
    case 5:
      var value = new proto.mideaBill.ResponseEntIdentifyCheck;
      reader.readMessage(value,proto.mideaBill.ResponseEntIdentifyCheck.deserializeBinaryFromReader);
      msg.setEntidentifycheck(value);
      break;
    case 6:
      var value = new proto.mideaBill.ResponseEntInfoModify;
      reader.readMessage(value,proto.mideaBill.ResponseEntInfoModify.deserializeBinaryFromReader);
      msg.setEntinfomodify(value);
      break;
    case 7:
      var value = new proto.mideaBill.ResponseApplyBill;
      reader.readMessage(value,proto.mideaBill.ResponseApplyBill.deserializeBinaryFromReader);
      msg.setApplybill(value);
      break;
    case 8:
      var value = new proto.mideaBill.ResponseApplyBillSign;
      reader.readMessage(value,proto.mideaBill.ResponseApplyBillSign.deserializeBinaryFromReader);
      msg.setApplybillsign(value);
      break;
    case 9:
      var value = new proto.mideaBill.ResponseApplyBillSignRefuse;
      reader.readMessage(value,proto.mideaBill.ResponseApplyBillSignRefuse.deserializeBinaryFromReader);
      msg.setApplybillsignrefuse(value);
      break;
    case 10:
      var value = new proto.mideaBill.ResponseBillTotalTransfer;
      reader.readMessage(value,proto.mideaBill.ResponseBillTotalTransfer.deserializeBinaryFromReader);
      msg.setBilltotaltransfer(value);
      break;
    case 11:
      var value = new proto.mideaBill.ResponseBillPartTransfer;
      reader.readMessage(value,proto.mideaBill.ResponseBillPartTransfer.deserializeBinaryFromReader);
      msg.setBillparttransfer(value);
      break;
    case 12:
      var value = new proto.mideaBill.ResponseBillTransferSign;
      reader.readMessage(value,proto.mideaBill.ResponseBillTransferSign.deserializeBinaryFromReader);
      msg.setBilltransfersign(value);
      break;
    case 13:
      var value = new proto.mideaBill.ResponseBillTransferRefuse;
      reader.readMessage(value,proto.mideaBill.ResponseBillTransferRefuse.deserializeBinaryFromReader);
      msg.setBilltransferrefuse(value);
      break;
    case 14:
      var value = new proto.mideaBill.ResponseBillTransferForcePay;
      reader.readMessage(value,proto.mideaBill.ResponseBillTransferForcePay.deserializeBinaryFromReader);
      msg.setBilltransferforcepay(value);
      break;
    case 15:
      var value = new proto.mideaBill.ResponseBillTotalFinancing;
      reader.readMessage(value,proto.mideaBill.ResponseBillTotalFinancing.deserializeBinaryFromReader);
      msg.setBilltotalfinancing(value);
      break;
    case 16:
      var value = new proto.mideaBill.ResponseBillPartFinancing;
      reader.readMessage(value,proto.mideaBill.ResponseBillPartFinancing.deserializeBinaryFromReader);
      msg.setBillpartfinancing(value);
      break;
    case 17:
      var value = new proto.mideaBill.ResponseBillFinancingCheckOk;
      reader.readMessage(value,proto.mideaBill.ResponseBillFinancingCheckOk.deserializeBinaryFromReader);
      msg.setBillfinancingcheckok(value);
      break;
    case 18:
      var value = new proto.mideaBill.ResponseBillFinancingCheckFail;
      reader.readMessage(value,proto.mideaBill.ResponseBillFinancingCheckFail.deserializeBinaryFromReader);
      msg.setBillfinancingcheckfail(value);
      break;
    case 19:
      var value = new proto.mideaBill.ResponseBillFinancingFail;
      reader.readMessage(value,proto.mideaBill.ResponseBillFinancingFail.deserializeBinaryFromReader);
      msg.setBillfinancingfail(value);
      break;
    case 20:
      var value = new proto.mideaBill.ResponseBillPay;
      reader.readMessage(value,proto.mideaBill.ResponseBillPay.deserializeBinaryFromReader);
      msg.setBillpay(value);
      break;
    case 21:
      var value = new proto.mideaBill.ResponseBillQuery;
      reader.readMessage(value,proto.mideaBill.ResponseBillQuery.deserializeBinaryFromReader);
      msg.setBillquery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdduser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mideaBill.ResponseAddUser.serializeBinaryToWriter
    );
  }
  f = message.getUserinfomodify();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mideaBill.ResponseUserInfoModify.serializeBinaryToWriter
    );
  }
  f = message.getUserpwdmodify();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mideaBill.ResponseUserPwdModify.serializeBinaryToWriter
    );
  }
  f = message.getUserpwdreset();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mideaBill.ResponseUserPwdReset.serializeBinaryToWriter
    );
  }
  f = message.getEntidentifycheck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mideaBill.ResponseEntIdentifyCheck.serializeBinaryToWriter
    );
  }
  f = message.getEntinfomodify();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.mideaBill.ResponseEntInfoModify.serializeBinaryToWriter
    );
  }
  f = message.getApplybill();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.mideaBill.ResponseApplyBill.serializeBinaryToWriter
    );
  }
  f = message.getApplybillsign();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.mideaBill.ResponseApplyBillSign.serializeBinaryToWriter
    );
  }
  f = message.getApplybillsignrefuse();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.mideaBill.ResponseApplyBillSignRefuse.serializeBinaryToWriter
    );
  }
  f = message.getBilltotaltransfer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.mideaBill.ResponseBillTotalTransfer.serializeBinaryToWriter
    );
  }
  f = message.getBillparttransfer();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.mideaBill.ResponseBillPartTransfer.serializeBinaryToWriter
    );
  }
  f = message.getBilltransfersign();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.mideaBill.ResponseBillTransferSign.serializeBinaryToWriter
    );
  }
  f = message.getBilltransferrefuse();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.mideaBill.ResponseBillTransferRefuse.serializeBinaryToWriter
    );
  }
  f = message.getBilltransferforcepay();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.mideaBill.ResponseBillTransferForcePay.serializeBinaryToWriter
    );
  }
  f = message.getBilltotalfinancing();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.mideaBill.ResponseBillTotalFinancing.serializeBinaryToWriter
    );
  }
  f = message.getBillpartfinancing();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.mideaBill.ResponseBillPartFinancing.serializeBinaryToWriter
    );
  }
  f = message.getBillfinancingcheckok();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.mideaBill.ResponseBillFinancingCheckOk.serializeBinaryToWriter
    );
  }
  f = message.getBillfinancingcheckfail();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.mideaBill.ResponseBillFinancingCheckFail.serializeBinaryToWriter
    );
  }
  f = message.getBillfinancingfail();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.mideaBill.ResponseBillFinancingFail.serializeBinaryToWriter
    );
  }
  f = message.getBillpay();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.mideaBill.ResponseBillPay.serializeBinaryToWriter
    );
  }
  f = message.getBillquery();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.mideaBill.ResponseBillQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseAddUser addUser = 1;
 * @return {?proto.mideaBill.ResponseAddUser}
 */
proto.mideaBill.Response.prototype.getAdduser = function() {
  return /** @type{?proto.mideaBill.ResponseAddUser} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseAddUser, 1));
};


/** @param {?proto.mideaBill.ResponseAddUser|undefined} value */
proto.mideaBill.Response.prototype.setAdduser = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearAdduser = function() {
  this.setAdduser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasAdduser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseUserInfoModify userInfoModify = 2;
 * @return {?proto.mideaBill.ResponseUserInfoModify}
 */
proto.mideaBill.Response.prototype.getUserinfomodify = function() {
  return /** @type{?proto.mideaBill.ResponseUserInfoModify} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseUserInfoModify, 2));
};


/** @param {?proto.mideaBill.ResponseUserInfoModify|undefined} value */
proto.mideaBill.Response.prototype.setUserinfomodify = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearUserinfomodify = function() {
  this.setUserinfomodify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasUserinfomodify = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseUserPwdModify userPwdModify = 3;
 * @return {?proto.mideaBill.ResponseUserPwdModify}
 */
proto.mideaBill.Response.prototype.getUserpwdmodify = function() {
  return /** @type{?proto.mideaBill.ResponseUserPwdModify} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseUserPwdModify, 3));
};


/** @param {?proto.mideaBill.ResponseUserPwdModify|undefined} value */
proto.mideaBill.Response.prototype.setUserpwdmodify = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearUserpwdmodify = function() {
  this.setUserpwdmodify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasUserpwdmodify = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseUserPwdReset userPwdReset = 4;
 * @return {?proto.mideaBill.ResponseUserPwdReset}
 */
proto.mideaBill.Response.prototype.getUserpwdreset = function() {
  return /** @type{?proto.mideaBill.ResponseUserPwdReset} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseUserPwdReset, 4));
};


/** @param {?proto.mideaBill.ResponseUserPwdReset|undefined} value */
proto.mideaBill.Response.prototype.setUserpwdreset = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearUserpwdreset = function() {
  this.setUserpwdreset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasUserpwdreset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResponseEntIdentifyCheck entIdentifyCheck = 5;
 * @return {?proto.mideaBill.ResponseEntIdentifyCheck}
 */
proto.mideaBill.Response.prototype.getEntidentifycheck = function() {
  return /** @type{?proto.mideaBill.ResponseEntIdentifyCheck} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseEntIdentifyCheck, 5));
};


/** @param {?proto.mideaBill.ResponseEntIdentifyCheck|undefined} value */
proto.mideaBill.Response.prototype.setEntidentifycheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearEntidentifycheck = function() {
  this.setEntidentifycheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasEntidentifycheck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResponseEntInfoModify entInfoModify = 6;
 * @return {?proto.mideaBill.ResponseEntInfoModify}
 */
proto.mideaBill.Response.prototype.getEntinfomodify = function() {
  return /** @type{?proto.mideaBill.ResponseEntInfoModify} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseEntInfoModify, 6));
};


/** @param {?proto.mideaBill.ResponseEntInfoModify|undefined} value */
proto.mideaBill.Response.prototype.setEntinfomodify = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearEntinfomodify = function() {
  this.setEntinfomodify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasEntinfomodify = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ResponseApplyBill applyBill = 7;
 * @return {?proto.mideaBill.ResponseApplyBill}
 */
proto.mideaBill.Response.prototype.getApplybill = function() {
  return /** @type{?proto.mideaBill.ResponseApplyBill} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseApplyBill, 7));
};


/** @param {?proto.mideaBill.ResponseApplyBill|undefined} value */
proto.mideaBill.Response.prototype.setApplybill = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearApplybill = function() {
  this.setApplybill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasApplybill = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ResponseApplyBillSign applyBillSign = 8;
 * @return {?proto.mideaBill.ResponseApplyBillSign}
 */
proto.mideaBill.Response.prototype.getApplybillsign = function() {
  return /** @type{?proto.mideaBill.ResponseApplyBillSign} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseApplyBillSign, 8));
};


/** @param {?proto.mideaBill.ResponseApplyBillSign|undefined} value */
proto.mideaBill.Response.prototype.setApplybillsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearApplybillsign = function() {
  this.setApplybillsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasApplybillsign = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ResponseApplyBillSignRefuse applyBillSignRefuse = 9;
 * @return {?proto.mideaBill.ResponseApplyBillSignRefuse}
 */
proto.mideaBill.Response.prototype.getApplybillsignrefuse = function() {
  return /** @type{?proto.mideaBill.ResponseApplyBillSignRefuse} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseApplyBillSignRefuse, 9));
};


/** @param {?proto.mideaBill.ResponseApplyBillSignRefuse|undefined} value */
proto.mideaBill.Response.prototype.setApplybillsignrefuse = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearApplybillsignrefuse = function() {
  this.setApplybillsignrefuse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasApplybillsignrefuse = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ResponseBillTotalTransfer billTotalTransfer = 10;
 * @return {?proto.mideaBill.ResponseBillTotalTransfer}
 */
proto.mideaBill.Response.prototype.getBilltotaltransfer = function() {
  return /** @type{?proto.mideaBill.ResponseBillTotalTransfer} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillTotalTransfer, 10));
};


/** @param {?proto.mideaBill.ResponseBillTotalTransfer|undefined} value */
proto.mideaBill.Response.prototype.setBilltotaltransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBilltotaltransfer = function() {
  this.setBilltotaltransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBilltotaltransfer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ResponseBillPartTransfer billPartTransfer = 11;
 * @return {?proto.mideaBill.ResponseBillPartTransfer}
 */
proto.mideaBill.Response.prototype.getBillparttransfer = function() {
  return /** @type{?proto.mideaBill.ResponseBillPartTransfer} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillPartTransfer, 11));
};


/** @param {?proto.mideaBill.ResponseBillPartTransfer|undefined} value */
proto.mideaBill.Response.prototype.setBillparttransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillparttransfer = function() {
  this.setBillparttransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillparttransfer = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ResponseBillTransferSign billTransferSign = 12;
 * @return {?proto.mideaBill.ResponseBillTransferSign}
 */
proto.mideaBill.Response.prototype.getBilltransfersign = function() {
  return /** @type{?proto.mideaBill.ResponseBillTransferSign} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillTransferSign, 12));
};


/** @param {?proto.mideaBill.ResponseBillTransferSign|undefined} value */
proto.mideaBill.Response.prototype.setBilltransfersign = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBilltransfersign = function() {
  this.setBilltransfersign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBilltransfersign = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ResponseBillTransferRefuse billTransferRefuse = 13;
 * @return {?proto.mideaBill.ResponseBillTransferRefuse}
 */
proto.mideaBill.Response.prototype.getBilltransferrefuse = function() {
  return /** @type{?proto.mideaBill.ResponseBillTransferRefuse} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillTransferRefuse, 13));
};


/** @param {?proto.mideaBill.ResponseBillTransferRefuse|undefined} value */
proto.mideaBill.Response.prototype.setBilltransferrefuse = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBilltransferrefuse = function() {
  this.setBilltransferrefuse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBilltransferrefuse = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ResponseBillTransferForcePay billTransferForcePay = 14;
 * @return {?proto.mideaBill.ResponseBillTransferForcePay}
 */
proto.mideaBill.Response.prototype.getBilltransferforcepay = function() {
  return /** @type{?proto.mideaBill.ResponseBillTransferForcePay} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillTransferForcePay, 14));
};


/** @param {?proto.mideaBill.ResponseBillTransferForcePay|undefined} value */
proto.mideaBill.Response.prototype.setBilltransferforcepay = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBilltransferforcepay = function() {
  this.setBilltransferforcepay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBilltransferforcepay = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ResponseBillTotalFinancing billTotalFinancing = 15;
 * @return {?proto.mideaBill.ResponseBillTotalFinancing}
 */
proto.mideaBill.Response.prototype.getBilltotalfinancing = function() {
  return /** @type{?proto.mideaBill.ResponseBillTotalFinancing} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillTotalFinancing, 15));
};


/** @param {?proto.mideaBill.ResponseBillTotalFinancing|undefined} value */
proto.mideaBill.Response.prototype.setBilltotalfinancing = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBilltotalfinancing = function() {
  this.setBilltotalfinancing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBilltotalfinancing = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ResponseBillPartFinancing billPartFinancing = 16;
 * @return {?proto.mideaBill.ResponseBillPartFinancing}
 */
proto.mideaBill.Response.prototype.getBillpartfinancing = function() {
  return /** @type{?proto.mideaBill.ResponseBillPartFinancing} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillPartFinancing, 16));
};


/** @param {?proto.mideaBill.ResponseBillPartFinancing|undefined} value */
proto.mideaBill.Response.prototype.setBillpartfinancing = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillpartfinancing = function() {
  this.setBillpartfinancing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillpartfinancing = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ResponseBillFinancingCheckOk billFinancingCheckOk = 17;
 * @return {?proto.mideaBill.ResponseBillFinancingCheckOk}
 */
proto.mideaBill.Response.prototype.getBillfinancingcheckok = function() {
  return /** @type{?proto.mideaBill.ResponseBillFinancingCheckOk} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillFinancingCheckOk, 17));
};


/** @param {?proto.mideaBill.ResponseBillFinancingCheckOk|undefined} value */
proto.mideaBill.Response.prototype.setBillfinancingcheckok = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillfinancingcheckok = function() {
  this.setBillfinancingcheckok(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillfinancingcheckok = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ResponseBillFinancingCheckFail billFinancingCheckFail = 18;
 * @return {?proto.mideaBill.ResponseBillFinancingCheckFail}
 */
proto.mideaBill.Response.prototype.getBillfinancingcheckfail = function() {
  return /** @type{?proto.mideaBill.ResponseBillFinancingCheckFail} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillFinancingCheckFail, 18));
};


/** @param {?proto.mideaBill.ResponseBillFinancingCheckFail|undefined} value */
proto.mideaBill.Response.prototype.setBillfinancingcheckfail = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillfinancingcheckfail = function() {
  this.setBillfinancingcheckfail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillfinancingcheckfail = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ResponseBillFinancingFail billFinancingFail = 19;
 * @return {?proto.mideaBill.ResponseBillFinancingFail}
 */
proto.mideaBill.Response.prototype.getBillfinancingfail = function() {
  return /** @type{?proto.mideaBill.ResponseBillFinancingFail} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillFinancingFail, 19));
};


/** @param {?proto.mideaBill.ResponseBillFinancingFail|undefined} value */
proto.mideaBill.Response.prototype.setBillfinancingfail = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillfinancingfail = function() {
  this.setBillfinancingfail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillfinancingfail = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ResponseBillPay billPay = 20;
 * @return {?proto.mideaBill.ResponseBillPay}
 */
proto.mideaBill.Response.prototype.getBillpay = function() {
  return /** @type{?proto.mideaBill.ResponseBillPay} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillPay, 20));
};


/** @param {?proto.mideaBill.ResponseBillPay|undefined} value */
proto.mideaBill.Response.prototype.setBillpay = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillpay = function() {
  this.setBillpay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillpay = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ResponseBillQuery billQuery = 21;
 * @return {?proto.mideaBill.ResponseBillQuery}
 */
proto.mideaBill.Response.prototype.getBillquery = function() {
  return /** @type{?proto.mideaBill.ResponseBillQuery} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.ResponseBillQuery, 21));
};


/** @param {?proto.mideaBill.ResponseBillQuery|undefined} value */
proto.mideaBill.Response.prototype.setBillquery = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.mideaBill.Response.oneofGroups_[0], value);
};


proto.mideaBill.Response.prototype.clearBillquery = function() {
  this.setBillquery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Response.prototype.hasBillquery = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseAddUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseAddUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseAddUser.displayName = 'proto.mideaBill.ResponseAddUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseAddUser.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseAddUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseAddUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseAddUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseAddUser}
 */
proto.mideaBill.ResponseAddUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseAddUser;
  return proto.mideaBill.ResponseAddUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseAddUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseAddUser}
 */
proto.mideaBill.ResponseAddUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseAddUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseAddUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseAddUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseAddUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseAddUser.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseAddUser.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseUserInfoModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseUserInfoModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseUserInfoModify.displayName = 'proto.mideaBill.ResponseUserInfoModify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseUserInfoModify.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseUserInfoModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseUserInfoModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseUserInfoModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseUserInfoModify}
 */
proto.mideaBill.ResponseUserInfoModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseUserInfoModify;
  return proto.mideaBill.ResponseUserInfoModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseUserInfoModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseUserInfoModify}
 */
proto.mideaBill.ResponseUserInfoModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseUserInfoModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseUserInfoModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseUserInfoModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseUserInfoModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseUserInfoModify.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseUserInfoModify.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseUserPwdModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseUserPwdModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseUserPwdModify.displayName = 'proto.mideaBill.ResponseUserPwdModify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseUserPwdModify.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseUserPwdModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseUserPwdModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseUserPwdModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseUserPwdModify}
 */
proto.mideaBill.ResponseUserPwdModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseUserPwdModify;
  return proto.mideaBill.ResponseUserPwdModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseUserPwdModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseUserPwdModify}
 */
proto.mideaBill.ResponseUserPwdModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseUserPwdModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseUserPwdModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseUserPwdModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseUserPwdModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseUserPwdModify.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseUserPwdModify.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseUserPwdReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseUserPwdReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseUserPwdReset.displayName = 'proto.mideaBill.ResponseUserPwdReset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseUserPwdReset.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseUserPwdReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseUserPwdReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseUserPwdReset.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseUserPwdReset}
 */
proto.mideaBill.ResponseUserPwdReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseUserPwdReset;
  return proto.mideaBill.ResponseUserPwdReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseUserPwdReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseUserPwdReset}
 */
proto.mideaBill.ResponseUserPwdReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseUserPwdReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseUserPwdReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseUserPwdReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseUserPwdReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseUserPwdReset.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseUserPwdReset.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseEntIdentifyCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseEntIdentifyCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseEntIdentifyCheck.displayName = 'proto.mideaBill.ResponseEntIdentifyCheck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseEntIdentifyCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseEntIdentifyCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseEntIdentifyCheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseEntIdentifyCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseEntIdentifyCheck}
 */
proto.mideaBill.ResponseEntIdentifyCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseEntIdentifyCheck;
  return proto.mideaBill.ResponseEntIdentifyCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseEntIdentifyCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseEntIdentifyCheck}
 */
proto.mideaBill.ResponseEntIdentifyCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseEntIdentifyCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseEntIdentifyCheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseEntIdentifyCheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseEntIdentifyCheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseEntIdentifyCheck.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseEntIdentifyCheck.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseEntInfoModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseEntInfoModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseEntInfoModify.displayName = 'proto.mideaBill.ResponseEntInfoModify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseEntInfoModify.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseEntInfoModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseEntInfoModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseEntInfoModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseEntInfoModify}
 */
proto.mideaBill.ResponseEntInfoModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseEntInfoModify;
  return proto.mideaBill.ResponseEntInfoModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseEntInfoModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseEntInfoModify}
 */
proto.mideaBill.ResponseEntInfoModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseEntInfoModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseEntInfoModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseEntInfoModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseEntInfoModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseEntInfoModify.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseEntInfoModify.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseApplyBill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseApplyBill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseApplyBill.displayName = 'proto.mideaBill.ResponseApplyBill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseApplyBill.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseApplyBill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseApplyBill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseApplyBill.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseApplyBill}
 */
proto.mideaBill.ResponseApplyBill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseApplyBill;
  return proto.mideaBill.ResponseApplyBill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseApplyBill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseApplyBill}
 */
proto.mideaBill.ResponseApplyBill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseApplyBill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseApplyBill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseApplyBill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseApplyBill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseApplyBill.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseApplyBill.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseApplyBillSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseApplyBillSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseApplyBillSign.displayName = 'proto.mideaBill.ResponseApplyBillSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseApplyBillSign.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseApplyBillSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseApplyBillSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseApplyBillSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseApplyBillSign}
 */
proto.mideaBill.ResponseApplyBillSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseApplyBillSign;
  return proto.mideaBill.ResponseApplyBillSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseApplyBillSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseApplyBillSign}
 */
proto.mideaBill.ResponseApplyBillSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseApplyBillSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseApplyBillSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseApplyBillSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseApplyBillSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseApplyBillSign.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseApplyBillSign.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseApplyBillSignRefuse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseApplyBillSignRefuse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseApplyBillSignRefuse.displayName = 'proto.mideaBill.ResponseApplyBillSignRefuse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseApplyBillSignRefuse.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseApplyBillSignRefuse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseApplyBillSignRefuse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseApplyBillSignRefuse.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseApplyBillSignRefuse}
 */
proto.mideaBill.ResponseApplyBillSignRefuse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseApplyBillSignRefuse;
  return proto.mideaBill.ResponseApplyBillSignRefuse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseApplyBillSignRefuse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseApplyBillSignRefuse}
 */
proto.mideaBill.ResponseApplyBillSignRefuse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseApplyBillSignRefuse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseApplyBillSignRefuse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseApplyBillSignRefuse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseApplyBillSignRefuse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseApplyBillSignRefuse.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseApplyBillSignRefuse.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillTotalTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillTotalTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillTotalTransfer.displayName = 'proto.mideaBill.ResponseBillTotalTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillTotalTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillTotalTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillTotalTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTotalTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillTotalTransfer}
 */
proto.mideaBill.ResponseBillTotalTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillTotalTransfer;
  return proto.mideaBill.ResponseBillTotalTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillTotalTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillTotalTransfer}
 */
proto.mideaBill.ResponseBillTotalTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillTotalTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillTotalTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillTotalTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTotalTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillTotalTransfer.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillTotalTransfer.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillPartTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillPartTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillPartTransfer.displayName = 'proto.mideaBill.ResponseBillPartTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillPartTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillPartTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillPartTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillPartTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillPartTransfer}
 */
proto.mideaBill.ResponseBillPartTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillPartTransfer;
  return proto.mideaBill.ResponseBillPartTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillPartTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillPartTransfer}
 */
proto.mideaBill.ResponseBillPartTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillPartTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillPartTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillPartTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillPartTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillPartTransfer.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillPartTransfer.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillTransferSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillTransferSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillTransferSign.displayName = 'proto.mideaBill.ResponseBillTransferSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillTransferSign.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillTransferSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillTransferSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTransferSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillTransferSign}
 */
proto.mideaBill.ResponseBillTransferSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillTransferSign;
  return proto.mideaBill.ResponseBillTransferSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillTransferSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillTransferSign}
 */
proto.mideaBill.ResponseBillTransferSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillTransferSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillTransferSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillTransferSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTransferSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillTransferSign.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillTransferSign.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillTransferRefuse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillTransferRefuse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillTransferRefuse.displayName = 'proto.mideaBill.ResponseBillTransferRefuse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillTransferRefuse.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillTransferRefuse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillTransferRefuse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTransferRefuse.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillTransferRefuse}
 */
proto.mideaBill.ResponseBillTransferRefuse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillTransferRefuse;
  return proto.mideaBill.ResponseBillTransferRefuse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillTransferRefuse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillTransferRefuse}
 */
proto.mideaBill.ResponseBillTransferRefuse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillTransferRefuse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillTransferRefuse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillTransferRefuse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTransferRefuse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillTransferRefuse.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillTransferRefuse.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillTransferForcePay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillTransferForcePay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillTransferForcePay.displayName = 'proto.mideaBill.ResponseBillTransferForcePay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillTransferForcePay.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillTransferForcePay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillTransferForcePay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTransferForcePay.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillTransferForcePay}
 */
proto.mideaBill.ResponseBillTransferForcePay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillTransferForcePay;
  return proto.mideaBill.ResponseBillTransferForcePay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillTransferForcePay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillTransferForcePay}
 */
proto.mideaBill.ResponseBillTransferForcePay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillTransferForcePay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillTransferForcePay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillTransferForcePay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTransferForcePay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillTransferForcePay.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillTransferForcePay.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillTotalFinancing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillTotalFinancing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillTotalFinancing.displayName = 'proto.mideaBill.ResponseBillTotalFinancing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillTotalFinancing.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillTotalFinancing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillTotalFinancing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTotalFinancing.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillTotalFinancing}
 */
proto.mideaBill.ResponseBillTotalFinancing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillTotalFinancing;
  return proto.mideaBill.ResponseBillTotalFinancing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillTotalFinancing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillTotalFinancing}
 */
proto.mideaBill.ResponseBillTotalFinancing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillTotalFinancing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillTotalFinancing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillTotalFinancing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillTotalFinancing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillTotalFinancing.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillTotalFinancing.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillPartFinancing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillPartFinancing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillPartFinancing.displayName = 'proto.mideaBill.ResponseBillPartFinancing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillPartFinancing.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillPartFinancing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillPartFinancing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillPartFinancing.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillPartFinancing}
 */
proto.mideaBill.ResponseBillPartFinancing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillPartFinancing;
  return proto.mideaBill.ResponseBillPartFinancing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillPartFinancing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillPartFinancing}
 */
proto.mideaBill.ResponseBillPartFinancing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillPartFinancing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillPartFinancing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillPartFinancing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillPartFinancing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillPartFinancing.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillPartFinancing.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillFinancingCheckOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillFinancingCheckOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillFinancingCheckOk.displayName = 'proto.mideaBill.ResponseBillFinancingCheckOk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillFinancingCheckOk.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillFinancingCheckOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillFinancingCheckOk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillFinancingCheckOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillFinancingCheckOk}
 */
proto.mideaBill.ResponseBillFinancingCheckOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillFinancingCheckOk;
  return proto.mideaBill.ResponseBillFinancingCheckOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillFinancingCheckOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillFinancingCheckOk}
 */
proto.mideaBill.ResponseBillFinancingCheckOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillFinancingCheckOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillFinancingCheckOk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillFinancingCheckOk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillFinancingCheckOk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillFinancingCheckOk.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillFinancingCheckOk.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillFinancingCheckFail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillFinancingCheckFail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillFinancingCheckFail.displayName = 'proto.mideaBill.ResponseBillFinancingCheckFail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillFinancingCheckFail.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillFinancingCheckFail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillFinancingCheckFail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillFinancingCheckFail.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillFinancingCheckFail}
 */
proto.mideaBill.ResponseBillFinancingCheckFail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillFinancingCheckFail;
  return proto.mideaBill.ResponseBillFinancingCheckFail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillFinancingCheckFail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillFinancingCheckFail}
 */
proto.mideaBill.ResponseBillFinancingCheckFail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillFinancingCheckFail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillFinancingCheckFail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillFinancingCheckFail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillFinancingCheckFail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillFinancingCheckFail.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillFinancingCheckFail.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillFinancingFail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillFinancingFail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillFinancingFail.displayName = 'proto.mideaBill.ResponseBillFinancingFail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillFinancingFail.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillFinancingFail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillFinancingFail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillFinancingFail.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillFinancingFail}
 */
proto.mideaBill.ResponseBillFinancingFail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillFinancingFail;
  return proto.mideaBill.ResponseBillFinancingFail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillFinancingFail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillFinancingFail}
 */
proto.mideaBill.ResponseBillFinancingFail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillFinancingFail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillFinancingFail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillFinancingFail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillFinancingFail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillFinancingFail.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillFinancingFail.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillPay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillPay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillPay.displayName = 'proto.mideaBill.ResponseBillPay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillPay.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillPay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillPay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillPay.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillPay}
 */
proto.mideaBill.ResponseBillPay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillPay;
  return proto.mideaBill.ResponseBillPay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillPay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillPay}
 */
proto.mideaBill.ResponseBillPay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillPay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillPay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillPay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillPay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillPay.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillPay.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.ResponseBillQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.ResponseBillQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.ResponseBillQuery.displayName = 'proto.mideaBill.ResponseBillQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.ResponseBillQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.ResponseBillQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.ResponseBillQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mideabill: (f = msg.getMideabill()) && proto.mideaBill.MideaBill.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.ResponseBillQuery}
 */
proto.mideaBill.ResponseBillQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.ResponseBillQuery;
  return proto.mideaBill.ResponseBillQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.ResponseBillQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.ResponseBillQuery}
 */
proto.mideaBill.ResponseBillQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.mideaBill.MideaBill;
      reader.readMessage(value,proto.mideaBill.MideaBill.deserializeBinaryFromReader);
      msg.setMideabill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.ResponseBillQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.ResponseBillQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.ResponseBillQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.ResponseBillQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMideabill();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mideaBill.MideaBill.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.mideaBill.ResponseBillQuery.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.ResponseBillQuery.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MideaBill mideaBill = 2;
 * @return {?proto.mideaBill.MideaBill}
 */
proto.mideaBill.ResponseBillQuery.prototype.getMideabill = function() {
  return /** @type{?proto.mideaBill.MideaBill} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.MideaBill, 2));
};


/** @param {?proto.mideaBill.MideaBill|undefined} value */
proto.mideaBill.ResponseBillQuery.prototype.setMideabill = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.mideaBill.ResponseBillQuery.prototype.clearMideabill = function() {
  this.setMideabill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.ResponseBillQuery.prototype.hasMideabill = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.Receipt.displayName = 'proto.mideaBill.Receipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    isok: jspb.Message.getFieldWithDefault(msg, 1, false),
    err: msg.getErr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.Receipt}
 */
proto.mideaBill.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.Receipt;
  return proto.mideaBill.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.Receipt}
 */
proto.mideaBill.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsok();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bool isOk = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.mideaBill.Receipt.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.mideaBill.Receipt.prototype.setIsok = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes err = 2;
 * @return {!(string|Uint8Array)}
 */
proto.mideaBill.Receipt.prototype.getErr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err = 2;
 * This is a type-conversion wrapper around `getErr()`
 * @return {string}
 */
proto.mideaBill.Receipt.prototype.getErr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErr()));
};


/**
 * optional bytes err = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErr()`
 * @return {!Uint8Array}
 */
proto.mideaBill.Receipt.prototype.getErr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErr()));
};


/** @param {!(string|Uint8Array)} value */
proto.mideaBill.Receipt.prototype.setErr = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mideaBill.Event.oneofGroups_);
};
goog.inherits(proto.mideaBill.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.Event.displayName = 'proto.mideaBill.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mideaBill.Event.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.mideaBill.Event.ValueCase = {
  VALUE_NOT_SET: 0,
  APPLYBILL: 1
};

/**
 * @return {proto.mideaBill.Event.ValueCase}
 */
proto.mideaBill.Event.prototype.getValueCase = function() {
  return /** @type {proto.mideaBill.Event.ValueCase} */(jspb.Message.computeOneofCase(this, proto.mideaBill.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    applybill: (f = msg.getApplybill()) && proto.mideaBill.EventApplyBill.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.Event}
 */
proto.mideaBill.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.Event;
  return proto.mideaBill.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.Event}
 */
proto.mideaBill.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mideaBill.EventApplyBill;
      reader.readMessage(value,proto.mideaBill.EventApplyBill.deserializeBinaryFromReader);
      msg.setApplybill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplybill();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mideaBill.EventApplyBill.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventApplyBill applyBill = 1;
 * @return {?proto.mideaBill.EventApplyBill}
 */
proto.mideaBill.Event.prototype.getApplybill = function() {
  return /** @type{?proto.mideaBill.EventApplyBill} */ (
    jspb.Message.getWrapperField(this, proto.mideaBill.EventApplyBill, 1));
};


/** @param {?proto.mideaBill.EventApplyBill|undefined} value */
proto.mideaBill.Event.prototype.setApplybill = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.mideaBill.Event.oneofGroups_[0], value);
};


proto.mideaBill.Event.prototype.clearApplybill = function() {
  this.setApplybill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mideaBill.Event.prototype.hasApplybill = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mideaBill.EventApplyBill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mideaBill.EventApplyBill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mideaBill.EventApplyBill.displayName = 'proto.mideaBill.EventApplyBill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mideaBill.EventApplyBill.prototype.toObject = function(opt_includeInstance) {
  return proto.mideaBill.EventApplyBill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mideaBill.EventApplyBill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.EventApplyBill.toObject = function(includeInstance, msg) {
  var f, obj = {
    useruid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mideaBill.EventApplyBill}
 */
proto.mideaBill.EventApplyBill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mideaBill.EventApplyBill;
  return proto.mideaBill.EventApplyBill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mideaBill.EventApplyBill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mideaBill.EventApplyBill}
 */
proto.mideaBill.EventApplyBill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUseruid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mideaBill.EventApplyBill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mideaBill.EventApplyBill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mideaBill.EventApplyBill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mideaBill.EventApplyBill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseruid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 userUid = 1;
 * @return {number}
 */
proto.mideaBill.EventApplyBill.prototype.getUseruid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mideaBill.EventApplyBill.prototype.setUseruid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.mideaBill.BillState = {
  BILLERROR: 0,
  BILLAPPLYWAITSIGN: 1,
  BILLCANCER: 2,
  BILLNORMALOWN: 3,
  BILLTRANSFERWAITSIGN: 4,
  BILLTRANSFEROK: 5,
  BILLFINANCINGWAITCHECK: 6,
  BILLFINANCINGOK: 7,
  BILLPAID: 8
};

/**
 * @enum {number}
 */
proto.mideaBill.MessageType = {
  MSGERROR: 0,
  MSGADDUSER: 1,
  MSGUSERINFOMODIFY: 2,
  MSGUSERPWDMODIFY: 3,
  MSGUSERPWDRESET: 4,
  MSGENTIDENTIFYCHECK: 5,
  MSGENTINFOMODIFY: 6,
  MSGAPPLYBILL: 7,
  MSGAPPLYBILLSIGN: 8,
  MSGAPPLYBILLSIGNREFUSE: 9,
  MSGBILLTOTALTRANSFER: 10,
  MSGBILLPARTTRANSFER: 11,
  MSGBILLTRANSFERSIGN: 12,
  MSGBILLTRANSFERREFUSE: 13,
  MSGBILLTRANSFERFORCEPAY: 14,
  MSGBILLTOTALFINANCING: 15,
  MSGBILLPARTFINANCING: 16,
  MSGBILLFINANCINGCHECKOK: 17,
  MSGBILLFINANCINGCHECKFAIL: 18,
  MSGBILLFINANCINGFAIL: 19,
  MSGBILLPAY: 20,
  MSGBILLQUERY: 21
};

goog.object.extend(exports, proto.mideaBill);
