// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package mideaBill is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		MideaBill
		UserInfo
		EntInfo
		Request
		RequestInitPlatform
		RequestAddManager
		RequestRegisterUser
		RequestAddUser
		RequestUserInfoModify
		RequestUserPwdModify
		RequestUserPwdReset
		RequestEntIdentifyCheck
		RequestEntInfoModify
		RequestApplyBill
		RequestApplyBillSign
		RequestApplyBillSignRefuse
		RequestApplyBillSignCancle
		RequestBillTotalTransfer
		SubTransferOrFinancing
		RequestBillPartTransfer
		RequestBillTransferSign
		RequestBillTransferRefuse
		RequestBillTransferCancle
		RequestBillTransferForcePay
		RequestBillTotalFinancing
		RequestBillPartFinancing
		RequestBillFinancingCheckOk
		RequestBillFinancingCheckFail
		RequestBillFinancingFail
		RequestBillPay
		RequestBillQuery
		Response
		ResponseInitPlatform
		ResponseAddManager
		ResponseRegisterUser
		ResponseAddUser
		ResponseUserInfoModify
		ResponseUserPwdModify
		ResponseUserPwdReset
		ResponseEntIdentifyCheck
		ResponseEntInfoModify
		ResponseApplyBill
		ResponseApplyBillSign
		ResponseApplyBillSignRefuse
		ResponseApplyBillSignCancle
		ResponseBillTotalTransfer
		ResponseBillPartTransfer
		ResponseBillTransferSign
		ResponseBillTransferRefuse
		ResponseBillTransferCancle
		ResponseBillTransferForcePay
		ResponseBillTotalFinancing
		ResponseBillPartFinancing
		ResponseBillFinancingCheckOk
		ResponseBillFinancingCheckFail
		ResponseBillFinancingFail
		ResponseBillPay
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 用户角色
type UserRole int32

const (
	UserRole_RoleError  UserRole = 0
	UserRole_SuperAdmin UserRole = 1
	UserRole_MideaAdmin UserRole = 2
	UserRole_EntAdmin   UserRole = 3
	UserRole_EntDeal    UserRole = 4
)

var UserRole_name = map[int32]string{
	0: "RoleError",
	1: "SuperAdmin",
	2: "MideaAdmin",
	3: "EntAdmin",
	4: "EntDeal",
}
var UserRole_value = map[string]int32{
	"RoleError":  0,
	"SuperAdmin": 1,
	"MideaAdmin": 2,
	"EntAdmin":   3,
	"EntDeal":    4,
}

func (x UserRole) String() string {
	return proto.EnumName(UserRole_name, int32(x))
}
func (UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

// 企业类型
type EntType int32

const (
	EntType_TypeError           EntType = 0
	EntType_MemberEnterprise    EntType = 1
	EntType_SupplyEnterprise    EntType = 2
	EntType_GuaranteeEnterprise EntType = 3
)

var EntType_name = map[int32]string{
	0: "TypeError",
	1: "MemberEnterprise",
	2: "SupplyEnterprise",
	3: "GuaranteeEnterprise",
}
var EntType_value = map[string]int32{
	"TypeError":           0,
	"MemberEnterprise":    1,
	"SupplyEnterprise":    2,
	"GuaranteeEnterprise": 3,
}

func (x EntType) String() string {
	return proto.EnumName(EntType_name, int32(x))
}
func (EntType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

// 票据状态
type BillState int32

const (
	BillState_BillError              BillState = 0
	BillState_BillApplyWaitSign      BillState = 1
	BillState_BillCancer             BillState = 2
	BillState_BillNormalOwn          BillState = 3
	BillState_BillTransferWaitSign   BillState = 4
	BillState_BillTransferOk         BillState = 5
	BillState_BillFinancingWaitCheck BillState = 6
	BillState_BillFinancingOk        BillState = 7
	BillState_BillPaid               BillState = 8
)

var BillState_name = map[int32]string{
	0: "BillError",
	1: "BillApplyWaitSign",
	2: "BillCancer",
	3: "BillNormalOwn",
	4: "BillTransferWaitSign",
	5: "BillTransferOk",
	6: "BillFinancingWaitCheck",
	7: "BillFinancingOk",
	8: "BillPaid",
}
var BillState_value = map[string]int32{
	"BillError":              0,
	"BillApplyWaitSign":      1,
	"BillCancer":             2,
	"BillNormalOwn":          3,
	"BillTransferWaitSign":   4,
	"BillTransferOk":         5,
	"BillFinancingWaitCheck": 6,
	"BillFinancingOk":        7,
	"BillPaid":               8,
}

func (x BillState) String() string {
	return proto.EnumName(BillState_name, int32(x))
}
func (BillState) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

// 消息类型
type MessageType int32

const (
	MessageType_MsgError                  MessageType = 0
	MessageType_MsgInitPlatform           MessageType = 1
	MessageType_MsgAddManager             MessageType = 2
	MessageType_MsgRegisterUser           MessageType = 3
	MessageType_MsgAddUser                MessageType = 4
	MessageType_MsgUserInfoModify         MessageType = 5
	MessageType_MsgUserPwdModify          MessageType = 6
	MessageType_MsgUserPwdReset           MessageType = 7
	MessageType_MsgEntIdentifyCheck       MessageType = 8
	MessageType_MsgEntInfoModify          MessageType = 9
	MessageType_MsgApplyBill              MessageType = 10
	MessageType_MsgApplyBillSign          MessageType = 11
	MessageType_MsgApplyBillSignRefuse    MessageType = 12
	MessageType_MsgApplyBillSignCancle    MessageType = 13
	MessageType_MsgBillTotalTransfer      MessageType = 14
	MessageType_MsgBillPartTransfer       MessageType = 15
	MessageType_MsgBillTransferSign       MessageType = 16
	MessageType_MsgBillTransferRefuse     MessageType = 17
	MessageType_MsgBillTransferCancle     MessageType = 18
	MessageType_MsgBillTransferForcePay   MessageType = 19
	MessageType_MsgBillTotalFinancing     MessageType = 20
	MessageType_MsgBillPartFinancing      MessageType = 21
	MessageType_MsgBillFinancingCheckOk   MessageType = 22
	MessageType_MsgBillFinancingCheckFail MessageType = 23
	MessageType_MsgBillFinancingFail      MessageType = 24
	MessageType_MsgBillPay                MessageType = 25
)

var MessageType_name = map[int32]string{
	0:  "MsgError",
	1:  "MsgInitPlatform",
	2:  "MsgAddManager",
	3:  "MsgRegisterUser",
	4:  "MsgAddUser",
	5:  "MsgUserInfoModify",
	6:  "MsgUserPwdModify",
	7:  "MsgUserPwdReset",
	8:  "MsgEntIdentifyCheck",
	9:  "MsgEntInfoModify",
	10: "MsgApplyBill",
	11: "MsgApplyBillSign",
	12: "MsgApplyBillSignRefuse",
	13: "MsgApplyBillSignCancle",
	14: "MsgBillTotalTransfer",
	15: "MsgBillPartTransfer",
	16: "MsgBillTransferSign",
	17: "MsgBillTransferRefuse",
	18: "MsgBillTransferCancle",
	19: "MsgBillTransferForcePay",
	20: "MsgBillTotalFinancing",
	21: "MsgBillPartFinancing",
	22: "MsgBillFinancingCheckOk",
	23: "MsgBillFinancingCheckFail",
	24: "MsgBillFinancingFail",
	25: "MsgBillPay",
}
var MessageType_value = map[string]int32{
	"MsgError":                  0,
	"MsgInitPlatform":           1,
	"MsgAddManager":             2,
	"MsgRegisterUser":           3,
	"MsgAddUser":                4,
	"MsgUserInfoModify":         5,
	"MsgUserPwdModify":          6,
	"MsgUserPwdReset":           7,
	"MsgEntIdentifyCheck":       8,
	"MsgEntInfoModify":          9,
	"MsgApplyBill":              10,
	"MsgApplyBillSign":          11,
	"MsgApplyBillSignRefuse":    12,
	"MsgApplyBillSignCancle":    13,
	"MsgBillTotalTransfer":      14,
	"MsgBillPartTransfer":       15,
	"MsgBillTransferSign":       16,
	"MsgBillTransferRefuse":     17,
	"MsgBillTransferCancle":     18,
	"MsgBillTransferForcePay":   19,
	"MsgBillTotalFinancing":     20,
	"MsgBillPartFinancing":      21,
	"MsgBillFinancingCheckOk":   22,
	"MsgBillFinancingCheckFail": 23,
	"MsgBillFinancingFail":      24,
	"MsgBillPay":                25,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

// 票据信息
type MideaBill struct {
	MideaDraftId          string    `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	MideaDraftAmount      int64     `protobuf:"varint,2,opt,name=mideaDraftAmount,proto3" json:"mideaDraftAmount,omitempty"`
	IssueBillDay          string    `protobuf:"bytes,3,opt,name=issueBillDay,proto3" json:"issueBillDay,omitempty"`
	ExpireDay             string    `protobuf:"bytes,4,opt,name=expireDay,proto3" json:"expireDay,omitempty"`
	IssueBillEntName      string    `protobuf:"bytes,5,opt,name=issueBillEntName,proto3" json:"issueBillEntName,omitempty"`
	IssueBillEntCode      string    `protobuf:"bytes,6,opt,name=issueBillEntCode,proto3" json:"issueBillEntCode,omitempty"`
	IssueBillPublicKey    []byte    `protobuf:"bytes,7,opt,name=issueBillPublicKey,proto3" json:"issueBillPublicKey,omitempty"`
	PayNum                string    `protobuf:"bytes,8,opt,name=payNum,proto3" json:"payNum,omitempty"`
	RecvBillEntName       string    `protobuf:"bytes,9,opt,name=recvBillEntName,proto3" json:"recvBillEntName,omitempty"`
	RecvBillEntCode       string    `protobuf:"bytes,10,opt,name=recvBillEntCode,proto3" json:"recvBillEntCode,omitempty"`
	RecvBillPublicKey     []byte    `protobuf:"bytes,11,opt,name=recvBillPublicKey,proto3" json:"recvBillPublicKey,omitempty"`
	WaitRecvBillEntName   string    `protobuf:"bytes,12,opt,name=waitRecvBillEntName,proto3" json:"waitRecvBillEntName,omitempty"`
	WaitRecvBillEntCode   string    `protobuf:"bytes,13,opt,name=waitRecvBillEntCode,proto3" json:"waitRecvBillEntCode,omitempty"`
	WaitRecvBillPublicKey []byte    `protobuf:"bytes,14,opt,name=waitRecvBillPublicKey,proto3" json:"waitRecvBillPublicKey,omitempty"`
	LastBillEntName       string    `protobuf:"bytes,15,opt,name=lastBillEntName,proto3" json:"lastBillEntName,omitempty"`
	LastBillEntCode       string    `protobuf:"bytes,16,opt,name=lastBillEntCode,proto3" json:"lastBillEntCode,omitempty"`
	LastBillPublicKey     []byte    `protobuf:"bytes,17,opt,name=lastBillPublicKey,proto3" json:"lastBillPublicKey,omitempty"`
	SignDay               string    `protobuf:"bytes,18,opt,name=signDay,proto3" json:"signDay,omitempty"`
	PayDay                string    `protobuf:"bytes,19,opt,name=payDay,proto3" json:"payDay,omitempty"`
	PreMideaDraftId       string    `protobuf:"bytes,20,opt,name=preMideaDraftId,proto3" json:"preMideaDraftId,omitempty"`
	NextMideaDraftId      []string  `protobuf:"bytes,21,rep,name=nextMideaDraftId" json:"nextMideaDraftId,omitempty"`
	BillState             BillState `protobuf:"varint,22,opt,name=billState,proto3,enum=mideaBill.BillState" json:"billState,omitempty"`
	CreateTime            string    `protobuf:"bytes,23,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            string    `protobuf:"bytes,24,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (m *MideaBill) Reset()                    { *m = MideaBill{} }
func (m *MideaBill) String() string            { return proto.CompactTextString(m) }
func (*MideaBill) ProtoMessage()               {}
func (*MideaBill) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *MideaBill) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *MideaBill) GetMideaDraftAmount() int64 {
	if m != nil {
		return m.MideaDraftAmount
	}
	return 0
}

func (m *MideaBill) GetIssueBillDay() string {
	if m != nil {
		return m.IssueBillDay
	}
	return ""
}

func (m *MideaBill) GetExpireDay() string {
	if m != nil {
		return m.ExpireDay
	}
	return ""
}

func (m *MideaBill) GetIssueBillEntName() string {
	if m != nil {
		return m.IssueBillEntName
	}
	return ""
}

func (m *MideaBill) GetIssueBillEntCode() string {
	if m != nil {
		return m.IssueBillEntCode
	}
	return ""
}

func (m *MideaBill) GetIssueBillPublicKey() []byte {
	if m != nil {
		return m.IssueBillPublicKey
	}
	return nil
}

func (m *MideaBill) GetPayNum() string {
	if m != nil {
		return m.PayNum
	}
	return ""
}

func (m *MideaBill) GetRecvBillEntName() string {
	if m != nil {
		return m.RecvBillEntName
	}
	return ""
}

func (m *MideaBill) GetRecvBillEntCode() string {
	if m != nil {
		return m.RecvBillEntCode
	}
	return ""
}

func (m *MideaBill) GetRecvBillPublicKey() []byte {
	if m != nil {
		return m.RecvBillPublicKey
	}
	return nil
}

func (m *MideaBill) GetWaitRecvBillEntName() string {
	if m != nil {
		return m.WaitRecvBillEntName
	}
	return ""
}

func (m *MideaBill) GetWaitRecvBillEntCode() string {
	if m != nil {
		return m.WaitRecvBillEntCode
	}
	return ""
}

func (m *MideaBill) GetWaitRecvBillPublicKey() []byte {
	if m != nil {
		return m.WaitRecvBillPublicKey
	}
	return nil
}

func (m *MideaBill) GetLastBillEntName() string {
	if m != nil {
		return m.LastBillEntName
	}
	return ""
}

func (m *MideaBill) GetLastBillEntCode() string {
	if m != nil {
		return m.LastBillEntCode
	}
	return ""
}

func (m *MideaBill) GetLastBillPublicKey() []byte {
	if m != nil {
		return m.LastBillPublicKey
	}
	return nil
}

func (m *MideaBill) GetSignDay() string {
	if m != nil {
		return m.SignDay
	}
	return ""
}

func (m *MideaBill) GetPayDay() string {
	if m != nil {
		return m.PayDay
	}
	return ""
}

func (m *MideaBill) GetPreMideaDraftId() string {
	if m != nil {
		return m.PreMideaDraftId
	}
	return ""
}

func (m *MideaBill) GetNextMideaDraftId() []string {
	if m != nil {
		return m.NextMideaDraftId
	}
	return nil
}

func (m *MideaBill) GetBillState() BillState {
	if m != nil {
		return m.BillState
	}
	return BillState_BillError
}

func (m *MideaBill) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *MideaBill) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

// 用户信息
type UserInfo struct {
	UserName          string   `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	UserRole          UserRole `protobuf:"varint,2,opt,name=userRole,proto3,enum=mideaBill.UserRole" json:"userRole,omitempty"`
	ContactName       string   `protobuf:"bytes,3,opt,name=contactName,proto3" json:"contactName,omitempty"`
	UserPublicKey     []byte   `protobuf:"bytes,5,opt,name=userPublicKey,proto3" json:"userPublicKey,omitempty"`
	UserPublicKeyList [][]byte `protobuf:"bytes,6,rep,name=userPublicKeyList" json:"userPublicKeyList,omitempty"`
	EntName           string   `protobuf:"bytes,7,opt,name=entName,proto3" json:"entName,omitempty"`
	EntCode           string   `protobuf:"bytes,8,opt,name=entCode,proto3" json:"entCode,omitempty"`
	EntPublicKey      []byte   `protobuf:"bytes,9,opt,name=entPublicKey,proto3" json:"entPublicKey,omitempty"`
	CreateTime        string   `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        string   `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetUserRole() UserRole {
	if m != nil {
		return m.UserRole
	}
	return UserRole_RoleError
}

func (m *UserInfo) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *UserInfo) GetUserPublicKey() []byte {
	if m != nil {
		return m.UserPublicKey
	}
	return nil
}

func (m *UserInfo) GetUserPublicKeyList() [][]byte {
	if m != nil {
		return m.UserPublicKeyList
	}
	return nil
}

func (m *UserInfo) GetEntName() string {
	if m != nil {
		return m.EntName
	}
	return ""
}

func (m *UserInfo) GetEntCode() string {
	if m != nil {
		return m.EntCode
	}
	return ""
}

func (m *UserInfo) GetEntPublicKey() []byte {
	if m != nil {
		return m.EntPublicKey
	}
	return nil
}

func (m *UserInfo) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *UserInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

// 企业信息
type EntInfo struct {
	EntCode      string  `protobuf:"bytes,1,opt,name=entCode,proto3" json:"entCode,omitempty"`
	EntName      string  `protobuf:"bytes,2,opt,name=entName,proto3" json:"entName,omitempty"`
	EntPublicKey []byte  `protobuf:"bytes,3,opt,name=entPublicKey,proto3" json:"entPublicKey,omitempty"`
	EntType      EntType `protobuf:"varint,4,opt,name=entType,proto3,enum=mideaBill.EntType" json:"entType,omitempty"`
	CreateTime   string  `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string  `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (m *EntInfo) Reset()                    { *m = EntInfo{} }
func (m *EntInfo) String() string            { return proto.CompactTextString(m) }
func (*EntInfo) ProtoMessage()               {}
func (*EntInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *EntInfo) GetEntCode() string {
	if m != nil {
		return m.EntCode
	}
	return ""
}

func (m *EntInfo) GetEntName() string {
	if m != nil {
		return m.EntName
	}
	return ""
}

func (m *EntInfo) GetEntPublicKey() []byte {
	if m != nil {
		return m.EntPublicKey
	}
	return nil
}

func (m *EntInfo) GetEntType() EntType {
	if m != nil {
		return m.EntType
	}
	return EntType_TypeError
}

func (m *EntInfo) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *EntInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

// 请求
type Request struct {
	// Types that are valid to be assigned to Value:
	//	*Request_InitPlatform
	//	*Request_AddManager
	//	*Request_RegisterUser
	//	*Request_AddUser
	//	*Request_UserInfoModify
	//	*Request_UserPwdModify
	//	*Request_UserPwdReset
	//	*Request_EntIdentifyCheck
	//	*Request_EntInfoModify
	//	*Request_ApplyBill
	//	*Request_ApplyBillSign
	//	*Request_ApplyBillSignRefuse
	//	*Request_ApplyBillSignCancle
	//	*Request_BillTotalTransfer
	//	*Request_BillPartTransfer
	//	*Request_BillTransferSign
	//	*Request_BillTransferRefuse
	//	*Request_BillTransferCancle
	//	*Request_BillTransferForcePay
	//	*Request_BillTotalFinancing
	//	*Request_BillPartFinancing
	//	*Request_BillFinancingCheckOk
	//	*Request_BillFinancingCheckFail
	//	*Request_BillFinancingFail
	//	*Request_BillPay
	Value         isRequest_Value `protobuf_oneof:"value"`
	UserName      string          `protobuf:"bytes,26,opt,name=userName,proto3" json:"userName,omitempty"`
	InstructionId int64           `protobuf:"varint,27,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Pubkey        []byte          `protobuf:"bytes,28,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Sign          []byte          `protobuf:"bytes,29,opt,name=sign,proto3" json:"sign,omitempty"`
	ActionId      MessageType     `protobuf:"varint,30,opt,name=actionId,proto3,enum=mideaBill.MessageType" json:"actionId,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type isRequest_Value interface {
	isRequest_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_InitPlatform struct {
	InitPlatform *RequestInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Request_AddManager struct {
	AddManager *RequestAddManager `protobuf:"bytes,2,opt,name=addManager,oneof"`
}
type Request_RegisterUser struct {
	RegisterUser *RequestRegisterUser `protobuf:"bytes,3,opt,name=registerUser,oneof"`
}
type Request_AddUser struct {
	AddUser *RequestAddUser `protobuf:"bytes,4,opt,name=addUser,oneof"`
}
type Request_UserInfoModify struct {
	UserInfoModify *RequestUserInfoModify `protobuf:"bytes,5,opt,name=userInfoModify,oneof"`
}
type Request_UserPwdModify struct {
	UserPwdModify *RequestUserPwdModify `protobuf:"bytes,6,opt,name=userPwdModify,oneof"`
}
type Request_UserPwdReset struct {
	UserPwdReset *RequestUserPwdReset `protobuf:"bytes,7,opt,name=userPwdReset,oneof"`
}
type Request_EntIdentifyCheck struct {
	EntIdentifyCheck *RequestEntIdentifyCheck `protobuf:"bytes,8,opt,name=entIdentifyCheck,oneof"`
}
type Request_EntInfoModify struct {
	EntInfoModify *RequestEntInfoModify `protobuf:"bytes,9,opt,name=entInfoModify,oneof"`
}
type Request_ApplyBill struct {
	ApplyBill *RequestApplyBill `protobuf:"bytes,10,opt,name=applyBill,oneof"`
}
type Request_ApplyBillSign struct {
	ApplyBillSign *RequestApplyBillSign `protobuf:"bytes,11,opt,name=applyBillSign,oneof"`
}
type Request_ApplyBillSignRefuse struct {
	ApplyBillSignRefuse *RequestApplyBillSignRefuse `protobuf:"bytes,12,opt,name=applyBillSignRefuse,oneof"`
}
type Request_ApplyBillSignCancle struct {
	ApplyBillSignCancle *RequestApplyBillSignCancle `protobuf:"bytes,13,opt,name=applyBillSignCancle,oneof"`
}
type Request_BillTotalTransfer struct {
	BillTotalTransfer *RequestBillTotalTransfer `protobuf:"bytes,14,opt,name=billTotalTransfer,oneof"`
}
type Request_BillPartTransfer struct {
	BillPartTransfer *RequestBillPartTransfer `protobuf:"bytes,15,opt,name=billPartTransfer,oneof"`
}
type Request_BillTransferSign struct {
	BillTransferSign *RequestBillTransferSign `protobuf:"bytes,16,opt,name=billTransferSign,oneof"`
}
type Request_BillTransferRefuse struct {
	BillTransferRefuse *RequestBillTransferRefuse `protobuf:"bytes,17,opt,name=billTransferRefuse,oneof"`
}
type Request_BillTransferCancle struct {
	BillTransferCancle *RequestBillTransferCancle `protobuf:"bytes,18,opt,name=billTransferCancle,oneof"`
}
type Request_BillTransferForcePay struct {
	BillTransferForcePay *RequestBillTransferForcePay `protobuf:"bytes,19,opt,name=billTransferForcePay,oneof"`
}
type Request_BillTotalFinancing struct {
	BillTotalFinancing *RequestBillTotalFinancing `protobuf:"bytes,20,opt,name=billTotalFinancing,oneof"`
}
type Request_BillPartFinancing struct {
	BillPartFinancing *RequestBillPartFinancing `protobuf:"bytes,21,opt,name=billPartFinancing,oneof"`
}
type Request_BillFinancingCheckOk struct {
	BillFinancingCheckOk *RequestBillFinancingCheckOk `protobuf:"bytes,22,opt,name=billFinancingCheckOk,oneof"`
}
type Request_BillFinancingCheckFail struct {
	BillFinancingCheckFail *RequestBillFinancingCheckFail `protobuf:"bytes,23,opt,name=billFinancingCheckFail,oneof"`
}
type Request_BillFinancingFail struct {
	BillFinancingFail *RequestBillFinancingFail `protobuf:"bytes,24,opt,name=billFinancingFail,oneof"`
}
type Request_BillPay struct {
	BillPay *RequestBillPay `protobuf:"bytes,25,opt,name=billPay,oneof"`
}

func (*Request_InitPlatform) isRequest_Value()           {}
func (*Request_AddManager) isRequest_Value()             {}
func (*Request_RegisterUser) isRequest_Value()           {}
func (*Request_AddUser) isRequest_Value()                {}
func (*Request_UserInfoModify) isRequest_Value()         {}
func (*Request_UserPwdModify) isRequest_Value()          {}
func (*Request_UserPwdReset) isRequest_Value()           {}
func (*Request_EntIdentifyCheck) isRequest_Value()       {}
func (*Request_EntInfoModify) isRequest_Value()          {}
func (*Request_ApplyBill) isRequest_Value()              {}
func (*Request_ApplyBillSign) isRequest_Value()          {}
func (*Request_ApplyBillSignRefuse) isRequest_Value()    {}
func (*Request_ApplyBillSignCancle) isRequest_Value()    {}
func (*Request_BillTotalTransfer) isRequest_Value()      {}
func (*Request_BillPartTransfer) isRequest_Value()       {}
func (*Request_BillTransferSign) isRequest_Value()       {}
func (*Request_BillTransferRefuse) isRequest_Value()     {}
func (*Request_BillTransferCancle) isRequest_Value()     {}
func (*Request_BillTransferForcePay) isRequest_Value()   {}
func (*Request_BillTotalFinancing) isRequest_Value()     {}
func (*Request_BillPartFinancing) isRequest_Value()      {}
func (*Request_BillFinancingCheckOk) isRequest_Value()   {}
func (*Request_BillFinancingCheckFail) isRequest_Value() {}
func (*Request_BillFinancingFail) isRequest_Value()      {}
func (*Request_BillPay) isRequest_Value()                {}

func (m *Request) GetValue() isRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Request) GetInitPlatform() *RequestInitPlatform {
	if x, ok := m.GetValue().(*Request_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Request) GetAddManager() *RequestAddManager {
	if x, ok := m.GetValue().(*Request_AddManager); ok {
		return x.AddManager
	}
	return nil
}

func (m *Request) GetRegisterUser() *RequestRegisterUser {
	if x, ok := m.GetValue().(*Request_RegisterUser); ok {
		return x.RegisterUser
	}
	return nil
}

func (m *Request) GetAddUser() *RequestAddUser {
	if x, ok := m.GetValue().(*Request_AddUser); ok {
		return x.AddUser
	}
	return nil
}

func (m *Request) GetUserInfoModify() *RequestUserInfoModify {
	if x, ok := m.GetValue().(*Request_UserInfoModify); ok {
		return x.UserInfoModify
	}
	return nil
}

func (m *Request) GetUserPwdModify() *RequestUserPwdModify {
	if x, ok := m.GetValue().(*Request_UserPwdModify); ok {
		return x.UserPwdModify
	}
	return nil
}

func (m *Request) GetUserPwdReset() *RequestUserPwdReset {
	if x, ok := m.GetValue().(*Request_UserPwdReset); ok {
		return x.UserPwdReset
	}
	return nil
}

func (m *Request) GetEntIdentifyCheck() *RequestEntIdentifyCheck {
	if x, ok := m.GetValue().(*Request_EntIdentifyCheck); ok {
		return x.EntIdentifyCheck
	}
	return nil
}

func (m *Request) GetEntInfoModify() *RequestEntInfoModify {
	if x, ok := m.GetValue().(*Request_EntInfoModify); ok {
		return x.EntInfoModify
	}
	return nil
}

func (m *Request) GetApplyBill() *RequestApplyBill {
	if x, ok := m.GetValue().(*Request_ApplyBill); ok {
		return x.ApplyBill
	}
	return nil
}

func (m *Request) GetApplyBillSign() *RequestApplyBillSign {
	if x, ok := m.GetValue().(*Request_ApplyBillSign); ok {
		return x.ApplyBillSign
	}
	return nil
}

func (m *Request) GetApplyBillSignRefuse() *RequestApplyBillSignRefuse {
	if x, ok := m.GetValue().(*Request_ApplyBillSignRefuse); ok {
		return x.ApplyBillSignRefuse
	}
	return nil
}

func (m *Request) GetApplyBillSignCancle() *RequestApplyBillSignCancle {
	if x, ok := m.GetValue().(*Request_ApplyBillSignCancle); ok {
		return x.ApplyBillSignCancle
	}
	return nil
}

func (m *Request) GetBillTotalTransfer() *RequestBillTotalTransfer {
	if x, ok := m.GetValue().(*Request_BillTotalTransfer); ok {
		return x.BillTotalTransfer
	}
	return nil
}

func (m *Request) GetBillPartTransfer() *RequestBillPartTransfer {
	if x, ok := m.GetValue().(*Request_BillPartTransfer); ok {
		return x.BillPartTransfer
	}
	return nil
}

func (m *Request) GetBillTransferSign() *RequestBillTransferSign {
	if x, ok := m.GetValue().(*Request_BillTransferSign); ok {
		return x.BillTransferSign
	}
	return nil
}

func (m *Request) GetBillTransferRefuse() *RequestBillTransferRefuse {
	if x, ok := m.GetValue().(*Request_BillTransferRefuse); ok {
		return x.BillTransferRefuse
	}
	return nil
}

func (m *Request) GetBillTransferCancle() *RequestBillTransferCancle {
	if x, ok := m.GetValue().(*Request_BillTransferCancle); ok {
		return x.BillTransferCancle
	}
	return nil
}

func (m *Request) GetBillTransferForcePay() *RequestBillTransferForcePay {
	if x, ok := m.GetValue().(*Request_BillTransferForcePay); ok {
		return x.BillTransferForcePay
	}
	return nil
}

func (m *Request) GetBillTotalFinancing() *RequestBillTotalFinancing {
	if x, ok := m.GetValue().(*Request_BillTotalFinancing); ok {
		return x.BillTotalFinancing
	}
	return nil
}

func (m *Request) GetBillPartFinancing() *RequestBillPartFinancing {
	if x, ok := m.GetValue().(*Request_BillPartFinancing); ok {
		return x.BillPartFinancing
	}
	return nil
}

func (m *Request) GetBillFinancingCheckOk() *RequestBillFinancingCheckOk {
	if x, ok := m.GetValue().(*Request_BillFinancingCheckOk); ok {
		return x.BillFinancingCheckOk
	}
	return nil
}

func (m *Request) GetBillFinancingCheckFail() *RequestBillFinancingCheckFail {
	if x, ok := m.GetValue().(*Request_BillFinancingCheckFail); ok {
		return x.BillFinancingCheckFail
	}
	return nil
}

func (m *Request) GetBillFinancingFail() *RequestBillFinancingFail {
	if x, ok := m.GetValue().(*Request_BillFinancingFail); ok {
		return x.BillFinancingFail
	}
	return nil
}

func (m *Request) GetBillPay() *RequestBillPay {
	if x, ok := m.GetValue().(*Request_BillPay); ok {
		return x.BillPay
	}
	return nil
}

func (m *Request) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Request) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *Request) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Request) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Request) GetActionId() MessageType {
	if m != nil {
		return m.ActionId
	}
	return MessageType_MsgError
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_InitPlatform)(nil),
		(*Request_AddManager)(nil),
		(*Request_RegisterUser)(nil),
		(*Request_AddUser)(nil),
		(*Request_UserInfoModify)(nil),
		(*Request_UserPwdModify)(nil),
		(*Request_UserPwdReset)(nil),
		(*Request_EntIdentifyCheck)(nil),
		(*Request_EntInfoModify)(nil),
		(*Request_ApplyBill)(nil),
		(*Request_ApplyBillSign)(nil),
		(*Request_ApplyBillSignRefuse)(nil),
		(*Request_ApplyBillSignCancle)(nil),
		(*Request_BillTotalTransfer)(nil),
		(*Request_BillPartTransfer)(nil),
		(*Request_BillTransferSign)(nil),
		(*Request_BillTransferRefuse)(nil),
		(*Request_BillTransferCancle)(nil),
		(*Request_BillTransferForcePay)(nil),
		(*Request_BillTotalFinancing)(nil),
		(*Request_BillPartFinancing)(nil),
		(*Request_BillFinancingCheckOk)(nil),
		(*Request_BillFinancingCheckFail)(nil),
		(*Request_BillFinancingFail)(nil),
		(*Request_BillPay)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Request_AddManager:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddManager); err != nil {
			return err
		}
	case *Request_RegisterUser:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterUser); err != nil {
			return err
		}
	case *Request_AddUser:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddUser); err != nil {
			return err
		}
	case *Request_UserInfoModify:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserInfoModify); err != nil {
			return err
		}
	case *Request_UserPwdModify:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserPwdModify); err != nil {
			return err
		}
	case *Request_UserPwdReset:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserPwdReset); err != nil {
			return err
		}
	case *Request_EntIdentifyCheck:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntIdentifyCheck); err != nil {
			return err
		}
	case *Request_EntInfoModify:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntInfoModify); err != nil {
			return err
		}
	case *Request_ApplyBill:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBill); err != nil {
			return err
		}
	case *Request_ApplyBillSign:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBillSign); err != nil {
			return err
		}
	case *Request_ApplyBillSignRefuse:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBillSignRefuse); err != nil {
			return err
		}
	case *Request_ApplyBillSignCancle:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBillSignCancle); err != nil {
			return err
		}
	case *Request_BillTotalTransfer:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTotalTransfer); err != nil {
			return err
		}
	case *Request_BillPartTransfer:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillPartTransfer); err != nil {
			return err
		}
	case *Request_BillTransferSign:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferSign); err != nil {
			return err
		}
	case *Request_BillTransferRefuse:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferRefuse); err != nil {
			return err
		}
	case *Request_BillTransferCancle:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferCancle); err != nil {
			return err
		}
	case *Request_BillTransferForcePay:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferForcePay); err != nil {
			return err
		}
	case *Request_BillTotalFinancing:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTotalFinancing); err != nil {
			return err
		}
	case *Request_BillPartFinancing:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillPartFinancing); err != nil {
			return err
		}
	case *Request_BillFinancingCheckOk:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillFinancingCheckOk); err != nil {
			return err
		}
	case *Request_BillFinancingCheckFail:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillFinancingCheckFail); err != nil {
			return err
		}
	case *Request_BillFinancingFail:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillFinancingFail); err != nil {
			return err
		}
	case *Request_BillPay:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillPay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Value has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Request_InitPlatform{msg}
		return true, err
	case 2: // value.addManager
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAddManager)
		err := b.DecodeMessage(msg)
		m.Value = &Request_AddManager{msg}
		return true, err
	case 3: // value.registerUser
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestRegisterUser)
		err := b.DecodeMessage(msg)
		m.Value = &Request_RegisterUser{msg}
		return true, err
	case 4: // value.addUser
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAddUser)
		err := b.DecodeMessage(msg)
		m.Value = &Request_AddUser{msg}
		return true, err
	case 5: // value.userInfoModify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestUserInfoModify)
		err := b.DecodeMessage(msg)
		m.Value = &Request_UserInfoModify{msg}
		return true, err
	case 6: // value.userPwdModify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestUserPwdModify)
		err := b.DecodeMessage(msg)
		m.Value = &Request_UserPwdModify{msg}
		return true, err
	case 7: // value.userPwdReset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestUserPwdReset)
		err := b.DecodeMessage(msg)
		m.Value = &Request_UserPwdReset{msg}
		return true, err
	case 8: // value.entIdentifyCheck
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestEntIdentifyCheck)
		err := b.DecodeMessage(msg)
		m.Value = &Request_EntIdentifyCheck{msg}
		return true, err
	case 9: // value.entInfoModify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestEntInfoModify)
		err := b.DecodeMessage(msg)
		m.Value = &Request_EntInfoModify{msg}
		return true, err
	case 10: // value.applyBill
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestApplyBill)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ApplyBill{msg}
		return true, err
	case 11: // value.applyBillSign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestApplyBillSign)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ApplyBillSign{msg}
		return true, err
	case 12: // value.applyBillSignRefuse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestApplyBillSignRefuse)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ApplyBillSignRefuse{msg}
		return true, err
	case 13: // value.applyBillSignCancle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestApplyBillSignCancle)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ApplyBillSignCancle{msg}
		return true, err
	case 14: // value.billTotalTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillTotalTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillTotalTransfer{msg}
		return true, err
	case 15: // value.billPartTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillPartTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillPartTransfer{msg}
		return true, err
	case 16: // value.billTransferSign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillTransferSign)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillTransferSign{msg}
		return true, err
	case 17: // value.billTransferRefuse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillTransferRefuse)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillTransferRefuse{msg}
		return true, err
	case 18: // value.billTransferCancle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillTransferCancle)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillTransferCancle{msg}
		return true, err
	case 19: // value.billTransferForcePay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillTransferForcePay)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillTransferForcePay{msg}
		return true, err
	case 20: // value.billTotalFinancing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillTotalFinancing)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillTotalFinancing{msg}
		return true, err
	case 21: // value.billPartFinancing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillPartFinancing)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillPartFinancing{msg}
		return true, err
	case 22: // value.billFinancingCheckOk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillFinancingCheckOk)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillFinancingCheckOk{msg}
		return true, err
	case 23: // value.billFinancingCheckFail
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillFinancingCheckFail)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillFinancingCheckFail{msg}
		return true, err
	case 24: // value.billFinancingFail
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillFinancingFail)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillFinancingFail{msg}
		return true, err
	case 25: // value.billPay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBillPay)
		err := b.DecodeMessage(msg)
		m.Value = &Request_BillPay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_AddManager:
		s := proto.Size(x.AddManager)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RegisterUser:
		s := proto.Size(x.RegisterUser)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_AddUser:
		s := proto.Size(x.AddUser)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_UserInfoModify:
		s := proto.Size(x.UserInfoModify)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_UserPwdModify:
		s := proto.Size(x.UserPwdModify)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_UserPwdReset:
		s := proto.Size(x.UserPwdReset)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_EntIdentifyCheck:
		s := proto.Size(x.EntIdentifyCheck)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_EntInfoModify:
		s := proto.Size(x.EntInfoModify)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ApplyBill:
		s := proto.Size(x.ApplyBill)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ApplyBillSign:
		s := proto.Size(x.ApplyBillSign)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ApplyBillSignRefuse:
		s := proto.Size(x.ApplyBillSignRefuse)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ApplyBillSignCancle:
		s := proto.Size(x.ApplyBillSignCancle)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillTotalTransfer:
		s := proto.Size(x.BillTotalTransfer)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillPartTransfer:
		s := proto.Size(x.BillPartTransfer)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillTransferSign:
		s := proto.Size(x.BillTransferSign)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillTransferRefuse:
		s := proto.Size(x.BillTransferRefuse)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillTransferCancle:
		s := proto.Size(x.BillTransferCancle)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillTransferForcePay:
		s := proto.Size(x.BillTransferForcePay)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillTotalFinancing:
		s := proto.Size(x.BillTotalFinancing)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillPartFinancing:
		s := proto.Size(x.BillPartFinancing)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillFinancingCheckOk:
		s := proto.Size(x.BillFinancingCheckOk)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillFinancingCheckFail:
		s := proto.Size(x.BillFinancingCheckFail)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillFinancingFail:
		s := proto.Size(x.BillFinancingFail)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BillPay:
		s := proto.Size(x.BillPay)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 初始化平台
type RequestInitPlatform struct {
}

func (m *RequestInitPlatform) Reset()                    { *m = RequestInitPlatform{} }
func (m *RequestInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*RequestInitPlatform) ProtoMessage()               {}
func (*RequestInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

// 添加运营管理员
type RequestAddManager struct {
	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	// UserRole userRole    = 2;     // 用户角色        运营管理员--MideaAdmin
	UserPublicKey []byte `protobuf:"bytes,3,opt,name=userPublicKey,proto3" json:"userPublicKey,omitempty"`
	ContactName   string `protobuf:"bytes,4,opt,name=contactName,proto3" json:"contactName,omitempty"`
	Operator      string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *RequestAddManager) Reset()                    { *m = RequestAddManager{} }
func (m *RequestAddManager) String() string            { return proto.CompactTextString(m) }
func (*RequestAddManager) ProtoMessage()               {}
func (*RequestAddManager) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *RequestAddManager) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RequestAddManager) GetUserPublicKey() []byte {
	if m != nil {
		return m.UserPublicKey
	}
	return nil
}

func (m *RequestAddManager) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *RequestAddManager) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// 企业管理员注册
type RequestRegisterUser struct {
	EntCode     string `protobuf:"bytes,1,opt,name=entCode,proto3" json:"entCode,omitempty"`
	ContactName string `protobuf:"bytes,2,opt,name=contactName,proto3" json:"contactName,omitempty"`
}

func (m *RequestRegisterUser) Reset()                    { *m = RequestRegisterUser{} }
func (m *RequestRegisterUser) String() string            { return proto.CompactTextString(m) }
func (*RequestRegisterUser) ProtoMessage()               {}
func (*RequestRegisterUser) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *RequestRegisterUser) GetEntCode() string {
	if m != nil {
		return m.EntCode
	}
	return ""
}

func (m *RequestRegisterUser) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

// 添加用户
type RequestAddUser struct {
	UserName      string   `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	UserRole      UserRole `protobuf:"varint,2,opt,name=userRole,proto3,enum=mideaBill.UserRole" json:"userRole,omitempty"`
	UserPublicKey []byte   `protobuf:"bytes,3,opt,name=userPublicKey,proto3" json:"userPublicKey,omitempty"`
	ContactName   string   `protobuf:"bytes,4,opt,name=contactName,proto3" json:"contactName,omitempty"`
	Operator      string   `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *RequestAddUser) Reset()                    { *m = RequestAddUser{} }
func (m *RequestAddUser) String() string            { return proto.CompactTextString(m) }
func (*RequestAddUser) ProtoMessage()               {}
func (*RequestAddUser) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *RequestAddUser) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RequestAddUser) GetUserRole() UserRole {
	if m != nil {
		return m.UserRole
	}
	return UserRole_RoleError
}

func (m *RequestAddUser) GetUserPublicKey() []byte {
	if m != nil {
		return m.UserPublicKey
	}
	return nil
}

func (m *RequestAddUser) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *RequestAddUser) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// 用户信息修改
type RequestUserInfoModify struct {
	UserRole    UserRole `protobuf:"varint,1,opt,name=userRole,proto3,enum=mideaBill.UserRole" json:"userRole,omitempty"`
	ContactName string   `protobuf:"bytes,2,opt,name=contactName,proto3" json:"contactName,omitempty"`
}

func (m *RequestUserInfoModify) Reset()                    { *m = RequestUserInfoModify{} }
func (m *RequestUserInfoModify) String() string            { return proto.CompactTextString(m) }
func (*RequestUserInfoModify) ProtoMessage()               {}
func (*RequestUserInfoModify) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *RequestUserInfoModify) GetUserRole() UserRole {
	if m != nil {
		return m.UserRole
	}
	return UserRole_RoleError
}

func (m *RequestUserInfoModify) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

// 用户密码修改
type RequestUserPwdModify struct {
	UserPublicKey []byte `protobuf:"bytes,1,opt,name=userPublicKey,proto3" json:"userPublicKey,omitempty"`
}

func (m *RequestUserPwdModify) Reset()                    { *m = RequestUserPwdModify{} }
func (m *RequestUserPwdModify) String() string            { return proto.CompactTextString(m) }
func (*RequestUserPwdModify) ProtoMessage()               {}
func (*RequestUserPwdModify) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *RequestUserPwdModify) GetUserPublicKey() []byte {
	if m != nil {
		return m.UserPublicKey
	}
	return nil
}

// 用户密码重置
type RequestUserPwdReset struct {
	UserName      string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	UserPublicKey []byte `protobuf:"bytes,2,opt,name=userPublicKey,proto3" json:"userPublicKey,omitempty"`
}

func (m *RequestUserPwdReset) Reset()                    { *m = RequestUserPwdReset{} }
func (m *RequestUserPwdReset) String() string            { return proto.CompactTextString(m) }
func (*RequestUserPwdReset) ProtoMessage()               {}
func (*RequestUserPwdReset) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

func (m *RequestUserPwdReset) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RequestUserPwdReset) GetUserPublicKey() []byte {
	if m != nil {
		return m.UserPublicKey
	}
	return nil
}

// 企业认证审核
type RequestEntIdentifyCheck struct {
	UserName string  `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	EntCode  string  `protobuf:"bytes,2,opt,name=entCode,proto3" json:"entCode,omitempty"`
	EntName  string  `protobuf:"bytes,3,opt,name=entName,proto3" json:"entName,omitempty"`
	EntType  EntType `protobuf:"varint,4,opt,name=entType,proto3,enum=mideaBill.EntType" json:"entType,omitempty"`
}

func (m *RequestEntIdentifyCheck) Reset()                    { *m = RequestEntIdentifyCheck{} }
func (m *RequestEntIdentifyCheck) String() string            { return proto.CompactTextString(m) }
func (*RequestEntIdentifyCheck) ProtoMessage()               {}
func (*RequestEntIdentifyCheck) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

func (m *RequestEntIdentifyCheck) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RequestEntIdentifyCheck) GetEntCode() string {
	if m != nil {
		return m.EntCode
	}
	return ""
}

func (m *RequestEntIdentifyCheck) GetEntName() string {
	if m != nil {
		return m.EntName
	}
	return ""
}

func (m *RequestEntIdentifyCheck) GetEntType() EntType {
	if m != nil {
		return m.EntType
	}
	return EntType_TypeError
}

// 企业信息修改
type RequestEntInfoModify struct {
	EntName string `protobuf:"bytes,1,opt,name=entName,proto3" json:"entName,omitempty"`
}

func (m *RequestEntInfoModify) Reset()                    { *m = RequestEntInfoModify{} }
func (m *RequestEntInfoModify) String() string            { return proto.CompactTextString(m) }
func (*RequestEntInfoModify) ProtoMessage()               {}
func (*RequestEntInfoModify) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

func (m *RequestEntInfoModify) GetEntName() string {
	if m != nil {
		return m.EntName
	}
	return ""
}

// 开票申请
type RequestApplyBill struct {
	MideaDraftId     string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	MideaDraftAmount int64  `protobuf:"varint,2,opt,name=mideaDraftAmount,proto3" json:"mideaDraftAmount,omitempty"`
	IssueBillDay     string `protobuf:"bytes,3,opt,name=issueBillDay,proto3" json:"issueBillDay,omitempty"`
	ExpireDay        string `protobuf:"bytes,4,opt,name=expireDay,proto3" json:"expireDay,omitempty"`
	// string   issueBillEntName   = 5;    // 开票企业名称
	// string   issueBillEntCode   = 6;    // 开票企业代码
	PayNum          string `protobuf:"bytes,7,opt,name=payNum,proto3" json:"payNum,omitempty"`
	RecvBillEntName string `protobuf:"bytes,8,opt,name=recvBillEntName,proto3" json:"recvBillEntName,omitempty"`
	RecvBillEntCode string `protobuf:"bytes,9,opt,name=recvBillEntCode,proto3" json:"recvBillEntCode,omitempty"`
}

func (m *RequestApplyBill) Reset()                    { *m = RequestApplyBill{} }
func (m *RequestApplyBill) String() string            { return proto.CompactTextString(m) }
func (*RequestApplyBill) ProtoMessage()               {}
func (*RequestApplyBill) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

func (m *RequestApplyBill) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *RequestApplyBill) GetMideaDraftAmount() int64 {
	if m != nil {
		return m.MideaDraftAmount
	}
	return 0
}

func (m *RequestApplyBill) GetIssueBillDay() string {
	if m != nil {
		return m.IssueBillDay
	}
	return ""
}

func (m *RequestApplyBill) GetExpireDay() string {
	if m != nil {
		return m.ExpireDay
	}
	return ""
}

func (m *RequestApplyBill) GetPayNum() string {
	if m != nil {
		return m.PayNum
	}
	return ""
}

func (m *RequestApplyBill) GetRecvBillEntName() string {
	if m != nil {
		return m.RecvBillEntName
	}
	return ""
}

func (m *RequestApplyBill) GetRecvBillEntCode() string {
	if m != nil {
		return m.RecvBillEntCode
	}
	return ""
}

// 开票签收
type RequestApplyBillSign struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestApplyBillSign) Reset()                    { *m = RequestApplyBillSign{} }
func (m *RequestApplyBillSign) String() string            { return proto.CompactTextString(m) }
func (*RequestApplyBillSign) ProtoMessage()               {}
func (*RequestApplyBillSign) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

func (m *RequestApplyBillSign) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 开票签收拒绝
type RequestApplyBillSignRefuse struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestApplyBillSignRefuse) Reset()                    { *m = RequestApplyBillSignRefuse{} }
func (m *RequestApplyBillSignRefuse) String() string            { return proto.CompactTextString(m) }
func (*RequestApplyBillSignRefuse) ProtoMessage()               {}
func (*RequestApplyBillSignRefuse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

func (m *RequestApplyBillSignRefuse) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 开票待签收撤回
type RequestApplyBillSignCancle struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestApplyBillSignCancle) Reset()                    { *m = RequestApplyBillSignCancle{} }
func (m *RequestApplyBillSignCancle) String() string            { return proto.CompactTextString(m) }
func (*RequestApplyBillSignCancle) ProtoMessage()               {}
func (*RequestApplyBillSignCancle) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

func (m *RequestApplyBillSignCancle) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 整转
type RequestBillTotalTransfer struct {
	MideaDraftId        string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	WaitRecvBillEntName string `protobuf:"bytes,2,opt,name=waitRecvBillEntName,proto3" json:"waitRecvBillEntName,omitempty"`
	WaitRecvBillEntCode string `protobuf:"bytes,3,opt,name=waitRecvBillEntCode,proto3" json:"waitRecvBillEntCode,omitempty"`
}

func (m *RequestBillTotalTransfer) Reset()                    { *m = RequestBillTotalTransfer{} }
func (m *RequestBillTotalTransfer) String() string            { return proto.CompactTextString(m) }
func (*RequestBillTotalTransfer) ProtoMessage()               {}
func (*RequestBillTotalTransfer) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func (m *RequestBillTotalTransfer) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *RequestBillTotalTransfer) GetWaitRecvBillEntName() string {
	if m != nil {
		return m.WaitRecvBillEntName
	}
	return ""
}

func (m *RequestBillTotalTransfer) GetWaitRecvBillEntCode() string {
	if m != nil {
		return m.WaitRecvBillEntCode
	}
	return ""
}

// 拆转或拆融的子部分
type SubTransferOrFinancing struct {
	MideaDraftId        string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	MideaDraftAmount    int64  `protobuf:"varint,2,opt,name=mideaDraftAmount,proto3" json:"mideaDraftAmount,omitempty"`
	WaitRecvBillEntName string `protobuf:"bytes,3,opt,name=waitRecvBillEntName,proto3" json:"waitRecvBillEntName,omitempty"`
	WaitRecvBillEntCode string `protobuf:"bytes,4,opt,name=waitRecvBillEntCode,proto3" json:"waitRecvBillEntCode,omitempty"`
}

func (m *SubTransferOrFinancing) Reset()                    { *m = SubTransferOrFinancing{} }
func (m *SubTransferOrFinancing) String() string            { return proto.CompactTextString(m) }
func (*SubTransferOrFinancing) ProtoMessage()               {}
func (*SubTransferOrFinancing) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

func (m *SubTransferOrFinancing) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *SubTransferOrFinancing) GetMideaDraftAmount() int64 {
	if m != nil {
		return m.MideaDraftAmount
	}
	return 0
}

func (m *SubTransferOrFinancing) GetWaitRecvBillEntName() string {
	if m != nil {
		return m.WaitRecvBillEntName
	}
	return ""
}

func (m *SubTransferOrFinancing) GetWaitRecvBillEntCode() string {
	if m != nil {
		return m.WaitRecvBillEntCode
	}
	return ""
}

// 转让拆分
type RequestBillPartTransfer struct {
	MideaDraftId string                    `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	Sub          []*SubTransferOrFinancing `protobuf:"bytes,2,rep,name=sub" json:"sub,omitempty"`
}

func (m *RequestBillPartTransfer) Reset()                    { *m = RequestBillPartTransfer{} }
func (m *RequestBillPartTransfer) String() string            { return proto.CompactTextString(m) }
func (*RequestBillPartTransfer) ProtoMessage()               {}
func (*RequestBillPartTransfer) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{19} }

func (m *RequestBillPartTransfer) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *RequestBillPartTransfer) GetSub() []*SubTransferOrFinancing {
	if m != nil {
		return m.Sub
	}
	return nil
}

// 转让签收
type RequestBillTransferSign struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillTransferSign) Reset()                    { *m = RequestBillTransferSign{} }
func (m *RequestBillTransferSign) String() string            { return proto.CompactTextString(m) }
func (*RequestBillTransferSign) ProtoMessage()               {}
func (*RequestBillTransferSign) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{20} }

func (m *RequestBillTransferSign) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 转让拒绝
type RequestBillTransferRefuse struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillTransferRefuse) Reset()                    { *m = RequestBillTransferRefuse{} }
func (m *RequestBillTransferRefuse) String() string            { return proto.CompactTextString(m) }
func (*RequestBillTransferRefuse) ProtoMessage()               {}
func (*RequestBillTransferRefuse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{21} }

func (m *RequestBillTransferRefuse) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 转让待签收撤回
type RequestBillTransferCancle struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillTransferCancle) Reset()                    { *m = RequestBillTransferCancle{} }
func (m *RequestBillTransferCancle) String() string            { return proto.CompactTextString(m) }
func (*RequestBillTransferCancle) ProtoMessage()               {}
func (*RequestBillTransferCancle) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{22} }

func (m *RequestBillTransferCancle) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 转让，到期未签收兑付
type RequestBillTransferForcePay struct {
	MideaDraftId    string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	RecvBillEntName string `protobuf:"bytes,2,opt,name=recvBillEntName,proto3" json:"recvBillEntName,omitempty"`
	RecvBillEntCode string `protobuf:"bytes,3,opt,name=recvBillEntCode,proto3" json:"recvBillEntCode,omitempty"`
}

func (m *RequestBillTransferForcePay) Reset()                    { *m = RequestBillTransferForcePay{} }
func (m *RequestBillTransferForcePay) String() string            { return proto.CompactTextString(m) }
func (*RequestBillTransferForcePay) ProtoMessage()               {}
func (*RequestBillTransferForcePay) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{23} }

func (m *RequestBillTransferForcePay) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *RequestBillTransferForcePay) GetRecvBillEntName() string {
	if m != nil {
		return m.RecvBillEntName
	}
	return ""
}

func (m *RequestBillTransferForcePay) GetRecvBillEntCode() string {
	if m != nil {
		return m.RecvBillEntCode
	}
	return ""
}

// 整融
type RequestBillTotalFinancing struct {
	MideaDraftId        string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	WaitRecvBillEntName string `protobuf:"bytes,2,opt,name=waitRecvBillEntName,proto3" json:"waitRecvBillEntName,omitempty"`
	WaitRecvBillEntCode string `protobuf:"bytes,3,opt,name=waitRecvBillEntCode,proto3" json:"waitRecvBillEntCode,omitempty"`
}

func (m *RequestBillTotalFinancing) Reset()                    { *m = RequestBillTotalFinancing{} }
func (m *RequestBillTotalFinancing) String() string            { return proto.CompactTextString(m) }
func (*RequestBillTotalFinancing) ProtoMessage()               {}
func (*RequestBillTotalFinancing) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{24} }

func (m *RequestBillTotalFinancing) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *RequestBillTotalFinancing) GetWaitRecvBillEntName() string {
	if m != nil {
		return m.WaitRecvBillEntName
	}
	return ""
}

func (m *RequestBillTotalFinancing) GetWaitRecvBillEntCode() string {
	if m != nil {
		return m.WaitRecvBillEntCode
	}
	return ""
}

// 拆融
type RequestBillPartFinancing struct {
	MideaDraftId string                    `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
	Sub          []*SubTransferOrFinancing `protobuf:"bytes,2,rep,name=sub" json:"sub,omitempty"`
}

func (m *RequestBillPartFinancing) Reset()                    { *m = RequestBillPartFinancing{} }
func (m *RequestBillPartFinancing) String() string            { return proto.CompactTextString(m) }
func (*RequestBillPartFinancing) ProtoMessage()               {}
func (*RequestBillPartFinancing) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{25} }

func (m *RequestBillPartFinancing) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

func (m *RequestBillPartFinancing) GetSub() []*SubTransferOrFinancing {
	if m != nil {
		return m.Sub
	}
	return nil
}

// 融资审核通过
type RequestBillFinancingCheckOk struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillFinancingCheckOk) Reset()                    { *m = RequestBillFinancingCheckOk{} }
func (m *RequestBillFinancingCheckOk) String() string            { return proto.CompactTextString(m) }
func (*RequestBillFinancingCheckOk) ProtoMessage()               {}
func (*RequestBillFinancingCheckOk) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{26} }

func (m *RequestBillFinancingCheckOk) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 融资审核拒绝
type RequestBillFinancingCheckFail struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillFinancingCheckFail) Reset()         { *m = RequestBillFinancingCheckFail{} }
func (m *RequestBillFinancingCheckFail) String() string { return proto.CompactTextString(m) }
func (*RequestBillFinancingCheckFail) ProtoMessage()    {}
func (*RequestBillFinancingCheckFail) Descriptor() ([]byte, []int) {
	return fileDescriptorApi, []int{27}
}

func (m *RequestBillFinancingCheckFail) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 融资冲销
type RequestBillFinancingFail struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillFinancingFail) Reset()                    { *m = RequestBillFinancingFail{} }
func (m *RequestBillFinancingFail) String() string            { return proto.CompactTextString(m) }
func (*RequestBillFinancingFail) ProtoMessage()               {}
func (*RequestBillFinancingFail) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{28} }

func (m *RequestBillFinancingFail) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 兑付
type RequestBillPay struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillPay) Reset()                    { *m = RequestBillPay{} }
func (m *RequestBillPay) String() string            { return proto.CompactTextString(m) }
func (*RequestBillPay) ProtoMessage()               {}
func (*RequestBillPay) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{29} }

func (m *RequestBillPay) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 票据信息查询
type RequestBillQuery struct {
	MideaDraftId string `protobuf:"bytes,1,opt,name=mideaDraftId,proto3" json:"mideaDraftId,omitempty"`
}

func (m *RequestBillQuery) Reset()                    { *m = RequestBillQuery{} }
func (m *RequestBillQuery) String() string            { return proto.CompactTextString(m) }
func (*RequestBillQuery) ProtoMessage()               {}
func (*RequestBillQuery) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{30} }

func (m *RequestBillQuery) GetMideaDraftId() string {
	if m != nil {
		return m.MideaDraftId
	}
	return ""
}

// 响应
type Response struct {
	// Types that are valid to be assigned to Value:
	//	*Response_InitPlatform
	//	*Response_AddManager
	//	*Response_RegisterUser
	//	*Response_AddUser
	//	*Response_UserInfoModify
	//	*Response_UserPwdModify
	//	*Response_UserPwdReset
	//	*Response_EntIdentifyCheck
	//	*Response_EntInfoModify
	//	*Response_ApplyBill
	//	*Response_ApplyBillSign
	//	*Response_ApplyBillSignRefuse
	//	*Response_ApplyBillSignCancle
	//	*Response_BillTotalTransfer
	//	*Response_BillPartTransfer
	//	*Response_BillTransferSign
	//	*Response_BillTransferRefuse
	//	*Response_BillTransferCancle
	//	*Response_BillTransferForcePay
	//	*Response_BillTotalFinancing
	//	*Response_BillPartFinancing
	//	*Response_BillFinancingCheckOk
	//	*Response_BillFinancingCheckFail
	//	*Response_BillFinancingFail
	//	*Response_BillPay
	Value isResponse_Value `protobuf_oneof:"value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{31} }

type isResponse_Value interface {
	isResponse_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_InitPlatform struct {
	InitPlatform *ResponseInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Response_AddManager struct {
	AddManager *ResponseAddManager `protobuf:"bytes,2,opt,name=addManager,oneof"`
}
type Response_RegisterUser struct {
	RegisterUser *ResponseRegisterUser `protobuf:"bytes,3,opt,name=registerUser,oneof"`
}
type Response_AddUser struct {
	AddUser *ResponseAddUser `protobuf:"bytes,4,opt,name=addUser,oneof"`
}
type Response_UserInfoModify struct {
	UserInfoModify *ResponseUserInfoModify `protobuf:"bytes,5,opt,name=userInfoModify,oneof"`
}
type Response_UserPwdModify struct {
	UserPwdModify *ResponseUserPwdModify `protobuf:"bytes,6,opt,name=userPwdModify,oneof"`
}
type Response_UserPwdReset struct {
	UserPwdReset *ResponseUserPwdReset `protobuf:"bytes,7,opt,name=userPwdReset,oneof"`
}
type Response_EntIdentifyCheck struct {
	EntIdentifyCheck *ResponseEntIdentifyCheck `protobuf:"bytes,8,opt,name=entIdentifyCheck,oneof"`
}
type Response_EntInfoModify struct {
	EntInfoModify *ResponseEntInfoModify `protobuf:"bytes,9,opt,name=entInfoModify,oneof"`
}
type Response_ApplyBill struct {
	ApplyBill *ResponseApplyBill `protobuf:"bytes,10,opt,name=applyBill,oneof"`
}
type Response_ApplyBillSign struct {
	ApplyBillSign *ResponseApplyBillSign `protobuf:"bytes,11,opt,name=applyBillSign,oneof"`
}
type Response_ApplyBillSignRefuse struct {
	ApplyBillSignRefuse *ResponseApplyBillSignRefuse `protobuf:"bytes,12,opt,name=applyBillSignRefuse,oneof"`
}
type Response_ApplyBillSignCancle struct {
	ApplyBillSignCancle *ResponseApplyBillSignCancle `protobuf:"bytes,13,opt,name=applyBillSignCancle,oneof"`
}
type Response_BillTotalTransfer struct {
	BillTotalTransfer *ResponseBillTotalTransfer `protobuf:"bytes,14,opt,name=billTotalTransfer,oneof"`
}
type Response_BillPartTransfer struct {
	BillPartTransfer *ResponseBillPartTransfer `protobuf:"bytes,15,opt,name=billPartTransfer,oneof"`
}
type Response_BillTransferSign struct {
	BillTransferSign *ResponseBillTransferSign `protobuf:"bytes,16,opt,name=billTransferSign,oneof"`
}
type Response_BillTransferRefuse struct {
	BillTransferRefuse *ResponseBillTransferRefuse `protobuf:"bytes,17,opt,name=billTransferRefuse,oneof"`
}
type Response_BillTransferCancle struct {
	BillTransferCancle *ResponseBillTransferCancle `protobuf:"bytes,18,opt,name=billTransferCancle,oneof"`
}
type Response_BillTransferForcePay struct {
	BillTransferForcePay *ResponseBillTransferForcePay `protobuf:"bytes,19,opt,name=billTransferForcePay,oneof"`
}
type Response_BillTotalFinancing struct {
	BillTotalFinancing *ResponseBillTotalFinancing `protobuf:"bytes,20,opt,name=billTotalFinancing,oneof"`
}
type Response_BillPartFinancing struct {
	BillPartFinancing *ResponseBillPartFinancing `protobuf:"bytes,21,opt,name=billPartFinancing,oneof"`
}
type Response_BillFinancingCheckOk struct {
	BillFinancingCheckOk *ResponseBillFinancingCheckOk `protobuf:"bytes,22,opt,name=billFinancingCheckOk,oneof"`
}
type Response_BillFinancingCheckFail struct {
	BillFinancingCheckFail *ResponseBillFinancingCheckFail `protobuf:"bytes,23,opt,name=billFinancingCheckFail,oneof"`
}
type Response_BillFinancingFail struct {
	BillFinancingFail *ResponseBillFinancingFail `protobuf:"bytes,24,opt,name=billFinancingFail,oneof"`
}
type Response_BillPay struct {
	BillPay *ResponseBillPay `protobuf:"bytes,25,opt,name=billPay,oneof"`
}

func (*Response_InitPlatform) isResponse_Value()           {}
func (*Response_AddManager) isResponse_Value()             {}
func (*Response_RegisterUser) isResponse_Value()           {}
func (*Response_AddUser) isResponse_Value()                {}
func (*Response_UserInfoModify) isResponse_Value()         {}
func (*Response_UserPwdModify) isResponse_Value()          {}
func (*Response_UserPwdReset) isResponse_Value()           {}
func (*Response_EntIdentifyCheck) isResponse_Value()       {}
func (*Response_EntInfoModify) isResponse_Value()          {}
func (*Response_ApplyBill) isResponse_Value()              {}
func (*Response_ApplyBillSign) isResponse_Value()          {}
func (*Response_ApplyBillSignRefuse) isResponse_Value()    {}
func (*Response_ApplyBillSignCancle) isResponse_Value()    {}
func (*Response_BillTotalTransfer) isResponse_Value()      {}
func (*Response_BillPartTransfer) isResponse_Value()       {}
func (*Response_BillTransferSign) isResponse_Value()       {}
func (*Response_BillTransferRefuse) isResponse_Value()     {}
func (*Response_BillTransferCancle) isResponse_Value()     {}
func (*Response_BillTransferForcePay) isResponse_Value()   {}
func (*Response_BillTotalFinancing) isResponse_Value()     {}
func (*Response_BillPartFinancing) isResponse_Value()      {}
func (*Response_BillFinancingCheckOk) isResponse_Value()   {}
func (*Response_BillFinancingCheckFail) isResponse_Value() {}
func (*Response_BillFinancingFail) isResponse_Value()      {}
func (*Response_BillPay) isResponse_Value()                {}

func (m *Response) GetValue() isResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response) GetInitPlatform() *ResponseInitPlatform {
	if x, ok := m.GetValue().(*Response_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Response) GetAddManager() *ResponseAddManager {
	if x, ok := m.GetValue().(*Response_AddManager); ok {
		return x.AddManager
	}
	return nil
}

func (m *Response) GetRegisterUser() *ResponseRegisterUser {
	if x, ok := m.GetValue().(*Response_RegisterUser); ok {
		return x.RegisterUser
	}
	return nil
}

func (m *Response) GetAddUser() *ResponseAddUser {
	if x, ok := m.GetValue().(*Response_AddUser); ok {
		return x.AddUser
	}
	return nil
}

func (m *Response) GetUserInfoModify() *ResponseUserInfoModify {
	if x, ok := m.GetValue().(*Response_UserInfoModify); ok {
		return x.UserInfoModify
	}
	return nil
}

func (m *Response) GetUserPwdModify() *ResponseUserPwdModify {
	if x, ok := m.GetValue().(*Response_UserPwdModify); ok {
		return x.UserPwdModify
	}
	return nil
}

func (m *Response) GetUserPwdReset() *ResponseUserPwdReset {
	if x, ok := m.GetValue().(*Response_UserPwdReset); ok {
		return x.UserPwdReset
	}
	return nil
}

func (m *Response) GetEntIdentifyCheck() *ResponseEntIdentifyCheck {
	if x, ok := m.GetValue().(*Response_EntIdentifyCheck); ok {
		return x.EntIdentifyCheck
	}
	return nil
}

func (m *Response) GetEntInfoModify() *ResponseEntInfoModify {
	if x, ok := m.GetValue().(*Response_EntInfoModify); ok {
		return x.EntInfoModify
	}
	return nil
}

func (m *Response) GetApplyBill() *ResponseApplyBill {
	if x, ok := m.GetValue().(*Response_ApplyBill); ok {
		return x.ApplyBill
	}
	return nil
}

func (m *Response) GetApplyBillSign() *ResponseApplyBillSign {
	if x, ok := m.GetValue().(*Response_ApplyBillSign); ok {
		return x.ApplyBillSign
	}
	return nil
}

func (m *Response) GetApplyBillSignRefuse() *ResponseApplyBillSignRefuse {
	if x, ok := m.GetValue().(*Response_ApplyBillSignRefuse); ok {
		return x.ApplyBillSignRefuse
	}
	return nil
}

func (m *Response) GetApplyBillSignCancle() *ResponseApplyBillSignCancle {
	if x, ok := m.GetValue().(*Response_ApplyBillSignCancle); ok {
		return x.ApplyBillSignCancle
	}
	return nil
}

func (m *Response) GetBillTotalTransfer() *ResponseBillTotalTransfer {
	if x, ok := m.GetValue().(*Response_BillTotalTransfer); ok {
		return x.BillTotalTransfer
	}
	return nil
}

func (m *Response) GetBillPartTransfer() *ResponseBillPartTransfer {
	if x, ok := m.GetValue().(*Response_BillPartTransfer); ok {
		return x.BillPartTransfer
	}
	return nil
}

func (m *Response) GetBillTransferSign() *ResponseBillTransferSign {
	if x, ok := m.GetValue().(*Response_BillTransferSign); ok {
		return x.BillTransferSign
	}
	return nil
}

func (m *Response) GetBillTransferRefuse() *ResponseBillTransferRefuse {
	if x, ok := m.GetValue().(*Response_BillTransferRefuse); ok {
		return x.BillTransferRefuse
	}
	return nil
}

func (m *Response) GetBillTransferCancle() *ResponseBillTransferCancle {
	if x, ok := m.GetValue().(*Response_BillTransferCancle); ok {
		return x.BillTransferCancle
	}
	return nil
}

func (m *Response) GetBillTransferForcePay() *ResponseBillTransferForcePay {
	if x, ok := m.GetValue().(*Response_BillTransferForcePay); ok {
		return x.BillTransferForcePay
	}
	return nil
}

func (m *Response) GetBillTotalFinancing() *ResponseBillTotalFinancing {
	if x, ok := m.GetValue().(*Response_BillTotalFinancing); ok {
		return x.BillTotalFinancing
	}
	return nil
}

func (m *Response) GetBillPartFinancing() *ResponseBillPartFinancing {
	if x, ok := m.GetValue().(*Response_BillPartFinancing); ok {
		return x.BillPartFinancing
	}
	return nil
}

func (m *Response) GetBillFinancingCheckOk() *ResponseBillFinancingCheckOk {
	if x, ok := m.GetValue().(*Response_BillFinancingCheckOk); ok {
		return x.BillFinancingCheckOk
	}
	return nil
}

func (m *Response) GetBillFinancingCheckFail() *ResponseBillFinancingCheckFail {
	if x, ok := m.GetValue().(*Response_BillFinancingCheckFail); ok {
		return x.BillFinancingCheckFail
	}
	return nil
}

func (m *Response) GetBillFinancingFail() *ResponseBillFinancingFail {
	if x, ok := m.GetValue().(*Response_BillFinancingFail); ok {
		return x.BillFinancingFail
	}
	return nil
}

func (m *Response) GetBillPay() *ResponseBillPay {
	if x, ok := m.GetValue().(*Response_BillPay); ok {
		return x.BillPay
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_InitPlatform)(nil),
		(*Response_AddManager)(nil),
		(*Response_RegisterUser)(nil),
		(*Response_AddUser)(nil),
		(*Response_UserInfoModify)(nil),
		(*Response_UserPwdModify)(nil),
		(*Response_UserPwdReset)(nil),
		(*Response_EntIdentifyCheck)(nil),
		(*Response_EntInfoModify)(nil),
		(*Response_ApplyBill)(nil),
		(*Response_ApplyBillSign)(nil),
		(*Response_ApplyBillSignRefuse)(nil),
		(*Response_ApplyBillSignCancle)(nil),
		(*Response_BillTotalTransfer)(nil),
		(*Response_BillPartTransfer)(nil),
		(*Response_BillTransferSign)(nil),
		(*Response_BillTransferRefuse)(nil),
		(*Response_BillTransferCancle)(nil),
		(*Response_BillTransferForcePay)(nil),
		(*Response_BillTotalFinancing)(nil),
		(*Response_BillPartFinancing)(nil),
		(*Response_BillFinancingCheckOk)(nil),
		(*Response_BillFinancingCheckFail)(nil),
		(*Response_BillFinancingFail)(nil),
		(*Response_BillPay)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// value
	switch x := m.Value.(type) {
	case *Response_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Response_AddManager:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddManager); err != nil {
			return err
		}
	case *Response_RegisterUser:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterUser); err != nil {
			return err
		}
	case *Response_AddUser:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddUser); err != nil {
			return err
		}
	case *Response_UserInfoModify:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserInfoModify); err != nil {
			return err
		}
	case *Response_UserPwdModify:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserPwdModify); err != nil {
			return err
		}
	case *Response_UserPwdReset:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserPwdReset); err != nil {
			return err
		}
	case *Response_EntIdentifyCheck:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntIdentifyCheck); err != nil {
			return err
		}
	case *Response_EntInfoModify:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntInfoModify); err != nil {
			return err
		}
	case *Response_ApplyBill:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBill); err != nil {
			return err
		}
	case *Response_ApplyBillSign:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBillSign); err != nil {
			return err
		}
	case *Response_ApplyBillSignRefuse:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBillSignRefuse); err != nil {
			return err
		}
	case *Response_ApplyBillSignCancle:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyBillSignCancle); err != nil {
			return err
		}
	case *Response_BillTotalTransfer:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTotalTransfer); err != nil {
			return err
		}
	case *Response_BillPartTransfer:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillPartTransfer); err != nil {
			return err
		}
	case *Response_BillTransferSign:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferSign); err != nil {
			return err
		}
	case *Response_BillTransferRefuse:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferRefuse); err != nil {
			return err
		}
	case *Response_BillTransferCancle:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferCancle); err != nil {
			return err
		}
	case *Response_BillTransferForcePay:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTransferForcePay); err != nil {
			return err
		}
	case *Response_BillTotalFinancing:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillTotalFinancing); err != nil {
			return err
		}
	case *Response_BillPartFinancing:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillPartFinancing); err != nil {
			return err
		}
	case *Response_BillFinancingCheckOk:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillFinancingCheckOk); err != nil {
			return err
		}
	case *Response_BillFinancingCheckFail:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillFinancingCheckFail); err != nil {
			return err
		}
	case *Response_BillFinancingFail:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillFinancingFail); err != nil {
			return err
		}
	case *Response_BillPay:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BillPay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Value has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Response_InitPlatform{msg}
		return true, err
	case 2: // value.addManager
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAddManager)
		err := b.DecodeMessage(msg)
		m.Value = &Response_AddManager{msg}
		return true, err
	case 3: // value.registerUser
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseRegisterUser)
		err := b.DecodeMessage(msg)
		m.Value = &Response_RegisterUser{msg}
		return true, err
	case 4: // value.addUser
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAddUser)
		err := b.DecodeMessage(msg)
		m.Value = &Response_AddUser{msg}
		return true, err
	case 5: // value.userInfoModify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseUserInfoModify)
		err := b.DecodeMessage(msg)
		m.Value = &Response_UserInfoModify{msg}
		return true, err
	case 6: // value.userPwdModify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseUserPwdModify)
		err := b.DecodeMessage(msg)
		m.Value = &Response_UserPwdModify{msg}
		return true, err
	case 7: // value.userPwdReset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseUserPwdReset)
		err := b.DecodeMessage(msg)
		m.Value = &Response_UserPwdReset{msg}
		return true, err
	case 8: // value.entIdentifyCheck
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseEntIdentifyCheck)
		err := b.DecodeMessage(msg)
		m.Value = &Response_EntIdentifyCheck{msg}
		return true, err
	case 9: // value.entInfoModify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseEntInfoModify)
		err := b.DecodeMessage(msg)
		m.Value = &Response_EntInfoModify{msg}
		return true, err
	case 10: // value.applyBill
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseApplyBill)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ApplyBill{msg}
		return true, err
	case 11: // value.applyBillSign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseApplyBillSign)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ApplyBillSign{msg}
		return true, err
	case 12: // value.applyBillSignRefuse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseApplyBillSignRefuse)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ApplyBillSignRefuse{msg}
		return true, err
	case 13: // value.applyBillSignCancle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseApplyBillSignCancle)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ApplyBillSignCancle{msg}
		return true, err
	case 14: // value.billTotalTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillTotalTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillTotalTransfer{msg}
		return true, err
	case 15: // value.billPartTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillPartTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillPartTransfer{msg}
		return true, err
	case 16: // value.billTransferSign
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillTransferSign)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillTransferSign{msg}
		return true, err
	case 17: // value.billTransferRefuse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillTransferRefuse)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillTransferRefuse{msg}
		return true, err
	case 18: // value.billTransferCancle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillTransferCancle)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillTransferCancle{msg}
		return true, err
	case 19: // value.billTransferForcePay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillTransferForcePay)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillTransferForcePay{msg}
		return true, err
	case 20: // value.billTotalFinancing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillTotalFinancing)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillTotalFinancing{msg}
		return true, err
	case 21: // value.billPartFinancing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillPartFinancing)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillPartFinancing{msg}
		return true, err
	case 22: // value.billFinancingCheckOk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillFinancingCheckOk)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillFinancingCheckOk{msg}
		return true, err
	case 23: // value.billFinancingCheckFail
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillFinancingCheckFail)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillFinancingCheckFail{msg}
		return true, err
	case 24: // value.billFinancingFail
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillFinancingFail)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillFinancingFail{msg}
		return true, err
	case 25: // value.billPay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseBillPay)
		err := b.DecodeMessage(msg)
		m.Value = &Response_BillPay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// value
	switch x := m.Value.(type) {
	case *Response_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_AddManager:
		s := proto.Size(x.AddManager)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RegisterUser:
		s := proto.Size(x.RegisterUser)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_AddUser:
		s := proto.Size(x.AddUser)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_UserInfoModify:
		s := proto.Size(x.UserInfoModify)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_UserPwdModify:
		s := proto.Size(x.UserPwdModify)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_UserPwdReset:
		s := proto.Size(x.UserPwdReset)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_EntIdentifyCheck:
		s := proto.Size(x.EntIdentifyCheck)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_EntInfoModify:
		s := proto.Size(x.EntInfoModify)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ApplyBill:
		s := proto.Size(x.ApplyBill)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ApplyBillSign:
		s := proto.Size(x.ApplyBillSign)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ApplyBillSignRefuse:
		s := proto.Size(x.ApplyBillSignRefuse)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ApplyBillSignCancle:
		s := proto.Size(x.ApplyBillSignCancle)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillTotalTransfer:
		s := proto.Size(x.BillTotalTransfer)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillPartTransfer:
		s := proto.Size(x.BillPartTransfer)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillTransferSign:
		s := proto.Size(x.BillTransferSign)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillTransferRefuse:
		s := proto.Size(x.BillTransferRefuse)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillTransferCancle:
		s := proto.Size(x.BillTransferCancle)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillTransferForcePay:
		s := proto.Size(x.BillTransferForcePay)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillTotalFinancing:
		s := proto.Size(x.BillTotalFinancing)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillPartFinancing:
		s := proto.Size(x.BillPartFinancing)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillFinancingCheckOk:
		s := proto.Size(x.BillFinancingCheckOk)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillFinancingCheckFail:
		s := proto.Size(x.BillFinancingCheckFail)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillFinancingFail:
		s := proto.Size(x.BillFinancingFail)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BillPay:
		s := proto.Size(x.BillPay)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 初始化平台
type ResponseInitPlatform struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseInitPlatform) Reset()                    { *m = ResponseInitPlatform{} }
func (m *ResponseInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*ResponseInitPlatform) ProtoMessage()               {}
func (*ResponseInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{32} }

func (m *ResponseInitPlatform) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 添加运营管理员
type ResponseAddManager struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseAddManager) Reset()                    { *m = ResponseAddManager{} }
func (m *ResponseAddManager) String() string            { return proto.CompactTextString(m) }
func (*ResponseAddManager) ProtoMessage()               {}
func (*ResponseAddManager) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{33} }

func (m *ResponseAddManager) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 注册用户
type ResponseRegisterUser struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseRegisterUser) Reset()                    { *m = ResponseRegisterUser{} }
func (m *ResponseRegisterUser) String() string            { return proto.CompactTextString(m) }
func (*ResponseRegisterUser) ProtoMessage()               {}
func (*ResponseRegisterUser) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{34} }

func (m *ResponseRegisterUser) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 添加用户
type ResponseAddUser struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseAddUser) Reset()                    { *m = ResponseAddUser{} }
func (m *ResponseAddUser) String() string            { return proto.CompactTextString(m) }
func (*ResponseAddUser) ProtoMessage()               {}
func (*ResponseAddUser) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{35} }

func (m *ResponseAddUser) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 用户信息修改
type ResponseUserInfoModify struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseUserInfoModify) Reset()                    { *m = ResponseUserInfoModify{} }
func (m *ResponseUserInfoModify) String() string            { return proto.CompactTextString(m) }
func (*ResponseUserInfoModify) ProtoMessage()               {}
func (*ResponseUserInfoModify) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{36} }

func (m *ResponseUserInfoModify) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 用户密码修改
type ResponseUserPwdModify struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseUserPwdModify) Reset()                    { *m = ResponseUserPwdModify{} }
func (m *ResponseUserPwdModify) String() string            { return proto.CompactTextString(m) }
func (*ResponseUserPwdModify) ProtoMessage()               {}
func (*ResponseUserPwdModify) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{37} }

func (m *ResponseUserPwdModify) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 用户密码重置
type ResponseUserPwdReset struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseUserPwdReset) Reset()                    { *m = ResponseUserPwdReset{} }
func (m *ResponseUserPwdReset) String() string            { return proto.CompactTextString(m) }
func (*ResponseUserPwdReset) ProtoMessage()               {}
func (*ResponseUserPwdReset) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{38} }

func (m *ResponseUserPwdReset) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 企业认证审核
type ResponseEntIdentifyCheck struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseEntIdentifyCheck) Reset()                    { *m = ResponseEntIdentifyCheck{} }
func (m *ResponseEntIdentifyCheck) String() string            { return proto.CompactTextString(m) }
func (*ResponseEntIdentifyCheck) ProtoMessage()               {}
func (*ResponseEntIdentifyCheck) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{39} }

func (m *ResponseEntIdentifyCheck) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 企业信息修改
type ResponseEntInfoModify struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseEntInfoModify) Reset()                    { *m = ResponseEntInfoModify{} }
func (m *ResponseEntInfoModify) String() string            { return proto.CompactTextString(m) }
func (*ResponseEntInfoModify) ProtoMessage()               {}
func (*ResponseEntInfoModify) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{40} }

func (m *ResponseEntInfoModify) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 开票申请
type ResponseApplyBill struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseApplyBill) Reset()                    { *m = ResponseApplyBill{} }
func (m *ResponseApplyBill) String() string            { return proto.CompactTextString(m) }
func (*ResponseApplyBill) ProtoMessage()               {}
func (*ResponseApplyBill) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{41} }

func (m *ResponseApplyBill) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 开票签收
type ResponseApplyBillSign struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseApplyBillSign) Reset()                    { *m = ResponseApplyBillSign{} }
func (m *ResponseApplyBillSign) String() string            { return proto.CompactTextString(m) }
func (*ResponseApplyBillSign) ProtoMessage()               {}
func (*ResponseApplyBillSign) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{42} }

func (m *ResponseApplyBillSign) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 开票签收拒绝
type ResponseApplyBillSignRefuse struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseApplyBillSignRefuse) Reset()                    { *m = ResponseApplyBillSignRefuse{} }
func (m *ResponseApplyBillSignRefuse) String() string            { return proto.CompactTextString(m) }
func (*ResponseApplyBillSignRefuse) ProtoMessage()               {}
func (*ResponseApplyBillSignRefuse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{43} }

func (m *ResponseApplyBillSignRefuse) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 开票待签收撤回
type ResponseApplyBillSignCancle struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseApplyBillSignCancle) Reset()                    { *m = ResponseApplyBillSignCancle{} }
func (m *ResponseApplyBillSignCancle) String() string            { return proto.CompactTextString(m) }
func (*ResponseApplyBillSignCancle) ProtoMessage()               {}
func (*ResponseApplyBillSignCancle) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{44} }

func (m *ResponseApplyBillSignCancle) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 整转
type ResponseBillTotalTransfer struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillTotalTransfer) Reset()                    { *m = ResponseBillTotalTransfer{} }
func (m *ResponseBillTotalTransfer) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillTotalTransfer) ProtoMessage()               {}
func (*ResponseBillTotalTransfer) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{45} }

func (m *ResponseBillTotalTransfer) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 转让拆分
type ResponseBillPartTransfer struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillPartTransfer) Reset()                    { *m = ResponseBillPartTransfer{} }
func (m *ResponseBillPartTransfer) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillPartTransfer) ProtoMessage()               {}
func (*ResponseBillPartTransfer) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{46} }

func (m *ResponseBillPartTransfer) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 转让签收
type ResponseBillTransferSign struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillTransferSign) Reset()                    { *m = ResponseBillTransferSign{} }
func (m *ResponseBillTransferSign) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillTransferSign) ProtoMessage()               {}
func (*ResponseBillTransferSign) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{47} }

func (m *ResponseBillTransferSign) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 转让拒绝
type ResponseBillTransferRefuse struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillTransferRefuse) Reset()                    { *m = ResponseBillTransferRefuse{} }
func (m *ResponseBillTransferRefuse) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillTransferRefuse) ProtoMessage()               {}
func (*ResponseBillTransferRefuse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{48} }

func (m *ResponseBillTransferRefuse) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 转让待签收撤回
type ResponseBillTransferCancle struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillTransferCancle) Reset()                    { *m = ResponseBillTransferCancle{} }
func (m *ResponseBillTransferCancle) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillTransferCancle) ProtoMessage()               {}
func (*ResponseBillTransferCancle) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{49} }

func (m *ResponseBillTransferCancle) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 转让，到期未签收兑付
type ResponseBillTransferForcePay struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillTransferForcePay) Reset()                    { *m = ResponseBillTransferForcePay{} }
func (m *ResponseBillTransferForcePay) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillTransferForcePay) ProtoMessage()               {}
func (*ResponseBillTransferForcePay) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{50} }

func (m *ResponseBillTransferForcePay) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 整融
type ResponseBillTotalFinancing struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillTotalFinancing) Reset()                    { *m = ResponseBillTotalFinancing{} }
func (m *ResponseBillTotalFinancing) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillTotalFinancing) ProtoMessage()               {}
func (*ResponseBillTotalFinancing) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{51} }

func (m *ResponseBillTotalFinancing) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 拆融
type ResponseBillPartFinancing struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillPartFinancing) Reset()                    { *m = ResponseBillPartFinancing{} }
func (m *ResponseBillPartFinancing) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillPartFinancing) ProtoMessage()               {}
func (*ResponseBillPartFinancing) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{52} }

func (m *ResponseBillPartFinancing) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 融资审核通过
type ResponseBillFinancingCheckOk struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillFinancingCheckOk) Reset()                    { *m = ResponseBillFinancingCheckOk{} }
func (m *ResponseBillFinancingCheckOk) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillFinancingCheckOk) ProtoMessage()               {}
func (*ResponseBillFinancingCheckOk) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{53} }

func (m *ResponseBillFinancingCheckOk) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 融资审核拒绝
type ResponseBillFinancingCheckFail struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillFinancingCheckFail) Reset()         { *m = ResponseBillFinancingCheckFail{} }
func (m *ResponseBillFinancingCheckFail) String() string { return proto.CompactTextString(m) }
func (*ResponseBillFinancingCheckFail) ProtoMessage()    {}
func (*ResponseBillFinancingCheckFail) Descriptor() ([]byte, []int) {
	return fileDescriptorApi, []int{54}
}

func (m *ResponseBillFinancingCheckFail) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 融资冲销
type ResponseBillFinancingFail struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillFinancingFail) Reset()                    { *m = ResponseBillFinancingFail{} }
func (m *ResponseBillFinancingFail) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillFinancingFail) ProtoMessage()               {}
func (*ResponseBillFinancingFail) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{55} }

func (m *ResponseBillFinancingFail) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

// 兑付
type ResponseBillPay struct {
	InstructionId int64 `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
}

func (m *ResponseBillPay) Reset()                    { *m = ResponseBillPay{} }
func (m *ResponseBillPay) String() string            { return proto.CompactTextString(m) }
func (*ResponseBillPay) ProtoMessage()               {}
func (*ResponseBillPay) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{56} }

func (m *ResponseBillPay) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func init() {
	proto.RegisterType((*MideaBill)(nil), "mideaBill.MideaBill")
	proto.RegisterType((*UserInfo)(nil), "mideaBill.UserInfo")
	proto.RegisterType((*EntInfo)(nil), "mideaBill.EntInfo")
	proto.RegisterType((*Request)(nil), "mideaBill.Request")
	proto.RegisterType((*RequestInitPlatform)(nil), "mideaBill.RequestInitPlatform")
	proto.RegisterType((*RequestAddManager)(nil), "mideaBill.RequestAddManager")
	proto.RegisterType((*RequestRegisterUser)(nil), "mideaBill.RequestRegisterUser")
	proto.RegisterType((*RequestAddUser)(nil), "mideaBill.RequestAddUser")
	proto.RegisterType((*RequestUserInfoModify)(nil), "mideaBill.RequestUserInfoModify")
	proto.RegisterType((*RequestUserPwdModify)(nil), "mideaBill.RequestUserPwdModify")
	proto.RegisterType((*RequestUserPwdReset)(nil), "mideaBill.RequestUserPwdReset")
	proto.RegisterType((*RequestEntIdentifyCheck)(nil), "mideaBill.RequestEntIdentifyCheck")
	proto.RegisterType((*RequestEntInfoModify)(nil), "mideaBill.RequestEntInfoModify")
	proto.RegisterType((*RequestApplyBill)(nil), "mideaBill.RequestApplyBill")
	proto.RegisterType((*RequestApplyBillSign)(nil), "mideaBill.RequestApplyBillSign")
	proto.RegisterType((*RequestApplyBillSignRefuse)(nil), "mideaBill.RequestApplyBillSignRefuse")
	proto.RegisterType((*RequestApplyBillSignCancle)(nil), "mideaBill.RequestApplyBillSignCancle")
	proto.RegisterType((*RequestBillTotalTransfer)(nil), "mideaBill.RequestBillTotalTransfer")
	proto.RegisterType((*SubTransferOrFinancing)(nil), "mideaBill.SubTransferOrFinancing")
	proto.RegisterType((*RequestBillPartTransfer)(nil), "mideaBill.RequestBillPartTransfer")
	proto.RegisterType((*RequestBillTransferSign)(nil), "mideaBill.RequestBillTransferSign")
	proto.RegisterType((*RequestBillTransferRefuse)(nil), "mideaBill.RequestBillTransferRefuse")
	proto.RegisterType((*RequestBillTransferCancle)(nil), "mideaBill.RequestBillTransferCancle")
	proto.RegisterType((*RequestBillTransferForcePay)(nil), "mideaBill.RequestBillTransferForcePay")
	proto.RegisterType((*RequestBillTotalFinancing)(nil), "mideaBill.RequestBillTotalFinancing")
	proto.RegisterType((*RequestBillPartFinancing)(nil), "mideaBill.RequestBillPartFinancing")
	proto.RegisterType((*RequestBillFinancingCheckOk)(nil), "mideaBill.RequestBillFinancingCheckOk")
	proto.RegisterType((*RequestBillFinancingCheckFail)(nil), "mideaBill.RequestBillFinancingCheckFail")
	proto.RegisterType((*RequestBillFinancingFail)(nil), "mideaBill.RequestBillFinancingFail")
	proto.RegisterType((*RequestBillPay)(nil), "mideaBill.RequestBillPay")
	proto.RegisterType((*RequestBillQuery)(nil), "mideaBill.RequestBillQuery")
	proto.RegisterType((*Response)(nil), "mideaBill.Response")
	proto.RegisterType((*ResponseInitPlatform)(nil), "mideaBill.ResponseInitPlatform")
	proto.RegisterType((*ResponseAddManager)(nil), "mideaBill.ResponseAddManager")
	proto.RegisterType((*ResponseRegisterUser)(nil), "mideaBill.ResponseRegisterUser")
	proto.RegisterType((*ResponseAddUser)(nil), "mideaBill.ResponseAddUser")
	proto.RegisterType((*ResponseUserInfoModify)(nil), "mideaBill.ResponseUserInfoModify")
	proto.RegisterType((*ResponseUserPwdModify)(nil), "mideaBill.ResponseUserPwdModify")
	proto.RegisterType((*ResponseUserPwdReset)(nil), "mideaBill.ResponseUserPwdReset")
	proto.RegisterType((*ResponseEntIdentifyCheck)(nil), "mideaBill.ResponseEntIdentifyCheck")
	proto.RegisterType((*ResponseEntInfoModify)(nil), "mideaBill.ResponseEntInfoModify")
	proto.RegisterType((*ResponseApplyBill)(nil), "mideaBill.ResponseApplyBill")
	proto.RegisterType((*ResponseApplyBillSign)(nil), "mideaBill.ResponseApplyBillSign")
	proto.RegisterType((*ResponseApplyBillSignRefuse)(nil), "mideaBill.ResponseApplyBillSignRefuse")
	proto.RegisterType((*ResponseApplyBillSignCancle)(nil), "mideaBill.ResponseApplyBillSignCancle")
	proto.RegisterType((*ResponseBillTotalTransfer)(nil), "mideaBill.ResponseBillTotalTransfer")
	proto.RegisterType((*ResponseBillPartTransfer)(nil), "mideaBill.ResponseBillPartTransfer")
	proto.RegisterType((*ResponseBillTransferSign)(nil), "mideaBill.ResponseBillTransferSign")
	proto.RegisterType((*ResponseBillTransferRefuse)(nil), "mideaBill.ResponseBillTransferRefuse")
	proto.RegisterType((*ResponseBillTransferCancle)(nil), "mideaBill.ResponseBillTransferCancle")
	proto.RegisterType((*ResponseBillTransferForcePay)(nil), "mideaBill.ResponseBillTransferForcePay")
	proto.RegisterType((*ResponseBillTotalFinancing)(nil), "mideaBill.ResponseBillTotalFinancing")
	proto.RegisterType((*ResponseBillPartFinancing)(nil), "mideaBill.ResponseBillPartFinancing")
	proto.RegisterType((*ResponseBillFinancingCheckOk)(nil), "mideaBill.ResponseBillFinancingCheckOk")
	proto.RegisterType((*ResponseBillFinancingCheckFail)(nil), "mideaBill.ResponseBillFinancingCheckFail")
	proto.RegisterType((*ResponseBillFinancingFail)(nil), "mideaBill.ResponseBillFinancingFail")
	proto.RegisterType((*ResponseBillPay)(nil), "mideaBill.ResponseBillPay")
	proto.RegisterEnum("mideaBill.UserRole", UserRole_name, UserRole_value)
	proto.RegisterEnum("mideaBill.EntType", EntType_name, EntType_value)
	proto.RegisterEnum("mideaBill.BillState", BillState_name, BillState_value)
	proto.RegisterEnum("mideaBill.MessageType", MessageType_name, MessageType_value)
}
func (m *MideaBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MideaBill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if m.MideaDraftAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MideaDraftAmount))
	}
	if len(m.IssueBillDay) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IssueBillDay)))
		i += copy(dAtA[i:], m.IssueBillDay)
	}
	if len(m.ExpireDay) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpireDay)))
		i += copy(dAtA[i:], m.ExpireDay)
	}
	if len(m.IssueBillEntName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IssueBillEntName)))
		i += copy(dAtA[i:], m.IssueBillEntName)
	}
	if len(m.IssueBillEntCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IssueBillEntCode)))
		i += copy(dAtA[i:], m.IssueBillEntCode)
	}
	if len(m.IssueBillPublicKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IssueBillPublicKey)))
		i += copy(dAtA[i:], m.IssueBillPublicKey)
	}
	if len(m.PayNum) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayNum)))
		i += copy(dAtA[i:], m.PayNum)
	}
	if len(m.RecvBillEntName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillEntName)))
		i += copy(dAtA[i:], m.RecvBillEntName)
	}
	if len(m.RecvBillEntCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillEntCode)))
		i += copy(dAtA[i:], m.RecvBillEntCode)
	}
	if len(m.RecvBillPublicKey) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillPublicKey)))
		i += copy(dAtA[i:], m.RecvBillPublicKey)
	}
	if len(m.WaitRecvBillEntName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntName)))
		i += copy(dAtA[i:], m.WaitRecvBillEntName)
	}
	if len(m.WaitRecvBillEntCode) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntCode)))
		i += copy(dAtA[i:], m.WaitRecvBillEntCode)
	}
	if len(m.WaitRecvBillPublicKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillPublicKey)))
		i += copy(dAtA[i:], m.WaitRecvBillPublicKey)
	}
	if len(m.LastBillEntName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LastBillEntName)))
		i += copy(dAtA[i:], m.LastBillEntName)
	}
	if len(m.LastBillEntCode) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LastBillEntCode)))
		i += copy(dAtA[i:], m.LastBillEntCode)
	}
	if len(m.LastBillPublicKey) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LastBillPublicKey)))
		i += copy(dAtA[i:], m.LastBillPublicKey)
	}
	if len(m.SignDay) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SignDay)))
		i += copy(dAtA[i:], m.SignDay)
	}
	if len(m.PayDay) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayDay)))
		i += copy(dAtA[i:], m.PayDay)
	}
	if len(m.PreMideaDraftId) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PreMideaDraftId)))
		i += copy(dAtA[i:], m.PreMideaDraftId)
	}
	if len(m.NextMideaDraftId) > 0 {
		for _, s := range m.NextMideaDraftId {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.BillState != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillState))
	}
	if len(m.CreateTime) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreateTime)))
		i += copy(dAtA[i:], m.CreateTime)
	}
	if len(m.UpdateTime) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateTime)))
		i += copy(dAtA[i:], m.UpdateTime)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.UserRole != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserRole))
	}
	if len(m.ContactName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContactName)))
		i += copy(dAtA[i:], m.ContactName)
	}
	if len(m.UserPublicKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPublicKey)))
		i += copy(dAtA[i:], m.UserPublicKey)
	}
	if len(m.UserPublicKeyList) > 0 {
		for _, b := range m.UserPublicKeyList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.EntName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntName)))
		i += copy(dAtA[i:], m.EntName)
	}
	if len(m.EntCode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntCode)))
		i += copy(dAtA[i:], m.EntCode)
	}
	if len(m.EntPublicKey) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntPublicKey)))
		i += copy(dAtA[i:], m.EntPublicKey)
	}
	if len(m.CreateTime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreateTime)))
		i += copy(dAtA[i:], m.CreateTime)
	}
	if len(m.UpdateTime) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateTime)))
		i += copy(dAtA[i:], m.UpdateTime)
	}
	return i, nil
}

func (m *EntInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntCode)))
		i += copy(dAtA[i:], m.EntCode)
	}
	if len(m.EntName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntName)))
		i += copy(dAtA[i:], m.EntName)
	}
	if len(m.EntPublicKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntPublicKey)))
		i += copy(dAtA[i:], m.EntPublicKey)
	}
	if m.EntType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EntType))
	}
	if len(m.CreateTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreateTime)))
		i += copy(dAtA[i:], m.CreateTime)
	}
	if len(m.UpdateTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateTime)))
		i += copy(dAtA[i:], m.UpdateTime)
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.InstructionId != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.ActionId != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ActionId))
	}
	return i, nil
}

func (m *Request_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n2, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Request_AddManager) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddManager != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddManager.Size()))
		n3, err := m.AddManager.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Request_RegisterUser) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterUser != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterUser.Size()))
		n4, err := m.RegisterUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Request_AddUser) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddUser != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddUser.Size()))
		n5, err := m.AddUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Request_UserInfoModify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserInfoModify != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserInfoModify.Size()))
		n6, err := m.UserInfoModify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Request_UserPwdModify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserPwdModify != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserPwdModify.Size()))
		n7, err := m.UserPwdModify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Request_UserPwdReset) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserPwdReset != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserPwdReset.Size()))
		n8, err := m.UserPwdReset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Request_EntIdentifyCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EntIdentifyCheck != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EntIdentifyCheck.Size()))
		n9, err := m.EntIdentifyCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Request_EntInfoModify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EntInfoModify != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EntInfoModify.Size()))
		n10, err := m.EntInfoModify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Request_ApplyBill) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBill != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBill.Size()))
		n11, err := m.ApplyBill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Request_ApplyBillSign) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBillSign != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBillSign.Size()))
		n12, err := m.ApplyBillSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Request_ApplyBillSignRefuse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBillSignRefuse != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBillSignRefuse.Size()))
		n13, err := m.ApplyBillSignRefuse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Request_ApplyBillSignCancle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBillSignCancle != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBillSignCancle.Size()))
		n14, err := m.ApplyBillSignCancle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Request_BillTotalTransfer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTotalTransfer != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTotalTransfer.Size()))
		n15, err := m.BillTotalTransfer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Request_BillPartTransfer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillPartTransfer != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillPartTransfer.Size()))
		n16, err := m.BillPartTransfer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Request_BillTransferSign) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferSign != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferSign.Size()))
		n17, err := m.BillTransferSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Request_BillTransferRefuse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferRefuse != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferRefuse.Size()))
		n18, err := m.BillTransferRefuse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Request_BillTransferCancle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferCancle != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferCancle.Size()))
		n19, err := m.BillTransferCancle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Request_BillTransferForcePay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferForcePay != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferForcePay.Size()))
		n20, err := m.BillTransferForcePay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Request_BillTotalFinancing) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTotalFinancing != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTotalFinancing.Size()))
		n21, err := m.BillTotalFinancing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Request_BillPartFinancing) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillPartFinancing != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillPartFinancing.Size()))
		n22, err := m.BillPartFinancing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Request_BillFinancingCheckOk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillFinancingCheckOk != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillFinancingCheckOk.Size()))
		n23, err := m.BillFinancingCheckOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Request_BillFinancingCheckFail) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillFinancingCheckFail != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillFinancingCheckFail.Size()))
		n24, err := m.BillFinancingCheckFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Request_BillFinancingFail) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillFinancingFail != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillFinancingFail.Size()))
		n25, err := m.BillFinancingFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Request_BillPay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillPay != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillPay.Size()))
		n26, err := m.BillPay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *RequestInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestAddManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddManager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.UserPublicKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPublicKey)))
		i += copy(dAtA[i:], m.UserPublicKey)
	}
	if len(m.ContactName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContactName)))
		i += copy(dAtA[i:], m.ContactName)
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	return i, nil
}

func (m *RequestRegisterUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntCode)))
		i += copy(dAtA[i:], m.EntCode)
	}
	if len(m.ContactName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContactName)))
		i += copy(dAtA[i:], m.ContactName)
	}
	return i, nil
}

func (m *RequestAddUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.UserRole != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserRole))
	}
	if len(m.UserPublicKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPublicKey)))
		i += copy(dAtA[i:], m.UserPublicKey)
	}
	if len(m.ContactName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContactName)))
		i += copy(dAtA[i:], m.ContactName)
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	return i, nil
}

func (m *RequestUserInfoModify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUserInfoModify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserRole != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserRole))
	}
	if len(m.ContactName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContactName)))
		i += copy(dAtA[i:], m.ContactName)
	}
	return i, nil
}

func (m *RequestUserPwdModify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUserPwdModify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPublicKey)))
		i += copy(dAtA[i:], m.UserPublicKey)
	}
	return i, nil
}

func (m *RequestUserPwdReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUserPwdReset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.UserPublicKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserPublicKey)))
		i += copy(dAtA[i:], m.UserPublicKey)
	}
	return i, nil
}

func (m *RequestEntIdentifyCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEntIdentifyCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.EntCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntCode)))
		i += copy(dAtA[i:], m.EntCode)
	}
	if len(m.EntName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntName)))
		i += copy(dAtA[i:], m.EntName)
	}
	if m.EntType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EntType))
	}
	return i, nil
}

func (m *RequestEntInfoModify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEntInfoModify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntName)))
		i += copy(dAtA[i:], m.EntName)
	}
	return i, nil
}

func (m *RequestApplyBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestApplyBill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if m.MideaDraftAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MideaDraftAmount))
	}
	if len(m.IssueBillDay) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IssueBillDay)))
		i += copy(dAtA[i:], m.IssueBillDay)
	}
	if len(m.ExpireDay) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpireDay)))
		i += copy(dAtA[i:], m.ExpireDay)
	}
	if len(m.PayNum) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayNum)))
		i += copy(dAtA[i:], m.PayNum)
	}
	if len(m.RecvBillEntName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillEntName)))
		i += copy(dAtA[i:], m.RecvBillEntName)
	}
	if len(m.RecvBillEntCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillEntCode)))
		i += copy(dAtA[i:], m.RecvBillEntCode)
	}
	return i, nil
}

func (m *RequestApplyBillSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestApplyBillSign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestApplyBillSignRefuse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestApplyBillSignRefuse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestApplyBillSignCancle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestApplyBillSignCancle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillTotalTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillTotalTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if len(m.WaitRecvBillEntName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntName)))
		i += copy(dAtA[i:], m.WaitRecvBillEntName)
	}
	if len(m.WaitRecvBillEntCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntCode)))
		i += copy(dAtA[i:], m.WaitRecvBillEntCode)
	}
	return i, nil
}

func (m *SubTransferOrFinancing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubTransferOrFinancing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if m.MideaDraftAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MideaDraftAmount))
	}
	if len(m.WaitRecvBillEntName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntName)))
		i += copy(dAtA[i:], m.WaitRecvBillEntName)
	}
	if len(m.WaitRecvBillEntCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntCode)))
		i += copy(dAtA[i:], m.WaitRecvBillEntCode)
	}
	return i, nil
}

func (m *RequestBillPartTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillPartTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if len(m.Sub) > 0 {
		for _, msg := range m.Sub {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestBillTransferSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillTransferSign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillTransferRefuse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillTransferRefuse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillTransferCancle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillTransferCancle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillTransferForcePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillTransferForcePay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if len(m.RecvBillEntName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillEntName)))
		i += copy(dAtA[i:], m.RecvBillEntName)
	}
	if len(m.RecvBillEntCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecvBillEntCode)))
		i += copy(dAtA[i:], m.RecvBillEntCode)
	}
	return i, nil
}

func (m *RequestBillTotalFinancing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillTotalFinancing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if len(m.WaitRecvBillEntName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntName)))
		i += copy(dAtA[i:], m.WaitRecvBillEntName)
	}
	if len(m.WaitRecvBillEntCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WaitRecvBillEntCode)))
		i += copy(dAtA[i:], m.WaitRecvBillEntCode)
	}
	return i, nil
}

func (m *RequestBillPartFinancing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillPartFinancing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	if len(m.Sub) > 0 {
		for _, msg := range m.Sub {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestBillFinancingCheckOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillFinancingCheckOk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillFinancingCheckFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillFinancingCheckFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillFinancingFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillFinancingFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillPay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *RequestBillQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBillQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MideaDraftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MideaDraftId)))
		i += copy(dAtA[i:], m.MideaDraftId)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn27, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn27
	}
	return i, nil
}

func (m *Response_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n28, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Response_AddManager) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddManager != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddManager.Size()))
		n29, err := m.AddManager.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Response_RegisterUser) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterUser != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RegisterUser.Size()))
		n30, err := m.RegisterUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Response_AddUser) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddUser != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddUser.Size()))
		n31, err := m.AddUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *Response_UserInfoModify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserInfoModify != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserInfoModify.Size()))
		n32, err := m.UserInfoModify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *Response_UserPwdModify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserPwdModify != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserPwdModify.Size()))
		n33, err := m.UserPwdModify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Response_UserPwdReset) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UserPwdReset != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserPwdReset.Size()))
		n34, err := m.UserPwdReset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *Response_EntIdentifyCheck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EntIdentifyCheck != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EntIdentifyCheck.Size()))
		n35, err := m.EntIdentifyCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *Response_EntInfoModify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EntInfoModify != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EntInfoModify.Size()))
		n36, err := m.EntInfoModify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *Response_ApplyBill) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBill != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBill.Size()))
		n37, err := m.ApplyBill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *Response_ApplyBillSign) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBillSign != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBillSign.Size()))
		n38, err := m.ApplyBillSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *Response_ApplyBillSignRefuse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBillSignRefuse != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBillSignRefuse.Size()))
		n39, err := m.ApplyBillSignRefuse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *Response_ApplyBillSignCancle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyBillSignCancle != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyBillSignCancle.Size()))
		n40, err := m.ApplyBillSignCancle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *Response_BillTotalTransfer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTotalTransfer != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTotalTransfer.Size()))
		n41, err := m.BillTotalTransfer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *Response_BillPartTransfer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillPartTransfer != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillPartTransfer.Size()))
		n42, err := m.BillPartTransfer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *Response_BillTransferSign) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferSign != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferSign.Size()))
		n43, err := m.BillTransferSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *Response_BillTransferRefuse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferRefuse != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferRefuse.Size()))
		n44, err := m.BillTransferRefuse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *Response_BillTransferCancle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferCancle != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferCancle.Size()))
		n45, err := m.BillTransferCancle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *Response_BillTransferForcePay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTransferForcePay != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTransferForcePay.Size()))
		n46, err := m.BillTransferForcePay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *Response_BillTotalFinancing) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillTotalFinancing != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillTotalFinancing.Size()))
		n47, err := m.BillTotalFinancing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *Response_BillPartFinancing) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillPartFinancing != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillPartFinancing.Size()))
		n48, err := m.BillPartFinancing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *Response_BillFinancingCheckOk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillFinancingCheckOk != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillFinancingCheckOk.Size()))
		n49, err := m.BillFinancingCheckOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *Response_BillFinancingCheckFail) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillFinancingCheckFail != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillFinancingCheckFail.Size()))
		n50, err := m.BillFinancingCheckFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *Response_BillFinancingFail) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillFinancingFail != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillFinancingFail.Size()))
		n51, err := m.BillFinancingFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *Response_BillPay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BillPay != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BillPay.Size()))
		n52, err := m.BillPay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}
func (m *ResponseInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseAddManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAddManager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseRegisterUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseRegisterUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseAddUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAddUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseUserInfoModify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserInfoModify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseUserPwdModify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserPwdModify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseUserPwdReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserPwdReset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseEntIdentifyCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEntIdentifyCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseEntInfoModify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEntInfoModify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseApplyBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseApplyBill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseApplyBillSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseApplyBillSign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseApplyBillSignRefuse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseApplyBillSignRefuse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseApplyBillSignCancle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseApplyBillSignCancle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillTotalTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillTotalTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillPartTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillPartTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillTransferSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillTransferSign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillTransferRefuse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillTransferRefuse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillTransferCancle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillTransferCancle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillTransferForcePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillTransferForcePay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillTotalFinancing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillTotalFinancing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillPartFinancing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillPartFinancing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillFinancingCheckOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillFinancingCheckOk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillFinancingCheckFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillFinancingCheckFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillFinancingFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillFinancingFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func (m *ResponseBillPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBillPay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MideaBill) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MideaDraftAmount != 0 {
		n += 1 + sovApi(uint64(m.MideaDraftAmount))
	}
	l = len(m.IssueBillDay)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExpireDay)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IssueBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IssueBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IssueBillPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PayNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LastBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LastBillEntCode)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LastBillPublicKey)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SignDay)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PayDay)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PreMideaDraftId)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if len(m.NextMideaDraftId) > 0 {
		for _, s := range m.NextMideaDraftId {
			l = len(s)
			n += 2 + l + sovApi(uint64(l))
		}
	}
	if m.BillState != 0 {
		n += 2 + sovApi(uint64(m.BillState))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserRole != 0 {
		n += 1 + sovApi(uint64(m.UserRole))
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UserPublicKeyList) > 0 {
		for _, b := range m.UserPublicKeyList {
			l = len(b)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.EntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EntInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.EntType != 0 {
		n += 1 + sovApi(uint64(m.EntType))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	l = len(m.UserName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.InstructionId != 0 {
		n += 2 + sovApi(uint64(m.InstructionId))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ActionId != 0 {
		n += 2 + sovApi(uint64(m.ActionId))
	}
	return n
}

func (m *Request_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_AddManager) Size() (n int) {
	var l int
	_ = l
	if m.AddManager != nil {
		l = m.AddManager.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_RegisterUser) Size() (n int) {
	var l int
	_ = l
	if m.RegisterUser != nil {
		l = m.RegisterUser.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_AddUser) Size() (n int) {
	var l int
	_ = l
	if m.AddUser != nil {
		l = m.AddUser.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_UserInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.UserInfoModify != nil {
		l = m.UserInfoModify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_UserPwdModify) Size() (n int) {
	var l int
	_ = l
	if m.UserPwdModify != nil {
		l = m.UserPwdModify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_UserPwdReset) Size() (n int) {
	var l int
	_ = l
	if m.UserPwdReset != nil {
		l = m.UserPwdReset.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_EntIdentifyCheck) Size() (n int) {
	var l int
	_ = l
	if m.EntIdentifyCheck != nil {
		l = m.EntIdentifyCheck.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_EntInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.EntInfoModify != nil {
		l = m.EntInfoModify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ApplyBill) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBill != nil {
		l = m.ApplyBill.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ApplyBillSign) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBillSign != nil {
		l = m.ApplyBillSign.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ApplyBillSignRefuse) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBillSignRefuse != nil {
		l = m.ApplyBillSignRefuse.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ApplyBillSignCancle) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBillSignCancle != nil {
		l = m.ApplyBillSignCancle.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillTotalTransfer) Size() (n int) {
	var l int
	_ = l
	if m.BillTotalTransfer != nil {
		l = m.BillTotalTransfer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillPartTransfer) Size() (n int) {
	var l int
	_ = l
	if m.BillPartTransfer != nil {
		l = m.BillPartTransfer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillTransferSign) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferSign != nil {
		l = m.BillTransferSign.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillTransferRefuse) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferRefuse != nil {
		l = m.BillTransferRefuse.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillTransferCancle) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferCancle != nil {
		l = m.BillTransferCancle.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillTransferForcePay) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferForcePay != nil {
		l = m.BillTransferForcePay.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillTotalFinancing) Size() (n int) {
	var l int
	_ = l
	if m.BillTotalFinancing != nil {
		l = m.BillTotalFinancing.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillPartFinancing) Size() (n int) {
	var l int
	_ = l
	if m.BillPartFinancing != nil {
		l = m.BillPartFinancing.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillFinancingCheckOk) Size() (n int) {
	var l int
	_ = l
	if m.BillFinancingCheckOk != nil {
		l = m.BillFinancingCheckOk.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillFinancingCheckFail) Size() (n int) {
	var l int
	_ = l
	if m.BillFinancingCheckFail != nil {
		l = m.BillFinancingCheckFail.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillFinancingFail) Size() (n int) {
	var l int
	_ = l
	if m.BillFinancingFail != nil {
		l = m.BillFinancingFail.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_BillPay) Size() (n int) {
	var l int
	_ = l
	if m.BillPay != nil {
		l = m.BillPay.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RequestInitPlatform) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RequestAddManager) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestRegisterUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestAddUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserRole != 0 {
		n += 1 + sovApi(uint64(m.UserRole))
	}
	l = len(m.UserPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestUserInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.UserRole != 0 {
		n += 1 + sovApi(uint64(m.UserRole))
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestUserPwdModify) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestUserPwdReset) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserPublicKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestEntIdentifyCheck) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.EntType != 0 {
		n += 1 + sovApi(uint64(m.EntType))
	}
	return n
}

func (m *RequestEntInfoModify) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestApplyBill) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MideaDraftAmount != 0 {
		n += 1 + sovApi(uint64(m.MideaDraftAmount))
	}
	l = len(m.IssueBillDay)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExpireDay)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PayNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestApplyBillSign) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestApplyBillSignRefuse) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestApplyBillSignCancle) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillTotalTransfer) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SubTransferOrFinancing) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MideaDraftAmount != 0 {
		n += 1 + sovApi(uint64(m.MideaDraftAmount))
	}
	l = len(m.WaitRecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillPartTransfer) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Sub) > 0 {
		for _, e := range m.Sub {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestBillTransferSign) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillTransferRefuse) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillTransferCancle) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillTransferForcePay) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillTotalFinancing) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WaitRecvBillEntCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillPartFinancing) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Sub) > 0 {
		for _, e := range m.Sub {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestBillFinancingCheckOk) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillFinancingCheckFail) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillFinancingFail) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillPay) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestBillQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.MideaDraftId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Response_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_AddManager) Size() (n int) {
	var l int
	_ = l
	if m.AddManager != nil {
		l = m.AddManager.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_RegisterUser) Size() (n int) {
	var l int
	_ = l
	if m.RegisterUser != nil {
		l = m.RegisterUser.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_AddUser) Size() (n int) {
	var l int
	_ = l
	if m.AddUser != nil {
		l = m.AddUser.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_UserInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.UserInfoModify != nil {
		l = m.UserInfoModify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_UserPwdModify) Size() (n int) {
	var l int
	_ = l
	if m.UserPwdModify != nil {
		l = m.UserPwdModify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_UserPwdReset) Size() (n int) {
	var l int
	_ = l
	if m.UserPwdReset != nil {
		l = m.UserPwdReset.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_EntIdentifyCheck) Size() (n int) {
	var l int
	_ = l
	if m.EntIdentifyCheck != nil {
		l = m.EntIdentifyCheck.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_EntInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.EntInfoModify != nil {
		l = m.EntInfoModify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ApplyBill) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBill != nil {
		l = m.ApplyBill.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ApplyBillSign) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBillSign != nil {
		l = m.ApplyBillSign.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ApplyBillSignRefuse) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBillSignRefuse != nil {
		l = m.ApplyBillSignRefuse.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ApplyBillSignCancle) Size() (n int) {
	var l int
	_ = l
	if m.ApplyBillSignCancle != nil {
		l = m.ApplyBillSignCancle.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillTotalTransfer) Size() (n int) {
	var l int
	_ = l
	if m.BillTotalTransfer != nil {
		l = m.BillTotalTransfer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillPartTransfer) Size() (n int) {
	var l int
	_ = l
	if m.BillPartTransfer != nil {
		l = m.BillPartTransfer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillTransferSign) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferSign != nil {
		l = m.BillTransferSign.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillTransferRefuse) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferRefuse != nil {
		l = m.BillTransferRefuse.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillTransferCancle) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferCancle != nil {
		l = m.BillTransferCancle.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillTransferForcePay) Size() (n int) {
	var l int
	_ = l
	if m.BillTransferForcePay != nil {
		l = m.BillTransferForcePay.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillTotalFinancing) Size() (n int) {
	var l int
	_ = l
	if m.BillTotalFinancing != nil {
		l = m.BillTotalFinancing.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillPartFinancing) Size() (n int) {
	var l int
	_ = l
	if m.BillPartFinancing != nil {
		l = m.BillPartFinancing.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillFinancingCheckOk) Size() (n int) {
	var l int
	_ = l
	if m.BillFinancingCheckOk != nil {
		l = m.BillFinancingCheckOk.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillFinancingCheckFail) Size() (n int) {
	var l int
	_ = l
	if m.BillFinancingCheckFail != nil {
		l = m.BillFinancingCheckFail.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillFinancingFail) Size() (n int) {
	var l int
	_ = l
	if m.BillFinancingFail != nil {
		l = m.BillFinancingFail.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_BillPay) Size() (n int) {
	var l int
	_ = l
	if m.BillPay != nil {
		l = m.BillPay.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ResponseInitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseAddManager) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseRegisterUser) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseAddUser) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseUserInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseUserPwdModify) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseUserPwdReset) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseEntIdentifyCheck) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseEntInfoModify) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseApplyBill) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseApplyBillSign) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseApplyBillSignRefuse) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseApplyBillSignCancle) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillTotalTransfer) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillPartTransfer) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillTransferSign) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillTransferRefuse) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillTransferCancle) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillTransferForcePay) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillTotalFinancing) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillPartFinancing) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillFinancingCheckOk) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillFinancingCheckFail) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillFinancingFail) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func (m *ResponseBillPay) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MideaBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MideaBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MideaBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftAmount", wireType)
			}
			m.MideaDraftAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MideaDraftAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBillDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueBillDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBillPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueBillPublicKey = append(m.IssueBillPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.IssueBillPublicKey == nil {
				m.IssueBillPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillPublicKey = append(m.RecvBillPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvBillPublicKey == nil {
				m.RecvBillPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillPublicKey = append(m.WaitRecvBillPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.WaitRecvBillPublicKey == nil {
				m.WaitRecvBillPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBillPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBillPublicKey = append(m.LastBillPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LastBillPublicKey == nil {
				m.LastBillPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreMideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreMideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextMideaDraftId = append(m.NextMideaDraftId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillState", wireType)
			}
			m.BillState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillState |= (BillState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRole", wireType)
			}
			m.UserRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserRole |= (UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPublicKey = append(m.UserPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPublicKey == nil {
				m.UserPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPublicKeyList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPublicKeyList = append(m.UserPublicKeyList, make([]byte, postIndex-iNdEx))
			copy(m.UserPublicKeyList[len(m.UserPublicKeyList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntPublicKey = append(m.EntPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EntPublicKey == nil {
				m.EntPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntPublicKey = append(m.EntPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EntPublicKey == nil {
				m.EntPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntType", wireType)
			}
			m.EntType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntType |= (EntType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAddManager{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_AddManager{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestRegisterUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_RegisterUser{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAddUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_AddUser{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestUserInfoModify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_UserInfoModify{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPwdModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestUserPwdModify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_UserPwdModify{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPwdReset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestUserPwdReset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_UserPwdReset{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdentifyCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestEntIdentifyCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_EntIdentifyCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntInfoModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestEntInfoModify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_EntInfoModify{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestApplyBill{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ApplyBill{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBillSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestApplyBillSign{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ApplyBillSign{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBillSignRefuse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestApplyBillSignRefuse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ApplyBillSignRefuse{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBillSignCancle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestApplyBillSignCancle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ApplyBillSignCancle{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillTotalTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillTotalTransfer{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillPartTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillPartTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillPartTransfer{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillTransferSign{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillTransferSign{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferRefuse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillTransferRefuse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillTransferRefuse{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferCancle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillTransferCancle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillTransferCancle{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferForcePay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillTransferForcePay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillTransferForcePay{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalFinancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillTotalFinancing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillTotalFinancing{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillPartFinancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillPartFinancing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillPartFinancing{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFinancingCheckOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillFinancingCheckOk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillFinancingCheckOk{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFinancingCheckFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillFinancingCheckFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillFinancingCheckFail{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFinancingFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillFinancingFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillFinancingFail{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillPay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestBillPay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_BillPay{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPublicKey = append(m.UserPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPublicKey == nil {
				m.UserPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRole", wireType)
			}
			m.UserRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserRole |= (UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPublicKey = append(m.UserPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPublicKey == nil {
				m.UserPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUserInfoModify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUserInfoModify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUserInfoModify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRole", wireType)
			}
			m.UserRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserRole |= (UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUserPwdModify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUserPwdModify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUserPwdModify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPublicKey = append(m.UserPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPublicKey == nil {
				m.UserPublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUserPwdReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUserPwdReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUserPwdReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPublicKey = append(m.UserPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserPublicKey == nil {
				m.UserPublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEntIdentifyCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEntIdentifyCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEntIdentifyCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntType", wireType)
			}
			m.EntType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntType |= (EntType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEntInfoModify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEntInfoModify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEntInfoModify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestApplyBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestApplyBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestApplyBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftAmount", wireType)
			}
			m.MideaDraftAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MideaDraftAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBillDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueBillDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestApplyBillSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestApplyBillSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestApplyBillSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestApplyBillSignRefuse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestApplyBillSignRefuse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestApplyBillSignRefuse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestApplyBillSignCancle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestApplyBillSignCancle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestApplyBillSignCancle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillTotalTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillTotalTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillTotalTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubTransferOrFinancing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubTransferOrFinancing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubTransferOrFinancing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftAmount", wireType)
			}
			m.MideaDraftAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MideaDraftAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillPartTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillPartTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillPartTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sub = append(m.Sub, &SubTransferOrFinancing{})
			if err := m.Sub[len(m.Sub)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillTransferSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillTransferSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillTransferSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillTransferRefuse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillTransferRefuse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillTransferRefuse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillTransferCancle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillTransferCancle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillTransferCancle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillTransferForcePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillTransferForcePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillTransferForcePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillTotalFinancing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillTotalFinancing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillTotalFinancing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitRecvBillEntCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitRecvBillEntCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillPartFinancing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillPartFinancing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillPartFinancing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sub = append(m.Sub, &SubTransferOrFinancing{})
			if err := m.Sub[len(m.Sub)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillFinancingCheckOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillFinancingCheckOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillFinancingCheckOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillFinancingCheckFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillFinancingCheckFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillFinancingCheckFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillFinancingFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillFinancingFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillFinancingFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBillQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBillQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBillQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MideaDraftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MideaDraftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAddManager{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_AddManager{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseRegisterUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_RegisterUser{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAddUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_AddUser{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfoModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseUserInfoModify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_UserInfoModify{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPwdModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseUserPwdModify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_UserPwdModify{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPwdReset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseUserPwdReset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_UserPwdReset{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdentifyCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseEntIdentifyCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_EntIdentifyCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntInfoModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseEntInfoModify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_EntInfoModify{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseApplyBill{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ApplyBill{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBillSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseApplyBillSign{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ApplyBillSign{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBillSignRefuse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseApplyBillSignRefuse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ApplyBillSignRefuse{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBillSignCancle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseApplyBillSignCancle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ApplyBillSignCancle{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillTotalTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillTotalTransfer{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillPartTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillPartTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillPartTransfer{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillTransferSign{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillTransferSign{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferRefuse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillTransferRefuse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillTransferRefuse{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferCancle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillTransferCancle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillTransferCancle{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTransferForcePay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillTransferForcePay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillTransferForcePay{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalFinancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillTotalFinancing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillTotalFinancing{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillPartFinancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillPartFinancing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillPartFinancing{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFinancingCheckOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillFinancingCheckOk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillFinancingCheckOk{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFinancingCheckFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillFinancingCheckFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillFinancingCheckFail{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillFinancingFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillFinancingFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillFinancingFail{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillPay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseBillPay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_BillPay{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAddManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAddManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAddManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseRegisterUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseRegisterUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseRegisterUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAddUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAddUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAddUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserInfoModify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUserInfoModify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUserInfoModify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserPwdModify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUserPwdModify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUserPwdModify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserPwdReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUserPwdReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUserPwdReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEntIdentifyCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEntIdentifyCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEntIdentifyCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEntInfoModify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEntInfoModify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEntInfoModify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseApplyBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseApplyBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseApplyBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseApplyBillSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseApplyBillSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseApplyBillSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseApplyBillSignRefuse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseApplyBillSignRefuse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseApplyBillSignRefuse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseApplyBillSignCancle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseApplyBillSignCancle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseApplyBillSignCancle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillTotalTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillTotalTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillTotalTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillPartTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillPartTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillPartTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillTransferSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillTransferSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillTransferSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillTransferRefuse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillTransferRefuse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillTransferRefuse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillTransferCancle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillTransferCancle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillTransferCancle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillTransferForcePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillTransferForcePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillTransferForcePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillTotalFinancing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillTotalFinancing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillTotalFinancing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillPartFinancing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillPartFinancing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillPartFinancing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillFinancingCheckOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillFinancingCheckOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillFinancingCheckOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillFinancingCheckFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillFinancingCheckFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillFinancingCheckFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillFinancingFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillFinancingFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillFinancingFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBillPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBillPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBillPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 2397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x73, 0x23, 0x47,
	0x15, 0xd6, 0x48, 0xb6, 0x25, 0x1d, 0xf9, 0xd2, 0x6e, 0x5f, 0x76, 0xec, 0xf5, 0x3a, 0x8a, 0xd6,
	0x1b, 0x8c, 0x2b, 0xb5, 0xa4, 0x94, 0xb0, 0x14, 0x21, 0xd9, 0xc4, 0x17, 0x6d, 0x64, 0x82, 0xd6,
	0xf6, 0xd8, 0x8b, 0x8b, 0x14, 0xfb, 0x30, 0x96, 0xda, 0x62, 0xb0, 0x34, 0x12, 0x73, 0xc9, 0xc6,
	0xff, 0x82, 0x2a, 0x8a, 0x82, 0x67, 0xf8, 0x25, 0x79, 0xe3, 0x81, 0x2a, 0x78, 0xe3, 0x95, 0xda,
	0x14, 0x4f, 0x3c, 0xf2, 0x07, 0xa8, 0xee, 0xb9, 0xa8, 0x7b, 0xa6, 0xe7, 0x22, 0x6f, 0xa0, 0xf2,
	0xe4, 0x9d, 0x73, 0xf9, 0xe6, 0xf4, 0x39, 0xdd, 0x7d, 0xce, 0x7c, 0x2b, 0xa8, 0xea, 0x63, 0xe3,
	0xf1, 0xd8, 0x1a, 0x39, 0x23, 0x5c, 0x1d, 0x1a, 0x3d, 0xa2, 0x1f, 0x18, 0x83, 0x41, 0xe3, 0x1f,
	0x65, 0xa8, 0x76, 0x82, 0x27, 0xdc, 0x80, 0x79, 0xa6, 0x3a, 0xb2, 0xf4, 0x6b, 0xe7, 0xb8, 0xa7,
	0x2a, 0x75, 0x65, 0xb7, 0xaa, 0x09, 0x32, 0xbc, 0x07, 0x68, 0xf2, 0xbc, 0x3f, 0x1c, 0xb9, 0xa6,
	0xa3, 0x16, 0xeb, 0xca, 0x6e, 0x49, 0x8b, 0xc9, 0x29, 0x9e, 0x61, 0xdb, 0x2e, 0xa1, 0xe0, 0x47,
	0xfa, 0xad, 0x5a, 0xf2, 0xf0, 0x78, 0x19, 0xde, 0x82, 0x2a, 0xf9, 0x6a, 0x6c, 0x58, 0x84, 0x1a,
	0xcc, 0x30, 0x83, 0x89, 0x80, 0xbe, 0x2d, 0xb4, 0x6e, 0x99, 0xce, 0x73, 0x7d, 0x48, 0xd4, 0x59,
	0x66, 0x14, 0x93, 0x47, 0x6d, 0x0f, 0x47, 0x3d, 0xa2, 0xce, 0xc5, 0x6d, 0xa9, 0x1c, 0x3f, 0x06,
	0x1c, 0xca, 0x4e, 0xdd, 0xab, 0x81, 0xd1, 0xfd, 0x9c, 0xdc, 0xaa, 0xe5, 0xba, 0xb2, 0x3b, 0xaf,
	0x49, 0x34, 0x78, 0x1d, 0xe6, 0xc6, 0xfa, 0xed, 0x73, 0x77, 0xa8, 0x56, 0x18, 0xa2, 0xff, 0x84,
	0x77, 0x61, 0xc9, 0x22, 0xdd, 0x2f, 0xf9, 0xf0, 0xaa, 0xcc, 0x20, 0x2a, 0x8e, 0x58, 0xb2, 0xe0,
	0x20, 0x66, 0xc9, 0x62, 0x7b, 0x17, 0x96, 0x03, 0xd1, 0x24, 0xb4, 0x1a, 0x0b, 0x2d, 0xae, 0xc0,
	0xef, 0xc1, 0xca, 0x2b, 0xdd, 0x70, 0xb4, 0x48, 0x14, 0xf3, 0x0c, 0x5b, 0xa6, 0x92, 0x78, 0xb0,
	0x68, 0x16, 0xa4, 0x1e, 0x2c, 0xa2, 0x0f, 0x60, 0x8d, 0x17, 0x4f, 0xa2, 0x5a, 0x64, 0x51, 0xc9,
	0x95, 0x74, 0xc5, 0x03, 0xdd, 0x76, 0xf8, 0xa8, 0x96, 0xbc, 0x15, 0x47, 0xc4, 0x11, 0x4b, 0x16,
	0x0d, 0x8a, 0x59, 0x06, 0xb9, 0x09, 0x44, 0x93, 0x28, 0x96, 0xbd, 0xdc, 0xc4, 0x14, 0x58, 0x85,
	0xb2, 0x6d, 0xf4, 0x4d, 0xba, 0xb3, 0x30, 0xc3, 0x0b, 0x1e, 0xfd, 0x7a, 0x52, 0xc5, 0x4a, 0x58,
	0x4f, 0x2a, 0xdf, 0x85, 0xa5, 0xb1, 0x45, 0x3a, 0xfc, 0x21, 0x58, 0xf5, 0x22, 0x89, 0x88, 0xe9,
	0x6e, 0x33, 0xc9, 0x57, 0x8e, 0x60, 0xba, 0x56, 0x2f, 0xd1, 0xdd, 0x16, 0x95, 0xe3, 0x26, 0x54,
	0xaf, 0x8c, 0xc1, 0xe0, 0xdc, 0xd1, 0x1d, 0xa2, 0xae, 0xd7, 0x95, 0xdd, 0xc5, 0xe6, 0xea, 0xe3,
	0xf0, 0x10, 0x3e, 0x3e, 0x08, 0x74, 0xda, 0xc4, 0x0c, 0x6f, 0x03, 0x74, 0x2d, 0xa2, 0x3b, 0xe4,
	0xc2, 0x18, 0x12, 0xf5, 0x1e, 0x0b, 0x82, 0x93, 0x50, 0xbd, 0x3b, 0xee, 0x05, 0x7a, 0xd5, 0xd3,
	0x4f, 0x24, 0x8d, 0x7f, 0x15, 0xa1, 0xf2, 0xc2, 0x26, 0xd6, 0xb1, 0x79, 0x3d, 0xc2, 0x9b, 0x50,
	0x71, 0x6d, 0x62, 0xb1, 0x1a, 0x78, 0x87, 0x3a, 0x7c, 0xc6, 0x3f, 0xf0, 0x74, 0xda, 0x68, 0x40,
	0xd8, 0x41, 0x5e, 0x6c, 0xae, 0x70, 0xb1, 0xbd, 0xf0, 0x55, 0x5a, 0x68, 0x84, 0xeb, 0x50, 0xeb,
	0x8e, 0x4c, 0x47, 0xef, 0x7a, 0x35, 0xf5, 0x0e, 0x35, 0x2f, 0xc2, 0x3b, 0xb0, 0x40, 0xad, 0x27,
	0x15, 0x9a, 0x65, 0x15, 0x12, 0x85, 0xb4, 0x96, 0x82, 0xe0, 0x67, 0x86, 0xed, 0xa8, 0x73, 0xf5,
	0x12, 0xad, 0x65, 0x4c, 0x41, 0x6b, 0x49, 0xfc, 0x5d, 0x54, 0xf6, 0x6a, 0xe9, 0x3f, 0xfa, 0x1a,
	0xb6, 0x6b, 0x2a, 0xa1, 0x86, 0xed, 0x96, 0x06, 0xcc, 0x13, 0xd3, 0x99, 0x84, 0x51, 0x65, 0x61,
	0x08, 0xb2, 0x48, 0x9e, 0x21, 0x23, 0xcf, 0xb5, 0x58, 0x9e, 0xff, 0xa6, 0x40, 0xb9, 0x65, 0x3a,
	0x2c, 0xcd, 0x5c, 0x24, 0x8a, 0x18, 0x09, 0x17, 0x7d, 0x51, 0x8c, 0x3e, 0x1a, 0x63, 0x49, 0x12,
	0xe3, 0xbb, 0xcc, 0xfb, 0xe2, 0x76, 0x4c, 0xd8, 0x0d, 0xb9, 0xd8, 0xc4, 0x5c, 0x85, 0x5a, 0x9e,
	0x46, 0x0b, 0x4c, 0x22, 0x2b, 0x9a, 0xcd, 0x58, 0xd1, 0x5c, 0x6c, 0x45, 0xff, 0x46, 0x50, 0xd6,
	0xc8, 0x6f, 0x5c, 0x62, 0x3b, 0xf8, 0x08, 0xe6, 0x0d, 0xd3, 0x70, 0x4e, 0x07, 0xba, 0x73, 0x3d,
	0xb2, 0x86, 0x6c, 0x59, 0xb5, 0xe6, 0x36, 0xf7, 0x7a, 0xdf, 0xf2, 0x98, 0xb3, 0x6a, 0x17, 0x34,
	0xc1, 0x0b, 0x3f, 0x05, 0xd0, 0x7b, 0xbd, 0x8e, 0x6e, 0xea, 0x7d, 0x62, 0xb1, 0x04, 0xd4, 0x9a,
	0x5b, 0x71, 0x8c, 0xfd, 0xd0, 0xa6, 0x5d, 0xd0, 0x38, 0x0f, 0x1a, 0x85, 0x45, 0xfa, 0x86, 0xed,
	0x10, 0x8b, 0xee, 0x47, 0x96, 0x23, 0x69, 0x14, 0x1a, 0x67, 0x45, 0xa3, 0xe0, 0xbd, 0xf0, 0x0f,
	0xa1, 0xac, 0xf7, 0x7a, 0x0c, 0x60, 0x86, 0x01, 0x6c, 0x48, 0x43, 0xf0, 0x7d, 0x03, 0x5b, 0xfc,
	0x53, 0x58, 0x74, 0xfd, 0x73, 0xd4, 0x19, 0xf5, 0x8c, 0x6b, 0x6f, 0x37, 0xd7, 0x9a, 0xf5, 0xb8,
	0xf7, 0x0b, 0xc1, 0xae, 0x5d, 0xd0, 0x22, 0x9e, 0xf8, 0x33, 0xff, 0x60, 0xbc, 0xea, 0xf9, 0x50,
	0x73, 0x0c, 0xea, 0x2d, 0x39, 0x54, 0x68, 0xd6, 0x2e, 0x68, 0xa2, 0x1f, 0xcd, 0x88, 0x2f, 0xd0,
	0x88, 0x4d, 0x1c, 0x76, 0x24, 0xa4, 0x19, 0x79, 0xc1, 0x59, 0xd1, 0x8c, 0xf0, 0x5e, 0xf8, 0x14,
	0x10, 0x31, 0x9d, 0xe3, 0x1e, 0x31, 0x1d, 0xe3, 0xfa, 0xf6, 0xf0, 0x57, 0xa4, 0x7b, 0xc3, 0x8e,
	0x50, 0xad, 0xd9, 0x88, 0x23, 0xb5, 0x22, 0x96, 0xed, 0x82, 0x16, 0xf3, 0xa6, 0x0b, 0x24, 0xde,
	0x61, 0xf0, 0x17, 0x58, 0x4d, 0x5a, 0x60, 0x8b, 0x37, 0xa3, 0x0b, 0x14, 0xfc, 0xf0, 0x4f, 0xe8,
	0xc0, 0x32, 0x1e, 0xdc, 0x52, 0x17, 0x76, 0x2a, 0x6b, 0xcd, 0xfb, 0x92, 0x72, 0x05, 0x26, 0xed,
	0x82, 0x36, 0xb1, 0xa7, 0x51, 0x84, 0x0f, 0xe7, 0x46, 0xdf, 0x64, 0xc7, 0x56, 0x1a, 0xc5, 0x3e,
	0x6f, 0x46, 0xa3, 0x10, 0xfc, 0xf0, 0x2f, 0x60, 0x45, 0x10, 0x68, 0xe4, 0xda, 0xb5, 0xbd, 0xe6,
	0x5a, 0x6b, 0x3e, 0xca, 0x80, 0xf3, 0x8c, 0xdb, 0x05, 0x4d, 0x86, 0x11, 0x83, 0x3e, 0xd4, 0xcd,
	0xee, 0xc0, 0xeb, 0xc2, 0xd9, 0xd0, 0x9e, 0x71, 0x0c, 0xda, 0x13, 0xe3, 0x73, 0x58, 0xa6, 0x7d,
	0xe4, 0x62, 0xe4, 0xe8, 0x83, 0x0b, 0x4b, 0x37, 0xed, 0x6b, 0x62, 0xb1, 0x56, 0x5d, 0x6b, 0x3e,
	0x8c, 0x03, 0x1f, 0x44, 0x4d, 0xdb, 0x05, 0x2d, 0xee, 0x4f, 0xf7, 0x0a, 0x15, 0x9e, 0xea, 0x96,
	0x13, 0x62, 0x2e, 0x25, 0xed, 0x95, 0x83, 0x88, 0x25, 0xdd, 0x2b, 0x51, 0xef, 0x00, 0x31, 0x78,
	0x66, 0x85, 0x42, 0x69, 0x88, 0xbc, 0x65, 0x80, 0xc8, 0xcb, 0xf0, 0xcf, 0x01, 0xf3, 0x32, 0xbf,
	0x5a, 0xcb, 0x0c, 0x73, 0x27, 0x1d, 0x33, 0x2c, 0x96, 0x04, 0x21, 0x8a, 0xeb, 0x97, 0x0a, 0xe7,
	0xc1, 0x0d, 0x2b, 0x25, 0x41, 0xc0, 0xbf, 0x84, 0x55, 0x5e, 0xfa, 0x6c, 0x64, 0x75, 0xc9, 0xa9,
	0x3f, 0x93, 0xd4, 0x9a, 0xef, 0xa4, 0x23, 0x07, 0xd6, 0xed, 0x82, 0x26, 0x45, 0x09, 0xa3, 0xa6,
	0x65, 0x7c, 0x66, 0x98, 0xba, 0xd9, 0x35, 0xcc, 0x3e, 0x1b, 0x67, 0x92, 0xa3, 0x16, 0x6c, 0xc3,
	0xa8, 0x05, 0x69, 0xb0, 0xbd, 0x68, 0x2d, 0x27, 0xb0, 0x6b, 0x69, 0xdb, 0x4b, 0x30, 0x0d, 0xb6,
	0x97, 0x20, 0x0c, 0x52, 0x11, 0x0a, 0xd8, 0x75, 0x72, 0x72, 0xc3, 0xa6, 0xa5, 0xc4, 0x54, 0x44,
	0xad, 0x83, 0x54, 0x44, 0xe5, 0xf8, 0x0a, 0xd6, 0xe3, 0xf2, 0x67, 0xba, 0x31, 0x60, 0x83, 0x55,
	0xad, 0xb9, 0x9b, 0x07, 0x9f, 0xda, 0xb7, 0x0b, 0x5a, 0x02, 0x52, 0x90, 0x96, 0x50, 0xc3, 0xe0,
	0xd5, 0xb4, 0xb4, 0x08, 0xa6, 0x41, 0x5a, 0x04, 0x21, 0xed, 0x59, 0x5e, 0xae, 0x6e, 0xd5, 0x8d,
	0xa4, 0x9e, 0xe5, 0x65, 0x98, 0xee, 0x83, 0xc0, 0x56, 0x98, 0xf7, 0x36, 0x23, 0xf3, 0xde, 0x0e,
	0x2c, 0x18, 0xa6, 0xed, 0x58, 0x6e, 0xd7, 0x31, 0x46, 0xe6, 0x71, 0x4f, 0xbd, 0xcf, 0xbe, 0xde,
	0x44, 0x21, 0x1b, 0x90, 0xdd, 0xab, 0x1b, 0x72, 0xab, 0x6e, 0xb1, 0x81, 0xc4, 0x7f, 0xc2, 0x18,
	0x66, 0xe8, 0x0c, 0xad, 0x3e, 0x60, 0x52, 0xf6, 0x6f, 0xdc, 0x84, 0x8a, 0x1e, 0x80, 0x6d, 0xb3,
	0xf9, 0x64, 0x9d, 0x8b, 0xb2, 0x43, 0x6c, 0x5b, 0xef, 0x13, 0x36, 0xa3, 0x84, 0x76, 0x07, 0x65,
	0x98, 0xfd, 0x52, 0x1f, 0xb8, 0xa4, 0xb1, 0x06, 0x2b, 0x92, 0x11, 0xa2, 0xf1, 0x3b, 0x05, 0x96,
	0x63, 0x63, 0x41, 0xea, 0x1c, 0x1b, 0x1b, 0x3a, 0x4b, 0xb2, 0xa1, 0x33, 0x32, 0xbc, 0xce, 0xc4,
	0x87, 0xd7, 0x4d, 0xa8, 0x8c, 0xc6, 0xc4, 0xd2, 0x9d, 0x91, 0xe5, 0x0f, 0x4f, 0xe1, 0x73, 0xe3,
	0x2c, 0x0c, 0x96, 0x9f, 0x34, 0x52, 0xe6, 0xbe, 0xc8, 0xeb, 0x8a, 0xb1, 0xd7, 0x35, 0xbe, 0x56,
	0x60, 0x51, 0x1c, 0x3e, 0xbe, 0xdd, 0x69, 0xfd, 0xff, 0x91, 0x96, 0x5f, 0xc3, 0x9a, 0x74, 0x02,
	0x12, 0xa2, 0x55, 0xee, 0xf0, 0x6d, 0x21, 0xc9, 0xd7, 0x47, 0xb0, 0x2a, 0x1b, 0x91, 0xe2, 0xeb,
	0x54, 0x24, 0xeb, 0x6c, 0x5c, 0x86, 0x05, 0xe4, 0x07, 0xa3, 0xe9, 0xf6, 0x55, 0x51, 0x06, 0xfc,
	0x07, 0x05, 0xee, 0x25, 0x0c, 0x4a, 0xa9, 0xe8, 0xdc, 0xd6, 0x29, 0x26, 0x7e, 0x32, 0x94, 0xc4,
	0x4f, 0x86, 0xa9, 0x3e, 0x07, 0x1a, 0xef, 0x85, 0x09, 0x13, 0x46, 0x2e, 0x1e, 0x5f, 0x11, 0xf0,
	0x1b, 0xbf, 0x2d, 0x02, 0x8a, 0x4e, 0x1d, 0xdf, 0x41, 0x6e, 0x68, 0xc2, 0xc9, 0x94, 0xb3, 0x38,
	0x99, 0x4a, 0x6e, 0x4e, 0xa6, 0x2a, 0xe5, 0x64, 0x1a, 0x1f, 0x86, 0x49, 0x14, 0xe6, 0xb0, 0x3c,
	0x59, 0x69, 0x7c, 0x0a, 0x9b, 0xc9, 0xe3, 0xe1, 0x9b, 0x20, 0xf8, 0x53, 0x44, 0x1e, 0x84, 0x3f,
	0x29, 0xa0, 0x26, 0xcd, 0x7b, 0xb9, 0x4a, 0x9b, 0x40, 0x33, 0x15, 0xa7, 0xa6, 0x99, 0x4a, 0x89,
	0x34, 0x53, 0xe3, 0xaf, 0x0a, 0xac, 0x9f, 0xbb, 0x57, 0x41, 0x5c, 0x27, 0xd6, 0x64, 0x3c, 0xf8,
	0xb6, 0x77, 0x5f, 0xc2, 0x72, 0x4a, 0x53, 0x2f, 0x67, 0x26, 0x79, 0x39, 0x56, 0x78, 0x23, 0x44,
	0xc7, 0xe1, 0x5c, 0xcb, 0x79, 0x1f, 0x4a, 0xb6, 0x7b, 0xa5, 0x16, 0xeb, 0xa5, 0xdd, 0x5a, 0xf3,
	0x6d, 0xee, 0x84, 0xcb, 0x53, 0xa4, 0x51, 0xeb, 0xc6, 0xc7, 0xc2, 0x3b, 0x85, 0xe1, 0x38, 0xcf,
	0x36, 0xf9, 0x04, 0x36, 0x12, 0x67, 0xe3, 0x37, 0x00, 0x98, 0x62, 0xa3, 0xfe, 0x5e, 0x81, 0xfb,
	0x29, 0xc3, 0x6e, 0xae, 0xcc, 0x49, 0x2e, 0x80, 0x62, 0xee, 0x0b, 0xa0, 0x24, 0xbf, 0x00, 0xfe,
	0xac, 0x88, 0x2b, 0x13, 0x47, 0xe2, 0xef, 0xca, 0x09, 0xb2, 0x85, 0x53, 0x2e, 0x4e, 0xd8, 0xff,
	0xb3, 0x3d, 0xb7, 0x2f, 0x54, 0x2c, 0x36, 0x7b, 0xe7, 0xa9, 0xfa, 0x21, 0x3c, 0x48, 0x1d, 0xbb,
	0x73, 0x81, 0x3c, 0x15, 0x16, 0x2f, 0xce, 0xd1, 0x79, 0xfc, 0x3f, 0x08, 0x07, 0x31, 0x7f, 0xa2,
	0xce, 0xe5, 0xf5, 0x24, 0xec, 0x95, 0xd4, 0xeb, 0xcc, 0x25, 0x56, 0x3e, 0xbf, 0x6f, 0x96, 0xa0,
	0xa2, 0x11, 0x7b, 0x3c, 0x32, 0x6d, 0x82, 0x5b, 0x52, 0x9a, 0x4d, 0xe4, 0x2b, 0x3c, 0xd3, 0x54,
	0x9e, 0xed, 0x13, 0x09, 0xcf, 0xf6, 0x40, 0x02, 0x92, 0x48, 0xb4, 0xb5, 0xa4, 0x44, 0x9b, 0x2c,
	0x8e, 0x54, 0xa6, 0xed, 0x49, 0x94, 0x69, 0xdb, 0x94, 0x07, 0x11, 0xa5, 0xda, 0x3e, 0x4f, 0xa0,
	0xda, 0xde, 0x96, 0xb8, 0x67, 0x72, 0x6d, 0x6d, 0x39, 0xd7, 0x56, 0x4f, 0xc0, 0x4a, 0x21, 0xdb,
	0x5a, 0x52, 0xb2, 0xed, 0xad, 0x64, 0x20, 0x39, 0xdb, 0x76, 0x96, 0xc8, 0xb6, 0x3d, 0x94, 0x40,
	0xe5, 0xa2, 0xdb, 0xda, 0x72, 0xba, 0xad, 0x9e, 0x80, 0x97, 0xc2, 0xb7, 0x7d, 0x14, 0xe7, 0xdb,
	0xb6, 0x64, 0x45, 0x93, 0x13, 0x6e, 0x6d, 0x39, 0xe1, 0x56, 0x4f, 0x43, 0x90, 0x33, 0x6e, 0x5f,
	0xa4, 0x31, 0x6e, 0xef, 0x64, 0xe1, 0xa5, 0x53, 0x6e, 0x5f, 0xa4, 0x51, 0x6e, 0x99, 0xd8, 0xe9,
	0x9c, 0xdb, 0x45, 0x32, 0xe7, 0xb6, 0x23, 0x41, 0xce, 0x49, 0xba, 0x9d, 0x25, 0x92, 0x6e, 0x0f,
	0x13, 0x40, 0x33, 0x59, 0xb7, 0xb3, 0x44, 0xd6, 0x2d, 0x09, 0x32, 0x93, 0x76, 0xbb, 0x4c, 0xa1,
	0xdd, 0x1e, 0x65, 0x80, 0xa6, 0xf2, 0x6e, 0x97, 0x29, 0xbc, 0x5b, 0x16, 0x70, 0x2a, 0xf1, 0xf6,
	0x32, 0x95, 0x78, 0xfb, 0x5e, 0x06, 0x74, 0x26, 0xf3, 0x76, 0x99, 0xc2, 0xbc, 0x3d, 0x4a, 0xdb,
	0x0d, 0x59, 0xd4, 0xdb, 0x45, 0x32, 0xf5, 0xb6, 0x93, 0xb2, 0x21, 0x32, 0xb8, 0xb7, 0x97, 0xa9,
	0xdc, 0x5b, 0x52, 0x36, 0x72, 0x93, 0x6f, 0xdd, 0x0c, 0xf2, 0xed, 0xfb, 0xb9, 0x5e, 0x90, 0xc1,
	0xbe, 0x5d, 0x24, 0xb3, 0x6f, 0x3b, 0x59, 0xf8, 0xc9, 0xf4, 0xdb, 0x93, 0x28, 0xfd, 0xb6, 0x99,
	0x98, 0x65, 0x9e, 0x7f, 0x9b, 0xb0, 0x5b, 0x8c, 0xad, 0x88, 0x77, 0xee, 0x38, 0x09, 0xa7, 0x48,
	0x48, 0xb8, 0xc6, 0x87, 0x80, 0xe3, 0x2d, 0x3b, 0xa7, 0x2f, 0xf7, 0x66, 0x81, 0xab, 0xca, 0xe7,
	0xfd, 0x23, 0x58, 0x8a, 0xf4, 0xe9, 0x9c, 0x8e, 0x4f, 0x61, 0x5d, 0xde, 0xa1, 0x73, 0xfa, 0x7f,
	0x0c, 0x6b, 0xd2, 0xae, 0x3c, 0xfd, 0xaa, 0x05, 0x82, 0x27, 0x9f, 0xf7, 0xa7, 0x74, 0x82, 0x94,
	0xb7, 0xdf, 0xe9, 0xc3, 0x17, 0xd9, 0x96, 0x7c, 0xee, 0x3f, 0x86, 0xe5, 0x58, 0xef, 0x99, 0xfe,
	0xcd, 0x22, 0x45, 0x91, 0xcf, 0xfd, 0x90, 0x0e, 0xf1, 0x89, 0x1d, 0xf5, 0x0d, 0x41, 0xfc, 0x5b,
	0x37, 0x1f, 0xc8, 0x3e, 0xfd, 0xd0, 0x4a, 0xe8, 0x92, 0xd3, 0xd7, 0x31, 0xf6, 0xe9, 0x7d, 0x27,
	0x04, 0xa1, 0xdd, 0xe5, 0x43, 0x38, 0x80, 0xcd, 0xe4, 0x7e, 0xf7, 0x66, 0x18, 0x53, 0xa5, 0xf3,
	0x08, 0xb6, 0xd2, 0x7a, 0xd8, 0x1d, 0x23, 0x11, 0xdb, 0xd2, 0x9d, 0x0a, 0x2b, 0xf6, 0xa0, 0x3b,
	0x2d, 0x26, 0xd6, 0x6a, 0xf2, 0xa1, 0x3c, 0x83, 0xed, 0xf4, 0x3e, 0x73, 0xb7, 0x05, 0x89, 0xad,
	0x63, 0xea, 0x7b, 0x36, 0xf8, 0xe8, 0xcc, 0xe5, 0xb8, 0x77, 0xe1, 0xfd, 0xba, 0x87, 0x91, 0xe6,
	0x0b, 0x50, 0xa5, 0x7f, 0x5b, 0x96, 0x35, 0xb2, 0x50, 0x01, 0x2f, 0x02, 0x9c, 0xbb, 0x63, 0x62,
	0xed, 0xf7, 0x86, 0x86, 0x89, 0x14, 0xfa, 0xcc, 0x7e, 0x8d, 0xe4, 0x3d, 0x17, 0xf1, 0x3c, 0x54,
	0x5a, 0xa6, 0xe3, 0x3d, 0x95, 0x70, 0x8d, 0xfd, 0x7c, 0xe5, 0x88, 0xe8, 0x03, 0x34, 0xb3, 0xf7,
	0x92, 0x3d, 0xb0, 0x5f, 0x91, 0x2c, 0x40, 0x95, 0xfe, 0x0d, 0x40, 0x57, 0x01, 0x75, 0xc8, 0xf0,
	0x8a, 0x58, 0x2d, 0xd3, 0x21, 0xd6, 0xd8, 0x32, 0x6c, 0x82, 0x14, 0x2a, 0x3d, 0x77, 0xe9, 0x49,
	0xe7, 0xa4, 0x45, 0x7c, 0x0f, 0x56, 0x3e, 0x73, 0x75, 0x4b, 0x37, 0x1d, 0x42, 0x38, 0x45, 0x69,
	0xef, 0x6b, 0x05, 0xaa, 0xe1, 0x8f, 0x9d, 0xe8, 0x1b, 0x18, 0x77, 0xe1, 0xbf, 0x61, 0x0d, 0x96,
	0xe9, 0x23, 0xbb, 0x38, 0x2e, 0x75, 0xc3, 0xa1, 0x67, 0xcd, 0x8b, 0x9e, 0x8a, 0xe9, 0x9e, 0x27,
	0x16, 0x2a, 0xe2, 0x65, 0x58, 0xa0, 0xcf, 0xcf, 0x47, 0xd6, 0x50, 0x1f, 0x9c, 0xbc, 0xa2, 0x4b,
	0x50, 0x61, 0x95, 0xdf, 0xda, 0xa1, 0xf3, 0x0c, 0xc6, 0xb0, 0xc8, 0x6b, 0x4e, 0x6e, 0xd0, 0x2c,
	0xde, 0x84, 0x75, 0xa1, 0x5a, 0xd4, 0x9c, 0x55, 0x1e, 0xcd, 0xe1, 0x15, 0x58, 0x12, 0x74, 0x27,
	0x37, 0xa8, 0x4c, 0xf3, 0xe5, 0xd5, 0xc6, 0xe8, 0xa1, 0xca, 0xde, 0x7f, 0x66, 0xa0, 0xc6, 0xfd,
	0x97, 0x16, 0xd5, 0x76, 0xec, 0x7e, 0xb0, 0x88, 0x15, 0x58, 0xea, 0xd8, 0x7d, 0xbe, 0xd5, 0x23,
	0x85, 0x86, 0xdc, 0xb1, 0xfb, 0x93, 0x0e, 0x8e, 0x8a, 0xbe, 0x1d, 0xdf, 0x98, 0x51, 0x89, 0x15,
	0x8a, 0xd9, 0xb1, 0xe7, 0x19, 0x9a, 0x91, 0x8e, 0xdd, 0x17, 0xdb, 0x28, 0x9a, 0x65, 0xa5, 0xf0,
	0xc4, 0x61, 0x77, 0xf4, 0x42, 0x9f, 0x48, 0x59, 0xd3, 0x43, 0x65, 0x5a, 0x09, 0x1a, 0x5c, 0xa4,
	0x97, 0xa1, 0x8a, 0x8f, 0x21, 0xb4, 0x28, 0x54, 0xc5, 0x08, 0xe6, 0x69, 0x00, 0xc1, 0xd5, 0x8d,
	0xc0, 0xb7, 0x13, 0x2e, 0x73, 0x54, 0xa3, 0x29, 0x8c, 0x4a, 0xbd, 0x7b, 0x0d, 0xcd, 0xcb, 0x74,
	0xde, 0x7d, 0x85, 0x16, 0x68, 0xa1, 0x3a, 0x76, 0x3f, 0x76, 0xab, 0xa3, 0x45, 0x3f, 0xd0, 0xe8,
	0x65, 0x8d, 0x96, 0x38, 0x05, 0x7f, 0x07, 0x23, 0x84, 0x37, 0x60, 0x2d, 0xa2, 0xf0, 0x43, 0x58,
	0x96, 0xa8, 0xfc, 0x08, 0x30, 0xbe, 0x0f, 0xf7, 0x22, 0xaa, 0xe0, 0x22, 0x44, 0x2b, 0xbc, 0x9f,
	0x70, 0xbf, 0xa1, 0x55, 0x2e, 0x72, 0xe1, 0xda, 0x42, 0x6b, 0x1c, 0x62, 0xf4, 0x36, 0x42, 0xeb,
	0xf8, 0x01, 0x6c, 0x48, 0x95, 0xf4, 0x86, 0x40, 0xf7, 0x38, 0x54, 0xe1, 0xee, 0x40, 0xaa, 0xbf,
	0x15, 0xfc, 0x2b, 0x01, 0x6d, 0x1c, 0xa0, 0xbf, 0xbc, 0xde, 0x56, 0xfe, 0xfe, 0x7a, 0x5b, 0xf9,
	0xe7, 0xeb, 0x6d, 0xe5, 0x8f, 0xdf, 0x6c, 0x17, 0xae, 0xe6, 0xd8, 0x6f, 0x79, 0xdf, 0xff, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x9a, 0xd2, 0xf7, 0xd8, 0x2b, 0x00, 0x00,
}
