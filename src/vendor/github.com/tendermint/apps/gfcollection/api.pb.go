// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package gfcollection is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		Request
		RequestInitPlatform
		RequestSetBank
		RequestSetCompany
		RequestAddCompany
		RequestAddCaseConf
		RequestEditCaseConf
		RequestDelCaseConf
		RequestImportCase
		RequestImportCaseList
		RequestApplyCaseConf
		RequestAddCompanyConf
		RequestEditCompanyConf
		RequestDelCompanyConf
		RequestDelayCaseList
		RequestCancelCaseList
		RequestCollectCaseList
		RequestFinishCaseList
		RequestSwitchCase
		RequestUpdateWeight
		RequestDeliverCaseList
		Response
		ResponseException
		ResponseOK
		Receipt
		ResponseInitPlatform
		ResponseSetBank
		ResponseSetCompany
		ResponseAddCompany
		ResponseAddCaseConf
		ResponseEditCaseConf
		ResponseDelCaseConf
		ResponseImportCase
		ResponseImportCaseList
		ResponseApplyCaseConf
		ResponseAddCompanyConf
		ResponseEditCompanyConf
		ResponseDelCompanyConf
		ResponseDelayCaseList
		ResponseCancelCaseList
		ResponseCollectCaseList
		ResponseFinishCaseList
		ResponseSwitchCase
		ResponseUpdateWeight
		ResponseDeliverCaseList
		Bank
		Banks
		DeliverResult
		CompanyWeight
		SwitchCase
		DeliverCompany
		Company
		CompanyConf
		CaseConf
		Case
		AreaList
		AreaCompany
		WeightCompany
		AreaCasePool
		Platform
		CaseDelay
		Event
		EventInitPlatform
		EventSetBank
		EventSetCompany
		EventAddCompany
		EventAddCaseConf
		EventEditCaseConf
		EventDelCaseConf
		EventImportCase
		EventImportCaseList
		EventApplyCaseConf
		EventAddCompanyConf
		EventEditCompanyConf
		EventDelCompanyConf
		EventDelayCaseList
		EventCancelCaseList
		EventCollectCaseList
		EventFinishCaseList
		EventSwitchCase
		EventUpdateWeight
		EventDeliverCaseList
*/
package gfcollection

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MsgError           MessageType = 0
	MessageType_MsgInit            MessageType = 1
	MessageType_MsgShutDown        MessageType = 2
	MessageType_MsgClose           MessageType = 3
	MessageType_MsgInitPlatform    MessageType = 4
	MessageType_MsgSetBank         MessageType = 5
	MessageType_MsgSetCompany      MessageType = 6
	MessageType_MsgAddCompany      MessageType = 7
	MessageType_MsgAddCaseConf     MessageType = 8
	MessageType_MsgEditCaseConf    MessageType = 9
	MessageType_MsgDelCaseConf     MessageType = 10
	MessageType_MsgImportCase      MessageType = 11
	MessageType_MsgImportCaseList  MessageType = 12
	MessageType_MsgApplyCaseConf   MessageType = 13
	MessageType_MsgAddCompanyConf  MessageType = 14
	MessageType_MsgEditCompanyConf MessageType = 15
	MessageType_MsgDelCompanyConf  MessageType = 16
	MessageType_MsgDelayCaseList   MessageType = 17
	MessageType_MsgCancelCaseList  MessageType = 18
	MessageType_MsgCollectCaseList MessageType = 19
	MessageType_MsgFinishCaseList  MessageType = 20
	MessageType_MsgSwitchCase      MessageType = 21
	MessageType_MsgUpdateWeight    MessageType = 22
	MessageType_MsgDeliverCaseList MessageType = 23
	MessageType_MsgCount           MessageType = 24
)

var MessageType_name = map[int32]string{
	0:  "MsgError",
	1:  "MsgInit",
	2:  "MsgShutDown",
	3:  "MsgClose",
	4:  "MsgInitPlatform",
	5:  "MsgSetBank",
	6:  "MsgSetCompany",
	7:  "MsgAddCompany",
	8:  "MsgAddCaseConf",
	9:  "MsgEditCaseConf",
	10: "MsgDelCaseConf",
	11: "MsgImportCase",
	12: "MsgImportCaseList",
	13: "MsgApplyCaseConf",
	14: "MsgAddCompanyConf",
	15: "MsgEditCompanyConf",
	16: "MsgDelCompanyConf",
	17: "MsgDelayCaseList",
	18: "MsgCancelCaseList",
	19: "MsgCollectCaseList",
	20: "MsgFinishCaseList",
	21: "MsgSwitchCase",
	22: "MsgUpdateWeight",
	23: "MsgDeliverCaseList",
	24: "MsgCount",
}
var MessageType_value = map[string]int32{
	"MsgError":           0,
	"MsgInit":            1,
	"MsgShutDown":        2,
	"MsgClose":           3,
	"MsgInitPlatform":    4,
	"MsgSetBank":         5,
	"MsgSetCompany":      6,
	"MsgAddCompany":      7,
	"MsgAddCaseConf":     8,
	"MsgEditCaseConf":    9,
	"MsgDelCaseConf":     10,
	"MsgImportCase":      11,
	"MsgImportCaseList":  12,
	"MsgApplyCaseConf":   13,
	"MsgAddCompanyConf":  14,
	"MsgEditCompanyConf": 15,
	"MsgDelCompanyConf":  16,
	"MsgDelayCaseList":   17,
	"MsgCancelCaseList":  18,
	"MsgCollectCaseList": 19,
	"MsgFinishCaseList":  20,
	"MsgSwitchCase":      21,
	"MsgUpdateWeight":    22,
	"MsgDeliverCaseList": 23,
	"MsgCount":           24,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type CaseState int32

const (
	CaseState_CS_UNK         CaseState = 0
	CaseState_CS_UNDELIVER   CaseState = 1
	CaseState_CS_WAITED      CaseState = 2
	CaseState_CS_DELIVER     CaseState = 3
	CaseState_CS_COLLECTIING CaseState = 4
	CaseState_CS_DELAYED     CaseState = 5
	CaseState_CS_OVERDUE     CaseState = 6
	CaseState_CS_DONE        CaseState = 7
)

var CaseState_name = map[int32]string{
	0: "CS_UNK",
	1: "CS_UNDELIVER",
	2: "CS_WAITED",
	3: "CS_DELIVER",
	4: "CS_COLLECTIING",
	5: "CS_DELAYED",
	6: "CS_OVERDUE",
	7: "CS_DONE",
}
var CaseState_value = map[string]int32{
	"CS_UNK":         0,
	"CS_UNDELIVER":   1,
	"CS_WAITED":      2,
	"CS_DELIVER":     3,
	"CS_COLLECTIING": 4,
	"CS_DELAYED":     5,
	"CS_OVERDUE":     6,
	"CS_DONE":        7,
}

func (x CaseState) String() string {
	return proto.EnumName(CaseState_name, int32(x))
}
func (CaseState) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type Request struct {
	// Types that are valid to be assigned to Value:
	//	*Request_InitPlatform
	//	*Request_SetBank
	//	*Request_SetCompany
	//	*Request_AddCompany
	//	*Request_AddCaseConf
	//	*Request_EditCaseConf
	//	*Request_DelCaseConf
	//	*Request_ImportCase
	//	*Request_ImportCaseList
	//	*Request_ApplyCaseConf
	//	*Request_AddCompanyConf
	//	*Request_EditCompanyConf
	//	*Request_DelCompanyConf
	//	*Request_DelayCaseList
	//	*Request_CancelCaseList
	//	*Request_CollectCaseList
	//	*Request_FinishCaseList
	//	*Request_SwitchCase
	//	*Request_UpdateWeight
	//	*Request_DeliverCaseList
	Value         isRequest_Value `protobuf_oneof:"value"`
	Op            int64           `protobuf:"varint,21,opt,name=op,proto3" json:"op,omitempty"`
	Uid           string          `protobuf:"bytes,22,opt,name=uid,proto3" json:"uid,omitempty"`
	Pubkey        []byte          `protobuf:"bytes,23,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	InstructionId int64           `protobuf:"varint,24,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Sign          []byte          `protobuf:"bytes,25,opt,name=sign,proto3" json:"sign,omitempty"`
	ActionId      MessageType     `protobuf:"varint,26,opt,name=actionId,proto3,enum=gfcollection.MessageType" json:"actionId,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type isRequest_Value interface {
	isRequest_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_InitPlatform struct {
	InitPlatform *RequestInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Request_SetBank struct {
	SetBank *RequestSetBank `protobuf:"bytes,2,opt,name=setBank,oneof"`
}
type Request_SetCompany struct {
	SetCompany *RequestSetCompany `protobuf:"bytes,3,opt,name=setCompany,oneof"`
}
type Request_AddCompany struct {
	AddCompany *RequestAddCompany `protobuf:"bytes,4,opt,name=addCompany,oneof"`
}
type Request_AddCaseConf struct {
	AddCaseConf *RequestAddCaseConf `protobuf:"bytes,5,opt,name=addCaseConf,oneof"`
}
type Request_EditCaseConf struct {
	EditCaseConf *RequestEditCaseConf `protobuf:"bytes,6,opt,name=editCaseConf,oneof"`
}
type Request_DelCaseConf struct {
	DelCaseConf *RequestDelCaseConf `protobuf:"bytes,7,opt,name=delCaseConf,oneof"`
}
type Request_ImportCase struct {
	ImportCase *RequestImportCase `protobuf:"bytes,8,opt,name=importCase,oneof"`
}
type Request_ImportCaseList struct {
	ImportCaseList *RequestImportCaseList `protobuf:"bytes,9,opt,name=importCaseList,oneof"`
}
type Request_ApplyCaseConf struct {
	ApplyCaseConf *RequestApplyCaseConf `protobuf:"bytes,10,opt,name=applyCaseConf,oneof"`
}
type Request_AddCompanyConf struct {
	AddCompanyConf *RequestAddCompanyConf `protobuf:"bytes,11,opt,name=addCompanyConf,oneof"`
}
type Request_EditCompanyConf struct {
	EditCompanyConf *RequestEditCompanyConf `protobuf:"bytes,12,opt,name=editCompanyConf,oneof"`
}
type Request_DelCompanyConf struct {
	DelCompanyConf *RequestDelCompanyConf `protobuf:"bytes,13,opt,name=delCompanyConf,oneof"`
}
type Request_DelayCaseList struct {
	DelayCaseList *RequestDelayCaseList `protobuf:"bytes,14,opt,name=delayCaseList,oneof"`
}
type Request_CancelCaseList struct {
	CancelCaseList *RequestCancelCaseList `protobuf:"bytes,15,opt,name=cancelCaseList,oneof"`
}
type Request_CollectCaseList struct {
	CollectCaseList *RequestCollectCaseList `protobuf:"bytes,16,opt,name=collectCaseList,oneof"`
}
type Request_FinishCaseList struct {
	FinishCaseList *RequestFinishCaseList `protobuf:"bytes,17,opt,name=finishCaseList,oneof"`
}
type Request_SwitchCase struct {
	SwitchCase *RequestSwitchCase `protobuf:"bytes,18,opt,name=switchCase,oneof"`
}
type Request_UpdateWeight struct {
	UpdateWeight *RequestUpdateWeight `protobuf:"bytes,19,opt,name=updateWeight,oneof"`
}
type Request_DeliverCaseList struct {
	DeliverCaseList *RequestDeliverCaseList `protobuf:"bytes,20,opt,name=deliverCaseList,oneof"`
}

func (*Request_InitPlatform) isRequest_Value()    {}
func (*Request_SetBank) isRequest_Value()         {}
func (*Request_SetCompany) isRequest_Value()      {}
func (*Request_AddCompany) isRequest_Value()      {}
func (*Request_AddCaseConf) isRequest_Value()     {}
func (*Request_EditCaseConf) isRequest_Value()    {}
func (*Request_DelCaseConf) isRequest_Value()     {}
func (*Request_ImportCase) isRequest_Value()      {}
func (*Request_ImportCaseList) isRequest_Value()  {}
func (*Request_ApplyCaseConf) isRequest_Value()   {}
func (*Request_AddCompanyConf) isRequest_Value()  {}
func (*Request_EditCompanyConf) isRequest_Value() {}
func (*Request_DelCompanyConf) isRequest_Value()  {}
func (*Request_DelayCaseList) isRequest_Value()   {}
func (*Request_CancelCaseList) isRequest_Value()  {}
func (*Request_CollectCaseList) isRequest_Value() {}
func (*Request_FinishCaseList) isRequest_Value()  {}
func (*Request_SwitchCase) isRequest_Value()      {}
func (*Request_UpdateWeight) isRequest_Value()    {}
func (*Request_DeliverCaseList) isRequest_Value() {}

func (m *Request) GetValue() isRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Request) GetInitPlatform() *RequestInitPlatform {
	if x, ok := m.GetValue().(*Request_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Request) GetSetBank() *RequestSetBank {
	if x, ok := m.GetValue().(*Request_SetBank); ok {
		return x.SetBank
	}
	return nil
}

func (m *Request) GetSetCompany() *RequestSetCompany {
	if x, ok := m.GetValue().(*Request_SetCompany); ok {
		return x.SetCompany
	}
	return nil
}

func (m *Request) GetAddCompany() *RequestAddCompany {
	if x, ok := m.GetValue().(*Request_AddCompany); ok {
		return x.AddCompany
	}
	return nil
}

func (m *Request) GetAddCaseConf() *RequestAddCaseConf {
	if x, ok := m.GetValue().(*Request_AddCaseConf); ok {
		return x.AddCaseConf
	}
	return nil
}

func (m *Request) GetEditCaseConf() *RequestEditCaseConf {
	if x, ok := m.GetValue().(*Request_EditCaseConf); ok {
		return x.EditCaseConf
	}
	return nil
}

func (m *Request) GetDelCaseConf() *RequestDelCaseConf {
	if x, ok := m.GetValue().(*Request_DelCaseConf); ok {
		return x.DelCaseConf
	}
	return nil
}

func (m *Request) GetImportCase() *RequestImportCase {
	if x, ok := m.GetValue().(*Request_ImportCase); ok {
		return x.ImportCase
	}
	return nil
}

func (m *Request) GetImportCaseList() *RequestImportCaseList {
	if x, ok := m.GetValue().(*Request_ImportCaseList); ok {
		return x.ImportCaseList
	}
	return nil
}

func (m *Request) GetApplyCaseConf() *RequestApplyCaseConf {
	if x, ok := m.GetValue().(*Request_ApplyCaseConf); ok {
		return x.ApplyCaseConf
	}
	return nil
}

func (m *Request) GetAddCompanyConf() *RequestAddCompanyConf {
	if x, ok := m.GetValue().(*Request_AddCompanyConf); ok {
		return x.AddCompanyConf
	}
	return nil
}

func (m *Request) GetEditCompanyConf() *RequestEditCompanyConf {
	if x, ok := m.GetValue().(*Request_EditCompanyConf); ok {
		return x.EditCompanyConf
	}
	return nil
}

func (m *Request) GetDelCompanyConf() *RequestDelCompanyConf {
	if x, ok := m.GetValue().(*Request_DelCompanyConf); ok {
		return x.DelCompanyConf
	}
	return nil
}

func (m *Request) GetDelayCaseList() *RequestDelayCaseList {
	if x, ok := m.GetValue().(*Request_DelayCaseList); ok {
		return x.DelayCaseList
	}
	return nil
}

func (m *Request) GetCancelCaseList() *RequestCancelCaseList {
	if x, ok := m.GetValue().(*Request_CancelCaseList); ok {
		return x.CancelCaseList
	}
	return nil
}

func (m *Request) GetCollectCaseList() *RequestCollectCaseList {
	if x, ok := m.GetValue().(*Request_CollectCaseList); ok {
		return x.CollectCaseList
	}
	return nil
}

func (m *Request) GetFinishCaseList() *RequestFinishCaseList {
	if x, ok := m.GetValue().(*Request_FinishCaseList); ok {
		return x.FinishCaseList
	}
	return nil
}

func (m *Request) GetSwitchCase() *RequestSwitchCase {
	if x, ok := m.GetValue().(*Request_SwitchCase); ok {
		return x.SwitchCase
	}
	return nil
}

func (m *Request) GetUpdateWeight() *RequestUpdateWeight {
	if x, ok := m.GetValue().(*Request_UpdateWeight); ok {
		return x.UpdateWeight
	}
	return nil
}

func (m *Request) GetDeliverCaseList() *RequestDeliverCaseList {
	if x, ok := m.GetValue().(*Request_DeliverCaseList); ok {
		return x.DeliverCaseList
	}
	return nil
}

func (m *Request) GetOp() int64 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *Request) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Request) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Request) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *Request) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Request) GetActionId() MessageType {
	if m != nil {
		return m.ActionId
	}
	return MessageType_MsgError
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_InitPlatform)(nil),
		(*Request_SetBank)(nil),
		(*Request_SetCompany)(nil),
		(*Request_AddCompany)(nil),
		(*Request_AddCaseConf)(nil),
		(*Request_EditCaseConf)(nil),
		(*Request_DelCaseConf)(nil),
		(*Request_ImportCase)(nil),
		(*Request_ImportCaseList)(nil),
		(*Request_ApplyCaseConf)(nil),
		(*Request_AddCompanyConf)(nil),
		(*Request_EditCompanyConf)(nil),
		(*Request_DelCompanyConf)(nil),
		(*Request_DelayCaseList)(nil),
		(*Request_CancelCaseList)(nil),
		(*Request_CollectCaseList)(nil),
		(*Request_FinishCaseList)(nil),
		(*Request_SwitchCase)(nil),
		(*Request_UpdateWeight)(nil),
		(*Request_DeliverCaseList)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Request_SetBank:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetBank); err != nil {
			return err
		}
	case *Request_SetCompany:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCompany); err != nil {
			return err
		}
	case *Request_AddCompany:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCompany); err != nil {
			return err
		}
	case *Request_AddCaseConf:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCaseConf); err != nil {
			return err
		}
	case *Request_EditCaseConf:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EditCaseConf); err != nil {
			return err
		}
	case *Request_DelCaseConf:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelCaseConf); err != nil {
			return err
		}
	case *Request_ImportCase:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImportCase); err != nil {
			return err
		}
	case *Request_ImportCaseList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImportCaseList); err != nil {
			return err
		}
	case *Request_ApplyCaseConf:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyCaseConf); err != nil {
			return err
		}
	case *Request_AddCompanyConf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCompanyConf); err != nil {
			return err
		}
	case *Request_EditCompanyConf:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EditCompanyConf); err != nil {
			return err
		}
	case *Request_DelCompanyConf:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelCompanyConf); err != nil {
			return err
		}
	case *Request_DelayCaseList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelayCaseList); err != nil {
			return err
		}
	case *Request_CancelCaseList:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CancelCaseList); err != nil {
			return err
		}
	case *Request_CollectCaseList:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CollectCaseList); err != nil {
			return err
		}
	case *Request_FinishCaseList:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FinishCaseList); err != nil {
			return err
		}
	case *Request_SwitchCase:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SwitchCase); err != nil {
			return err
		}
	case *Request_UpdateWeight:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateWeight); err != nil {
			return err
		}
	case *Request_DeliverCaseList:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeliverCaseList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Value has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Request_InitPlatform{msg}
		return true, err
	case 2: // value.setBank
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestSetBank)
		err := b.DecodeMessage(msg)
		m.Value = &Request_SetBank{msg}
		return true, err
	case 3: // value.setCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestSetCompany)
		err := b.DecodeMessage(msg)
		m.Value = &Request_SetCompany{msg}
		return true, err
	case 4: // value.addCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAddCompany)
		err := b.DecodeMessage(msg)
		m.Value = &Request_AddCompany{msg}
		return true, err
	case 5: // value.addCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAddCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_AddCaseConf{msg}
		return true, err
	case 6: // value.editCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestEditCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_EditCaseConf{msg}
		return true, err
	case 7: // value.delCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestDelCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_DelCaseConf{msg}
		return true, err
	case 8: // value.importCase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestImportCase)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ImportCase{msg}
		return true, err
	case 9: // value.importCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestImportCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ImportCaseList{msg}
		return true, err
	case 10: // value.applyCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestApplyCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_ApplyCaseConf{msg}
		return true, err
	case 11: // value.addCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAddCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_AddCompanyConf{msg}
		return true, err
	case 12: // value.editCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestEditCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_EditCompanyConf{msg}
		return true, err
	case 13: // value.delCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestDelCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Request_DelCompanyConf{msg}
		return true, err
	case 14: // value.delayCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestDelayCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_DelayCaseList{msg}
		return true, err
	case 15: // value.cancelCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCancelCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_CancelCaseList{msg}
		return true, err
	case 16: // value.collectCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCollectCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_CollectCaseList{msg}
		return true, err
	case 17: // value.finishCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestFinishCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_FinishCaseList{msg}
		return true, err
	case 18: // value.switchCase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestSwitchCase)
		err := b.DecodeMessage(msg)
		m.Value = &Request_SwitchCase{msg}
		return true, err
	case 19: // value.updateWeight
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestUpdateWeight)
		err := b.DecodeMessage(msg)
		m.Value = &Request_UpdateWeight{msg}
		return true, err
	case 20: // value.deliverCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestDeliverCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Request_DeliverCaseList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SetBank:
		s := proto.Size(x.SetBank)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SetCompany:
		s := proto.Size(x.SetCompany)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_AddCompany:
		s := proto.Size(x.AddCompany)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_AddCaseConf:
		s := proto.Size(x.AddCaseConf)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_EditCaseConf:
		s := proto.Size(x.EditCaseConf)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DelCaseConf:
		s := proto.Size(x.DelCaseConf)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ImportCase:
		s := proto.Size(x.ImportCase)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ImportCaseList:
		s := proto.Size(x.ImportCaseList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ApplyCaseConf:
		s := proto.Size(x.ApplyCaseConf)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_AddCompanyConf:
		s := proto.Size(x.AddCompanyConf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_EditCompanyConf:
		s := proto.Size(x.EditCompanyConf)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DelCompanyConf:
		s := proto.Size(x.DelCompanyConf)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DelayCaseList:
		s := proto.Size(x.DelayCaseList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_CancelCaseList:
		s := proto.Size(x.CancelCaseList)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_CollectCaseList:
		s := proto.Size(x.CollectCaseList)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_FinishCaseList:
		s := proto.Size(x.FinishCaseList)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SwitchCase:
		s := proto.Size(x.SwitchCase)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_UpdateWeight:
		s := proto.Size(x.UpdateWeight)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_DeliverCaseList:
		s := proto.Size(x.DeliverCaseList)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 平台初始化
type RequestInitPlatform struct {
	PlatformKey []byte `protobuf:"bytes,1,opt,name=platformKey,proto3" json:"platformKey,omitempty"`
	Info        string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RequestInitPlatform) Reset()                    { *m = RequestInitPlatform{} }
func (m *RequestInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*RequestInitPlatform) ProtoMessage()               {}
func (*RequestInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *RequestInitPlatform) GetPlatformKey() []byte {
	if m != nil {
		return m.PlatformKey
	}
	return nil
}

func (m *RequestInitPlatform) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// 注册银行
type RequestSetBank struct {
	Pubkey   []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	BankId   string `protobuf:"bytes,2,opt,name=bankId,proto3" json:"bankId,omitempty"`
	BankName string `protobuf:"bytes,3,opt,name=bankName,proto3" json:"bankName,omitempty"`
}

func (m *RequestSetBank) Reset()                    { *m = RequestSetBank{} }
func (m *RequestSetBank) String() string            { return proto.CompactTextString(m) }
func (*RequestSetBank) ProtoMessage()               {}
func (*RequestSetBank) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *RequestSetBank) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *RequestSetBank) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *RequestSetBank) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

// 注册公司
type RequestSetCompany struct {
	CompanyPubkey []byte `protobuf:"bytes,1,opt,name=companyPubkey,proto3" json:"companyPubkey,omitempty"`
	CompanyId     string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	CompanyName   string `protobuf:"bytes,3,opt,name=companyName,proto3" json:"companyName,omitempty"`
}

func (m *RequestSetCompany) Reset()                    { *m = RequestSetCompany{} }
func (m *RequestSetCompany) String() string            { return proto.CompactTextString(m) }
func (*RequestSetCompany) ProtoMessage()               {}
func (*RequestSetCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *RequestSetCompany) GetCompanyPubkey() []byte {
	if m != nil {
		return m.CompanyPubkey
	}
	return nil
}

func (m *RequestSetCompany) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *RequestSetCompany) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

// 添加委外机构
type RequestAddCompany struct {
	CompanyPubkey []byte `protobuf:"bytes,1,opt,name=companyPubkey,proto3" json:"companyPubkey,omitempty"`
	CompanyArea   string `protobuf:"bytes,2,opt,name=companyArea,proto3" json:"companyArea,omitempty"`
	CompanyId     string `protobuf:"bytes,3,opt,name=companyId,proto3" json:"companyId,omitempty"`
	CompanyName   string `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName,omitempty"`
	Weight        int32  `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *RequestAddCompany) Reset()                    { *m = RequestAddCompany{} }
func (m *RequestAddCompany) String() string            { return proto.CompactTextString(m) }
func (*RequestAddCompany) ProtoMessage()               {}
func (*RequestAddCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *RequestAddCompany) GetCompanyPubkey() []byte {
	if m != nil {
		return m.CompanyPubkey
	}
	return nil
}

func (m *RequestAddCompany) GetCompanyArea() string {
	if m != nil {
		return m.CompanyArea
	}
	return ""
}

func (m *RequestAddCompany) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *RequestAddCompany) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *RequestAddCompany) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// 添加案件规则
type RequestAddCaseConf struct {
	CaseConfId    string `protobuf:"bytes,1,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
	CaseMinAmount int64  `protobuf:"varint,2,opt,name=caseMinAmount,proto3" json:"caseMinAmount,omitempty"`
	CaseMaxAmount int64  `protobuf:"varint,3,opt,name=caseMaxAmount,proto3" json:"caseMaxAmount,omitempty"`
	OverdueDays   int32  `protobuf:"varint,4,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	ExpireDays    int32  `protobuf:"varint,5,opt,name=expireDays,proto3" json:"expireDays,omitempty"`
	Rate          int32  `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *RequestAddCaseConf) Reset()                    { *m = RequestAddCaseConf{} }
func (m *RequestAddCaseConf) String() string            { return proto.CompactTextString(m) }
func (*RequestAddCaseConf) ProtoMessage()               {}
func (*RequestAddCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *RequestAddCaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

func (m *RequestAddCaseConf) GetCaseMinAmount() int64 {
	if m != nil {
		return m.CaseMinAmount
	}
	return 0
}

func (m *RequestAddCaseConf) GetCaseMaxAmount() int64 {
	if m != nil {
		return m.CaseMaxAmount
	}
	return 0
}

func (m *RequestAddCaseConf) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *RequestAddCaseConf) GetExpireDays() int32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *RequestAddCaseConf) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 修改案件规则
type RequestEditCaseConf struct {
	CaseConfId    string `protobuf:"bytes,1,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
	CaseMinAmount int64  `protobuf:"varint,2,opt,name=caseMinAmount,proto3" json:"caseMinAmount,omitempty"`
	CaseMaxAmount int64  `protobuf:"varint,3,opt,name=caseMaxAmount,proto3" json:"caseMaxAmount,omitempty"`
	OverdueDays   int32  `protobuf:"varint,4,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	ExpireDays    int32  `protobuf:"varint,5,opt,name=expireDays,proto3" json:"expireDays,omitempty"`
	Rate          int32  `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *RequestEditCaseConf) Reset()                    { *m = RequestEditCaseConf{} }
func (m *RequestEditCaseConf) String() string            { return proto.CompactTextString(m) }
func (*RequestEditCaseConf) ProtoMessage()               {}
func (*RequestEditCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *RequestEditCaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

func (m *RequestEditCaseConf) GetCaseMinAmount() int64 {
	if m != nil {
		return m.CaseMinAmount
	}
	return 0
}

func (m *RequestEditCaseConf) GetCaseMaxAmount() int64 {
	if m != nil {
		return m.CaseMaxAmount
	}
	return 0
}

func (m *RequestEditCaseConf) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *RequestEditCaseConf) GetExpireDays() int32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *RequestEditCaseConf) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 删除案件规则
type RequestDelCaseConf struct {
	CaseConfId string `protobuf:"bytes,1,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
}

func (m *RequestDelCaseConf) Reset()                    { *m = RequestDelCaseConf{} }
func (m *RequestDelCaseConf) String() string            { return proto.CompactTextString(m) }
func (*RequestDelCaseConf) ProtoMessage()               {}
func (*RequestDelCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *RequestDelCaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

// 导入案件
type RequestImportCase struct {
	CaseId         string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	CaseOwner      string `protobuf:"bytes,2,opt,name=caseOwner,proto3" json:"caseOwner,omitempty"`
	CaseIdCard     string `protobuf:"bytes,3,opt,name=caseIdCard,proto3" json:"caseIdCard,omitempty"`
	Contract       string `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	BankCard       string `protobuf:"bytes,5,opt,name=bankCard,proto3" json:"bankCard,omitempty"`
	DebtAmount     int64  `protobuf:"varint,6,opt,name=debtAmount,proto3" json:"debtAmount,omitempty"`
	OriginalAmount int64  `protobuf:"varint,7,opt,name=originalAmount,proto3" json:"originalAmount,omitempty"`
	Fees           int64  `protobuf:"varint,8,opt,name=fees,proto3" json:"fees,omitempty"`
	OverdueDays    int32  `protobuf:"varint,9,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	CaseArea       string `protobuf:"bytes,10,opt,name=caseArea,proto3" json:"caseArea,omitempty"`
}

func (m *RequestImportCase) Reset()                    { *m = RequestImportCase{} }
func (m *RequestImportCase) String() string            { return proto.CompactTextString(m) }
func (*RequestImportCase) ProtoMessage()               {}
func (*RequestImportCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *RequestImportCase) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *RequestImportCase) GetCaseOwner() string {
	if m != nil {
		return m.CaseOwner
	}
	return ""
}

func (m *RequestImportCase) GetCaseIdCard() string {
	if m != nil {
		return m.CaseIdCard
	}
	return ""
}

func (m *RequestImportCase) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *RequestImportCase) GetBankCard() string {
	if m != nil {
		return m.BankCard
	}
	return ""
}

func (m *RequestImportCase) GetDebtAmount() int64 {
	if m != nil {
		return m.DebtAmount
	}
	return 0
}

func (m *RequestImportCase) GetOriginalAmount() int64 {
	if m != nil {
		return m.OriginalAmount
	}
	return 0
}

func (m *RequestImportCase) GetFees() int64 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *RequestImportCase) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *RequestImportCase) GetCaseArea() string {
	if m != nil {
		return m.CaseArea
	}
	return ""
}

// 导入案件
type RequestImportCaseList struct {
	CaseList []*Case `protobuf:"bytes,1,rep,name=caseList" json:"caseList,omitempty"`
}

func (m *RequestImportCaseList) Reset()                    { *m = RequestImportCaseList{} }
func (m *RequestImportCaseList) String() string            { return proto.CompactTextString(m) }
func (*RequestImportCaseList) ProtoMessage()               {}
func (*RequestImportCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *RequestImportCaseList) GetCaseList() []*Case {
	if m != nil {
		return m.CaseList
	}
	return nil
}

// 应用规则
type RequestApplyCaseConf struct {
	CaseIds []string `protobuf:"bytes,1,rep,name=caseIds" json:"caseIds,omitempty"`
	IsApply bool     `protobuf:"varint,2,opt,name=isApply,proto3" json:"isApply,omitempty"`
}

func (m *RequestApplyCaseConf) Reset()                    { *m = RequestApplyCaseConf{} }
func (m *RequestApplyCaseConf) String() string            { return proto.CompactTextString(m) }
func (*RequestApplyCaseConf) ProtoMessage()               {}
func (*RequestApplyCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

func (m *RequestApplyCaseConf) GetCaseIds() []string {
	if m != nil {
		return m.CaseIds
	}
	return nil
}

func (m *RequestApplyCaseConf) GetIsApply() bool {
	if m != nil {
		return m.IsApply
	}
	return false
}

// 添加委外机构收单规则
type RequestAddCompanyConf struct {
	CompanyConfId   string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
	CompanyConfName string `protobuf:"bytes,2,opt,name=companyConfName,proto3" json:"companyConfName,omitempty"`
	MinAmount       int64  `protobuf:"varint,3,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	MaxAmount       int64  `protobuf:"varint,4,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	OverdueDays     int32  `protobuf:"varint,5,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	MaxReceive      int64  `protobuf:"varint,6,opt,name=maxReceive,proto3" json:"maxReceive,omitempty"`
	IsAutoAdd       bool   `protobuf:"varint,7,opt,name=isAutoAdd,proto3" json:"isAutoAdd,omitempty"`
	Rate            int32  `protobuf:"varint,8,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *RequestAddCompanyConf) Reset()                    { *m = RequestAddCompanyConf{} }
func (m *RequestAddCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*RequestAddCompanyConf) ProtoMessage()               {}
func (*RequestAddCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

func (m *RequestAddCompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

func (m *RequestAddCompanyConf) GetCompanyConfName() string {
	if m != nil {
		return m.CompanyConfName
	}
	return ""
}

func (m *RequestAddCompanyConf) GetMinAmount() int64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *RequestAddCompanyConf) GetMaxAmount() int64 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *RequestAddCompanyConf) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *RequestAddCompanyConf) GetMaxReceive() int64 {
	if m != nil {
		return m.MaxReceive
	}
	return 0
}

func (m *RequestAddCompanyConf) GetIsAutoAdd() bool {
	if m != nil {
		return m.IsAutoAdd
	}
	return false
}

func (m *RequestAddCompanyConf) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 修改委外机构收单规则
type RequestEditCompanyConf struct {
	CompanyConfId   string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
	CompanyConfName string `protobuf:"bytes,2,opt,name=companyConfName,proto3" json:"companyConfName,omitempty"`
	MinAmount       int64  `protobuf:"varint,3,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	MaxAmount       int64  `protobuf:"varint,4,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	OverdueDays     int32  `protobuf:"varint,5,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	MaxReceive      int64  `protobuf:"varint,6,opt,name=maxReceive,proto3" json:"maxReceive,omitempty"`
	IsAutoAdd       bool   `protobuf:"varint,7,opt,name=isAutoAdd,proto3" json:"isAutoAdd,omitempty"`
	Rate            int32  `protobuf:"varint,8,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *RequestEditCompanyConf) Reset()                    { *m = RequestEditCompanyConf{} }
func (m *RequestEditCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*RequestEditCompanyConf) ProtoMessage()               {}
func (*RequestEditCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

func (m *RequestEditCompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

func (m *RequestEditCompanyConf) GetCompanyConfName() string {
	if m != nil {
		return m.CompanyConfName
	}
	return ""
}

func (m *RequestEditCompanyConf) GetMinAmount() int64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *RequestEditCompanyConf) GetMaxAmount() int64 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *RequestEditCompanyConf) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *RequestEditCompanyConf) GetMaxReceive() int64 {
	if m != nil {
		return m.MaxReceive
	}
	return 0
}

func (m *RequestEditCompanyConf) GetIsAutoAdd() bool {
	if m != nil {
		return m.IsAutoAdd
	}
	return false
}

func (m *RequestEditCompanyConf) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 删除委外机构收单规则
type RequestDelCompanyConf struct {
	CompanyConfId string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
}

func (m *RequestDelCompanyConf) Reset()                    { *m = RequestDelCompanyConf{} }
func (m *RequestDelCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*RequestDelCompanyConf) ProtoMessage()               {}
func (*RequestDelCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

func (m *RequestDelCompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

// 延长催收
type RequestDelayCaseList struct {
	CaseDelay []*CaseDelay `protobuf:"bytes,1,rep,name=caseDelay" json:"caseDelay,omitempty"`
}

func (m *RequestDelayCaseList) Reset()                    { *m = RequestDelayCaseList{} }
func (m *RequestDelayCaseList) String() string            { return proto.CompactTextString(m) }
func (*RequestDelayCaseList) ProtoMessage()               {}
func (*RequestDelayCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

func (m *RequestDelayCaseList) GetCaseDelay() []*CaseDelay {
	if m != nil {
		return m.CaseDelay
	}
	return nil
}

// 退单
type RequestCancelCaseList struct {
	CaseId []string `protobuf:"bytes,1,rep,name=caseId" json:"caseId,omitempty"`
}

func (m *RequestCancelCaseList) Reset()                    { *m = RequestCancelCaseList{} }
func (m *RequestCancelCaseList) String() string            { return proto.CompactTextString(m) }
func (*RequestCancelCaseList) ProtoMessage()               {}
func (*RequestCancelCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

func (m *RequestCancelCaseList) GetCaseId() []string {
	if m != nil {
		return m.CaseId
	}
	return nil
}

// 催收
type RequestCollectCaseList struct {
	CaseId []string `protobuf:"bytes,1,rep,name=caseId" json:"caseId,omitempty"`
}

func (m *RequestCollectCaseList) Reset()                    { *m = RequestCollectCaseList{} }
func (m *RequestCollectCaseList) String() string            { return proto.CompactTextString(m) }
func (*RequestCollectCaseList) ProtoMessage()               {}
func (*RequestCollectCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

func (m *RequestCollectCaseList) GetCaseId() []string {
	if m != nil {
		return m.CaseId
	}
	return nil
}

// 催收完成
type RequestFinishCaseList struct {
	CaseId []string `protobuf:"bytes,1,rep,name=caseId" json:"caseId,omitempty"`
}

func (m *RequestFinishCaseList) Reset()                    { *m = RequestFinishCaseList{} }
func (m *RequestFinishCaseList) String() string            { return proto.CompactTextString(m) }
func (*RequestFinishCaseList) ProtoMessage()               {}
func (*RequestFinishCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func (m *RequestFinishCaseList) GetCaseId() []string {
	if m != nil {
		return m.CaseId
	}
	return nil
}

// 转单
type RequestSwitchCase struct {
	CaseId    string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (m *RequestSwitchCase) Reset()                    { *m = RequestSwitchCase{} }
func (m *RequestSwitchCase) String() string            { return proto.CompactTextString(m) }
func (*RequestSwitchCase) ProtoMessage()               {}
func (*RequestSwitchCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

func (m *RequestSwitchCase) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *RequestSwitchCase) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

type RequestUpdateWeight struct {
	WeightList []*CompanyWeight `protobuf:"bytes,1,rep,name=weightList" json:"weightList,omitempty"`
}

func (m *RequestUpdateWeight) Reset()                    { *m = RequestUpdateWeight{} }
func (m *RequestUpdateWeight) String() string            { return proto.CompactTextString(m) }
func (*RequestUpdateWeight) ProtoMessage()               {}
func (*RequestUpdateWeight) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{19} }

func (m *RequestUpdateWeight) GetWeightList() []*CompanyWeight {
	if m != nil {
		return m.WeightList
	}
	return nil
}

type RequestDeliverCaseList struct {
	CaseIds []string `protobuf:"bytes,1,rep,name=caseIds" json:"caseIds,omitempty"`
}

func (m *RequestDeliverCaseList) Reset()                    { *m = RequestDeliverCaseList{} }
func (m *RequestDeliverCaseList) String() string            { return proto.CompactTextString(m) }
func (*RequestDeliverCaseList) ProtoMessage()               {}
func (*RequestDeliverCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{20} }

func (m *RequestDeliverCaseList) GetCaseIds() []string {
	if m != nil {
		return m.CaseIds
	}
	return nil
}

type Response struct {
	// Types that are valid to be assigned to Value:
	//	*Response_InitPlatform
	//	*Response_SetBank
	//	*Response_SetCompany
	//	*Response_AddCompany
	//	*Response_AddCaseConf
	//	*Response_EditCaseConf
	//	*Response_DelCaseConf
	//	*Response_ImportCase
	//	*Response_ImportCaseList
	//	*Response_ApplyCaseConf
	//	*Response_AddCompanyConf
	//	*Response_EditCompanyConf
	//	*Response_DelCompanyConf
	//	*Response_DelayCaseList
	//	*Response_CancelCaseList
	//	*Response_CollectCaseList
	//	*Response_FinishCaseList
	//	*Response_SwitchCase
	//	*Response_UpdateWeight
	//	*Response_DeliverCaseList
	//	*Response_Ok
	//	*Response_Exception
	Value isResponse_Value `protobuf_oneof:"value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{21} }

type isResponse_Value interface {
	isResponse_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_InitPlatform struct {
	InitPlatform *ResponseInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Response_SetBank struct {
	SetBank *ResponseSetBank `protobuf:"bytes,2,opt,name=setBank,oneof"`
}
type Response_SetCompany struct {
	SetCompany *ResponseSetCompany `protobuf:"bytes,3,opt,name=setCompany,oneof"`
}
type Response_AddCompany struct {
	AddCompany *ResponseAddCompany `protobuf:"bytes,4,opt,name=addCompany,oneof"`
}
type Response_AddCaseConf struct {
	AddCaseConf *ResponseAddCaseConf `protobuf:"bytes,5,opt,name=addCaseConf,oneof"`
}
type Response_EditCaseConf struct {
	EditCaseConf *ResponseEditCaseConf `protobuf:"bytes,6,opt,name=editCaseConf,oneof"`
}
type Response_DelCaseConf struct {
	DelCaseConf *ResponseDelCaseConf `protobuf:"bytes,7,opt,name=delCaseConf,oneof"`
}
type Response_ImportCase struct {
	ImportCase *ResponseImportCase `protobuf:"bytes,8,opt,name=importCase,oneof"`
}
type Response_ImportCaseList struct {
	ImportCaseList *ResponseImportCaseList `protobuf:"bytes,9,opt,name=importCaseList,oneof"`
}
type Response_ApplyCaseConf struct {
	ApplyCaseConf *ResponseApplyCaseConf `protobuf:"bytes,10,opt,name=applyCaseConf,oneof"`
}
type Response_AddCompanyConf struct {
	AddCompanyConf *ResponseAddCompanyConf `protobuf:"bytes,11,opt,name=addCompanyConf,oneof"`
}
type Response_EditCompanyConf struct {
	EditCompanyConf *ResponseEditCompanyConf `protobuf:"bytes,12,opt,name=editCompanyConf,oneof"`
}
type Response_DelCompanyConf struct {
	DelCompanyConf *ResponseDelCompanyConf `protobuf:"bytes,13,opt,name=delCompanyConf,oneof"`
}
type Response_DelayCaseList struct {
	DelayCaseList *ResponseDelayCaseList `protobuf:"bytes,14,opt,name=delayCaseList,oneof"`
}
type Response_CancelCaseList struct {
	CancelCaseList *ResponseCancelCaseList `protobuf:"bytes,15,opt,name=cancelCaseList,oneof"`
}
type Response_CollectCaseList struct {
	CollectCaseList *ResponseCollectCaseList `protobuf:"bytes,16,opt,name=collectCaseList,oneof"`
}
type Response_FinishCaseList struct {
	FinishCaseList *ResponseFinishCaseList `protobuf:"bytes,17,opt,name=finishCaseList,oneof"`
}
type Response_SwitchCase struct {
	SwitchCase *ResponseSwitchCase `protobuf:"bytes,18,opt,name=switchCase,oneof"`
}
type Response_UpdateWeight struct {
	UpdateWeight *ResponseUpdateWeight `protobuf:"bytes,19,opt,name=updateWeight,oneof"`
}
type Response_DeliverCaseList struct {
	DeliverCaseList *ResponseDeliverCaseList `protobuf:"bytes,20,opt,name=deliverCaseList,oneof"`
}
type Response_Ok struct {
	Ok *ResponseOK `protobuf:"bytes,21,opt,name=ok,oneof"`
}
type Response_Exception struct {
	Exception *ResponseException `protobuf:"bytes,22,opt,name=exception,oneof"`
}

func (*Response_InitPlatform) isResponse_Value()    {}
func (*Response_SetBank) isResponse_Value()         {}
func (*Response_SetCompany) isResponse_Value()      {}
func (*Response_AddCompany) isResponse_Value()      {}
func (*Response_AddCaseConf) isResponse_Value()     {}
func (*Response_EditCaseConf) isResponse_Value()    {}
func (*Response_DelCaseConf) isResponse_Value()     {}
func (*Response_ImportCase) isResponse_Value()      {}
func (*Response_ImportCaseList) isResponse_Value()  {}
func (*Response_ApplyCaseConf) isResponse_Value()   {}
func (*Response_AddCompanyConf) isResponse_Value()  {}
func (*Response_EditCompanyConf) isResponse_Value() {}
func (*Response_DelCompanyConf) isResponse_Value()  {}
func (*Response_DelayCaseList) isResponse_Value()   {}
func (*Response_CancelCaseList) isResponse_Value()  {}
func (*Response_CollectCaseList) isResponse_Value() {}
func (*Response_FinishCaseList) isResponse_Value()  {}
func (*Response_SwitchCase) isResponse_Value()      {}
func (*Response_UpdateWeight) isResponse_Value()    {}
func (*Response_DeliverCaseList) isResponse_Value() {}
func (*Response_Ok) isResponse_Value()              {}
func (*Response_Exception) isResponse_Value()       {}

func (m *Response) GetValue() isResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response) GetInitPlatform() *ResponseInitPlatform {
	if x, ok := m.GetValue().(*Response_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Response) GetSetBank() *ResponseSetBank {
	if x, ok := m.GetValue().(*Response_SetBank); ok {
		return x.SetBank
	}
	return nil
}

func (m *Response) GetSetCompany() *ResponseSetCompany {
	if x, ok := m.GetValue().(*Response_SetCompany); ok {
		return x.SetCompany
	}
	return nil
}

func (m *Response) GetAddCompany() *ResponseAddCompany {
	if x, ok := m.GetValue().(*Response_AddCompany); ok {
		return x.AddCompany
	}
	return nil
}

func (m *Response) GetAddCaseConf() *ResponseAddCaseConf {
	if x, ok := m.GetValue().(*Response_AddCaseConf); ok {
		return x.AddCaseConf
	}
	return nil
}

func (m *Response) GetEditCaseConf() *ResponseEditCaseConf {
	if x, ok := m.GetValue().(*Response_EditCaseConf); ok {
		return x.EditCaseConf
	}
	return nil
}

func (m *Response) GetDelCaseConf() *ResponseDelCaseConf {
	if x, ok := m.GetValue().(*Response_DelCaseConf); ok {
		return x.DelCaseConf
	}
	return nil
}

func (m *Response) GetImportCase() *ResponseImportCase {
	if x, ok := m.GetValue().(*Response_ImportCase); ok {
		return x.ImportCase
	}
	return nil
}

func (m *Response) GetImportCaseList() *ResponseImportCaseList {
	if x, ok := m.GetValue().(*Response_ImportCaseList); ok {
		return x.ImportCaseList
	}
	return nil
}

func (m *Response) GetApplyCaseConf() *ResponseApplyCaseConf {
	if x, ok := m.GetValue().(*Response_ApplyCaseConf); ok {
		return x.ApplyCaseConf
	}
	return nil
}

func (m *Response) GetAddCompanyConf() *ResponseAddCompanyConf {
	if x, ok := m.GetValue().(*Response_AddCompanyConf); ok {
		return x.AddCompanyConf
	}
	return nil
}

func (m *Response) GetEditCompanyConf() *ResponseEditCompanyConf {
	if x, ok := m.GetValue().(*Response_EditCompanyConf); ok {
		return x.EditCompanyConf
	}
	return nil
}

func (m *Response) GetDelCompanyConf() *ResponseDelCompanyConf {
	if x, ok := m.GetValue().(*Response_DelCompanyConf); ok {
		return x.DelCompanyConf
	}
	return nil
}

func (m *Response) GetDelayCaseList() *ResponseDelayCaseList {
	if x, ok := m.GetValue().(*Response_DelayCaseList); ok {
		return x.DelayCaseList
	}
	return nil
}

func (m *Response) GetCancelCaseList() *ResponseCancelCaseList {
	if x, ok := m.GetValue().(*Response_CancelCaseList); ok {
		return x.CancelCaseList
	}
	return nil
}

func (m *Response) GetCollectCaseList() *ResponseCollectCaseList {
	if x, ok := m.GetValue().(*Response_CollectCaseList); ok {
		return x.CollectCaseList
	}
	return nil
}

func (m *Response) GetFinishCaseList() *ResponseFinishCaseList {
	if x, ok := m.GetValue().(*Response_FinishCaseList); ok {
		return x.FinishCaseList
	}
	return nil
}

func (m *Response) GetSwitchCase() *ResponseSwitchCase {
	if x, ok := m.GetValue().(*Response_SwitchCase); ok {
		return x.SwitchCase
	}
	return nil
}

func (m *Response) GetUpdateWeight() *ResponseUpdateWeight {
	if x, ok := m.GetValue().(*Response_UpdateWeight); ok {
		return x.UpdateWeight
	}
	return nil
}

func (m *Response) GetDeliverCaseList() *ResponseDeliverCaseList {
	if x, ok := m.GetValue().(*Response_DeliverCaseList); ok {
		return x.DeliverCaseList
	}
	return nil
}

func (m *Response) GetOk() *ResponseOK {
	if x, ok := m.GetValue().(*Response_Ok); ok {
		return x.Ok
	}
	return nil
}

func (m *Response) GetException() *ResponseException {
	if x, ok := m.GetValue().(*Response_Exception); ok {
		return x.Exception
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_InitPlatform)(nil),
		(*Response_SetBank)(nil),
		(*Response_SetCompany)(nil),
		(*Response_AddCompany)(nil),
		(*Response_AddCaseConf)(nil),
		(*Response_EditCaseConf)(nil),
		(*Response_DelCaseConf)(nil),
		(*Response_ImportCase)(nil),
		(*Response_ImportCaseList)(nil),
		(*Response_ApplyCaseConf)(nil),
		(*Response_AddCompanyConf)(nil),
		(*Response_EditCompanyConf)(nil),
		(*Response_DelCompanyConf)(nil),
		(*Response_DelayCaseList)(nil),
		(*Response_CancelCaseList)(nil),
		(*Response_CollectCaseList)(nil),
		(*Response_FinishCaseList)(nil),
		(*Response_SwitchCase)(nil),
		(*Response_UpdateWeight)(nil),
		(*Response_DeliverCaseList)(nil),
		(*Response_Ok)(nil),
		(*Response_Exception)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// value
	switch x := m.Value.(type) {
	case *Response_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Response_SetBank:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetBank); err != nil {
			return err
		}
	case *Response_SetCompany:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCompany); err != nil {
			return err
		}
	case *Response_AddCompany:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCompany); err != nil {
			return err
		}
	case *Response_AddCaseConf:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCaseConf); err != nil {
			return err
		}
	case *Response_EditCaseConf:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EditCaseConf); err != nil {
			return err
		}
	case *Response_DelCaseConf:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelCaseConf); err != nil {
			return err
		}
	case *Response_ImportCase:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImportCase); err != nil {
			return err
		}
	case *Response_ImportCaseList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImportCaseList); err != nil {
			return err
		}
	case *Response_ApplyCaseConf:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyCaseConf); err != nil {
			return err
		}
	case *Response_AddCompanyConf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCompanyConf); err != nil {
			return err
		}
	case *Response_EditCompanyConf:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EditCompanyConf); err != nil {
			return err
		}
	case *Response_DelCompanyConf:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelCompanyConf); err != nil {
			return err
		}
	case *Response_DelayCaseList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelayCaseList); err != nil {
			return err
		}
	case *Response_CancelCaseList:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CancelCaseList); err != nil {
			return err
		}
	case *Response_CollectCaseList:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CollectCaseList); err != nil {
			return err
		}
	case *Response_FinishCaseList:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FinishCaseList); err != nil {
			return err
		}
	case *Response_SwitchCase:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SwitchCase); err != nil {
			return err
		}
	case *Response_UpdateWeight:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateWeight); err != nil {
			return err
		}
	case *Response_DeliverCaseList:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeliverCaseList); err != nil {
			return err
		}
	case *Response_Ok:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ok); err != nil {
			return err
		}
	case *Response_Exception:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Exception); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Value has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Response_InitPlatform{msg}
		return true, err
	case 2: // value.setBank
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSetBank)
		err := b.DecodeMessage(msg)
		m.Value = &Response_SetBank{msg}
		return true, err
	case 3: // value.setCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSetCompany)
		err := b.DecodeMessage(msg)
		m.Value = &Response_SetCompany{msg}
		return true, err
	case 4: // value.addCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAddCompany)
		err := b.DecodeMessage(msg)
		m.Value = &Response_AddCompany{msg}
		return true, err
	case 5: // value.addCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAddCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_AddCaseConf{msg}
		return true, err
	case 6: // value.editCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseEditCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_EditCaseConf{msg}
		return true, err
	case 7: // value.delCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseDelCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_DelCaseConf{msg}
		return true, err
	case 8: // value.importCase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseImportCase)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ImportCase{msg}
		return true, err
	case 9: // value.importCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseImportCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ImportCaseList{msg}
		return true, err
	case 10: // value.applyCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseApplyCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_ApplyCaseConf{msg}
		return true, err
	case 11: // value.addCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAddCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_AddCompanyConf{msg}
		return true, err
	case 12: // value.editCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseEditCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_EditCompanyConf{msg}
		return true, err
	case 13: // value.delCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseDelCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Response_DelCompanyConf{msg}
		return true, err
	case 14: // value.delayCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseDelayCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_DelayCaseList{msg}
		return true, err
	case 15: // value.cancelCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseCancelCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_CancelCaseList{msg}
		return true, err
	case 16: // value.collectCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseCollectCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_CollectCaseList{msg}
		return true, err
	case 17: // value.finishCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseFinishCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_FinishCaseList{msg}
		return true, err
	case 18: // value.switchCase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSwitchCase)
		err := b.DecodeMessage(msg)
		m.Value = &Response_SwitchCase{msg}
		return true, err
	case 19: // value.updateWeight
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseUpdateWeight)
		err := b.DecodeMessage(msg)
		m.Value = &Response_UpdateWeight{msg}
		return true, err
	case 20: // value.deliverCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseDeliverCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Response_DeliverCaseList{msg}
		return true, err
	case 21: // value.ok
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseOK)
		err := b.DecodeMessage(msg)
		m.Value = &Response_Ok{msg}
		return true, err
	case 22: // value.exception
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseException)
		err := b.DecodeMessage(msg)
		m.Value = &Response_Exception{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// value
	switch x := m.Value.(type) {
	case *Response_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SetBank:
		s := proto.Size(x.SetBank)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SetCompany:
		s := proto.Size(x.SetCompany)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_AddCompany:
		s := proto.Size(x.AddCompany)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_AddCaseConf:
		s := proto.Size(x.AddCaseConf)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_EditCaseConf:
		s := proto.Size(x.EditCaseConf)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_DelCaseConf:
		s := proto.Size(x.DelCaseConf)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ImportCase:
		s := proto.Size(x.ImportCase)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ImportCaseList:
		s := proto.Size(x.ImportCaseList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ApplyCaseConf:
		s := proto.Size(x.ApplyCaseConf)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_AddCompanyConf:
		s := proto.Size(x.AddCompanyConf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_EditCompanyConf:
		s := proto.Size(x.EditCompanyConf)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_DelCompanyConf:
		s := proto.Size(x.DelCompanyConf)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_DelayCaseList:
		s := proto.Size(x.DelayCaseList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_CancelCaseList:
		s := proto.Size(x.CancelCaseList)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_CollectCaseList:
		s := proto.Size(x.CollectCaseList)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_FinishCaseList:
		s := proto.Size(x.FinishCaseList)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SwitchCase:
		s := proto.Size(x.SwitchCase)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_UpdateWeight:
		s := proto.Size(x.UpdateWeight)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_DeliverCaseList:
		s := proto.Size(x.DeliverCaseList)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Ok:
		s := proto.Size(x.Ok)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Exception:
		s := proto.Size(x.Exception)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResponseException struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ResponseException) Reset()                    { *m = ResponseException{} }
func (m *ResponseException) String() string            { return proto.CompactTextString(m) }
func (*ResponseException) ProtoMessage()               {}
func (*ResponseException) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{22} }

func (m *ResponseException) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ResponseOK struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *ResponseOK) Reset()                    { *m = ResponseOK{} }
func (m *ResponseOK) String() string            { return proto.CompactTextString(m) }
func (*ResponseOK) ProtoMessage()               {}
func (*ResponseOK) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{23} }

func (m *ResponseOK) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Receipt struct {
	IsOk bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Err  []byte `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{24} }

func (m *Receipt) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *Receipt) GetErr() []byte {
	if m != nil {
		return m.Err
	}
	return nil
}

type ResponseInitPlatform struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseInitPlatform) Reset()                    { *m = ResponseInitPlatform{} }
func (m *ResponseInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*ResponseInitPlatform) ProtoMessage()               {}
func (*ResponseInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{25} }

func (m *ResponseInitPlatform) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseInitPlatform) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseSetBank struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseSetBank) Reset()                    { *m = ResponseSetBank{} }
func (m *ResponseSetBank) String() string            { return proto.CompactTextString(m) }
func (*ResponseSetBank) ProtoMessage()               {}
func (*ResponseSetBank) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{26} }

func (m *ResponseSetBank) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseSetBank) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseSetCompany struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseSetCompany) Reset()                    { *m = ResponseSetCompany{} }
func (m *ResponseSetCompany) String() string            { return proto.CompactTextString(m) }
func (*ResponseSetCompany) ProtoMessage()               {}
func (*ResponseSetCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{27} }

func (m *ResponseSetCompany) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseSetCompany) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseAddCompany struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseAddCompany) Reset()                    { *m = ResponseAddCompany{} }
func (m *ResponseAddCompany) String() string            { return proto.CompactTextString(m) }
func (*ResponseAddCompany) ProtoMessage()               {}
func (*ResponseAddCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{28} }

func (m *ResponseAddCompany) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseAddCompany) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseAddCaseConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseAddCaseConf) Reset()                    { *m = ResponseAddCaseConf{} }
func (m *ResponseAddCaseConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseAddCaseConf) ProtoMessage()               {}
func (*ResponseAddCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{29} }

func (m *ResponseAddCaseConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseAddCaseConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseEditCaseConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseEditCaseConf) Reset()                    { *m = ResponseEditCaseConf{} }
func (m *ResponseEditCaseConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseEditCaseConf) ProtoMessage()               {}
func (*ResponseEditCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{30} }

func (m *ResponseEditCaseConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseEditCaseConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseDelCaseConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseDelCaseConf) Reset()                    { *m = ResponseDelCaseConf{} }
func (m *ResponseDelCaseConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseDelCaseConf) ProtoMessage()               {}
func (*ResponseDelCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{31} }

func (m *ResponseDelCaseConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseDelCaseConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseImportCase struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseImportCase) Reset()                    { *m = ResponseImportCase{} }
func (m *ResponseImportCase) String() string            { return proto.CompactTextString(m) }
func (*ResponseImportCase) ProtoMessage()               {}
func (*ResponseImportCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{32} }

func (m *ResponseImportCase) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseImportCase) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseImportCaseList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseImportCaseList) Reset()                    { *m = ResponseImportCaseList{} }
func (m *ResponseImportCaseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseImportCaseList) ProtoMessage()               {}
func (*ResponseImportCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{33} }

func (m *ResponseImportCaseList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseImportCaseList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseApplyCaseConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseApplyCaseConf) Reset()                    { *m = ResponseApplyCaseConf{} }
func (m *ResponseApplyCaseConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseApplyCaseConf) ProtoMessage()               {}
func (*ResponseApplyCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{34} }

func (m *ResponseApplyCaseConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseApplyCaseConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseAddCompanyConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseAddCompanyConf) Reset()                    { *m = ResponseAddCompanyConf{} }
func (m *ResponseAddCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseAddCompanyConf) ProtoMessage()               {}
func (*ResponseAddCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{35} }

func (m *ResponseAddCompanyConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseAddCompanyConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseEditCompanyConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseEditCompanyConf) Reset()                    { *m = ResponseEditCompanyConf{} }
func (m *ResponseEditCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseEditCompanyConf) ProtoMessage()               {}
func (*ResponseEditCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{36} }

func (m *ResponseEditCompanyConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseEditCompanyConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseDelCompanyConf struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseDelCompanyConf) Reset()                    { *m = ResponseDelCompanyConf{} }
func (m *ResponseDelCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*ResponseDelCompanyConf) ProtoMessage()               {}
func (*ResponseDelCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{37} }

func (m *ResponseDelCompanyConf) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseDelCompanyConf) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseDelayCaseList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseDelayCaseList) Reset()                    { *m = ResponseDelayCaseList{} }
func (m *ResponseDelayCaseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseDelayCaseList) ProtoMessage()               {}
func (*ResponseDelayCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{38} }

func (m *ResponseDelayCaseList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseDelayCaseList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseCancelCaseList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseCancelCaseList) Reset()                    { *m = ResponseCancelCaseList{} }
func (m *ResponseCancelCaseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseCancelCaseList) ProtoMessage()               {}
func (*ResponseCancelCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{39} }

func (m *ResponseCancelCaseList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseCancelCaseList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseCollectCaseList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseCollectCaseList) Reset()                    { *m = ResponseCollectCaseList{} }
func (m *ResponseCollectCaseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseCollectCaseList) ProtoMessage()               {}
func (*ResponseCollectCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{40} }

func (m *ResponseCollectCaseList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseCollectCaseList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseFinishCaseList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseFinishCaseList) Reset()                    { *m = ResponseFinishCaseList{} }
func (m *ResponseFinishCaseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseFinishCaseList) ProtoMessage()               {}
func (*ResponseFinishCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{41} }

func (m *ResponseFinishCaseList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseFinishCaseList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseSwitchCase struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseSwitchCase) Reset()                    { *m = ResponseSwitchCase{} }
func (m *ResponseSwitchCase) String() string            { return proto.CompactTextString(m) }
func (*ResponseSwitchCase) ProtoMessage()               {}
func (*ResponseSwitchCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{42} }

func (m *ResponseSwitchCase) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseSwitchCase) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseUpdateWeight struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseUpdateWeight) Reset()                    { *m = ResponseUpdateWeight{} }
func (m *ResponseUpdateWeight) String() string            { return proto.CompactTextString(m) }
func (*ResponseUpdateWeight) ProtoMessage()               {}
func (*ResponseUpdateWeight) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{43} }

func (m *ResponseUpdateWeight) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseUpdateWeight) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResponseDeliverCaseList struct {
	InstructionId int64  `protobuf:"varint,1,opt,name=instructionId,proto3" json:"instructionId,omitempty"`
	Event         *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ResponseDeliverCaseList) Reset()                    { *m = ResponseDeliverCaseList{} }
func (m *ResponseDeliverCaseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseDeliverCaseList) ProtoMessage()               {}
func (*ResponseDeliverCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{44} }

func (m *ResponseDeliverCaseList) GetInstructionId() int64 {
	if m != nil {
		return m.InstructionId
	}
	return 0
}

func (m *ResponseDeliverCaseList) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

// 银行
type Bank struct {
	Pubkey             []byte      `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	BankId             string      `protobuf:"bytes,2,opt,name=bankId,proto3" json:"bankId,omitempty"`
	BankName           string      `protobuf:"bytes,3,opt,name=bankName,proto3" json:"bankName,omitempty"`
	WaitingList        []*Case     `protobuf:"bytes,4,rep,name=waitingList" json:"waitingList,omitempty"`
	CollectingList     []*Case     `protobuf:"bytes,5,rep,name=collectingList" json:"collectingList,omitempty"`
	DelayedList        []*Case     `protobuf:"bytes,6,rep,name=delayedList" json:"delayedList,omitempty"`
	CaseConfList       []*CaseConf `protobuf:"bytes,7,rep,name=caseConfList" json:"caseConfList,omitempty"`
	IsApplyCompanyConf bool        `protobuf:"varint,8,opt,name=isApplyCompanyConf,proto3" json:"isApplyCompanyConf,omitempty"`
	IsCompanyOk        bool        `protobuf:"varint,9,opt,name=isCompanyOk,proto3" json:"isCompanyOk,omitempty"`
	IsBankConfOk       bool        `protobuf:"varint,10,opt,name=isBankConfOk,proto3" json:"isBankConfOk,omitempty"`
}

func (m *Bank) Reset()                    { *m = Bank{} }
func (m *Bank) String() string            { return proto.CompactTextString(m) }
func (*Bank) ProtoMessage()               {}
func (*Bank) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{45} }

func (m *Bank) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Bank) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *Bank) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *Bank) GetWaitingList() []*Case {
	if m != nil {
		return m.WaitingList
	}
	return nil
}

func (m *Bank) GetCollectingList() []*Case {
	if m != nil {
		return m.CollectingList
	}
	return nil
}

func (m *Bank) GetDelayedList() []*Case {
	if m != nil {
		return m.DelayedList
	}
	return nil
}

func (m *Bank) GetCaseConfList() []*CaseConf {
	if m != nil {
		return m.CaseConfList
	}
	return nil
}

func (m *Bank) GetIsApplyCompanyConf() bool {
	if m != nil {
		return m.IsApplyCompanyConf
	}
	return false
}

func (m *Bank) GetIsCompanyOk() bool {
	if m != nil {
		return m.IsCompanyOk
	}
	return false
}

func (m *Bank) GetIsBankConfOk() bool {
	if m != nil {
		return m.IsBankConfOk
	}
	return false
}

type Banks struct {
	Banks []string `protobuf:"bytes,1,rep,name=banks" json:"banks,omitempty"`
}

func (m *Banks) Reset()                    { *m = Banks{} }
func (m *Banks) String() string            { return proto.CompactTextString(m) }
func (*Banks) ProtoMessage()               {}
func (*Banks) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{46} }

func (m *Banks) GetBanks() []string {
	if m != nil {
		return m.Banks
	}
	return nil
}

type DeliverResult struct {
	DeliverList []*DeliverCompany `protobuf:"bytes,1,rep,name=deliverList" json:"deliverList,omitempty"`
}

func (m *DeliverResult) Reset()                    { *m = DeliverResult{} }
func (m *DeliverResult) String() string            { return proto.CompactTextString(m) }
func (*DeliverResult) ProtoMessage()               {}
func (*DeliverResult) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{47} }

func (m *DeliverResult) GetDeliverList() []*DeliverCompany {
	if m != nil {
		return m.DeliverList
	}
	return nil
}

type CompanyWeight struct {
	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
	Area      string `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	Weight    int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *CompanyWeight) Reset()                    { *m = CompanyWeight{} }
func (m *CompanyWeight) String() string            { return proto.CompactTextString(m) }
func (*CompanyWeight) ProtoMessage()               {}
func (*CompanyWeight) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{48} }

func (m *CompanyWeight) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *CompanyWeight) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *CompanyWeight) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type SwitchCase struct {
	CaseId    string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (m *SwitchCase) Reset()                    { *m = SwitchCase{} }
func (m *SwitchCase) String() string            { return proto.CompactTextString(m) }
func (*SwitchCase) ProtoMessage()               {}
func (*SwitchCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{49} }

func (m *SwitchCase) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *SwitchCase) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

type DeliverCompany struct {
	CompanyId string   `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
	Area      string   `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	Weight    int32    `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Indexs    []int32  `protobuf:"varint,4,rep,packed,name=indexs" json:"indexs,omitempty"`
	CaseIds   []string `protobuf:"bytes,5,rep,name=caseIds" json:"caseIds,omitempty"`
}

func (m *DeliverCompany) Reset()                    { *m = DeliverCompany{} }
func (m *DeliverCompany) String() string            { return proto.CompactTextString(m) }
func (*DeliverCompany) ProtoMessage()               {}
func (*DeliverCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{50} }

func (m *DeliverCompany) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *DeliverCompany) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *DeliverCompany) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *DeliverCompany) GetIndexs() []int32 {
	if m != nil {
		return m.Indexs
	}
	return nil
}

func (m *DeliverCompany) GetCaseIds() []string {
	if m != nil {
		return m.CaseIds
	}
	return nil
}

// 委外机构
type Company struct {
	CompanyPubkey  []byte       `protobuf:"bytes,1,opt,name=companyPubkey,proto3" json:"companyPubkey,omitempty"`
	CompanyArea    string       `protobuf:"bytes,2,opt,name=companyArea,proto3" json:"companyArea,omitempty"`
	CompanyId      string       `protobuf:"bytes,3,opt,name=companyId,proto3" json:"companyId,omitempty"`
	CompanyName    string       `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName,omitempty"`
	Weight         int32        `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	DeliverList    []*Case      `protobuf:"bytes,6,rep,name=deliverList" json:"deliverList,omitempty"`
	CollectingList []*Case      `protobuf:"bytes,7,rep,name=collectingList" json:"collectingList,omitempty"`
	DelayedList    []*Case      `protobuf:"bytes,8,rep,name=delayedList" json:"delayedList,omitempty"`
	CompanyConf    *CompanyConf `protobuf:"bytes,9,opt,name=companyConf" json:"companyConf,omitempty"`
	UnDeliverList  []*Case      `protobuf:"bytes,10,rep,name=unDeliverList" json:"unDeliverList,omitempty"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{51} }

func (m *Company) GetCompanyPubkey() []byte {
	if m != nil {
		return m.CompanyPubkey
	}
	return nil
}

func (m *Company) GetCompanyArea() string {
	if m != nil {
		return m.CompanyArea
	}
	return ""
}

func (m *Company) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *Company) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Company) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Company) GetDeliverList() []*Case {
	if m != nil {
		return m.DeliverList
	}
	return nil
}

func (m *Company) GetCollectingList() []*Case {
	if m != nil {
		return m.CollectingList
	}
	return nil
}

func (m *Company) GetDelayedList() []*Case {
	if m != nil {
		return m.DelayedList
	}
	return nil
}

func (m *Company) GetCompanyConf() *CompanyConf {
	if m != nil {
		return m.CompanyConf
	}
	return nil
}

func (m *Company) GetUnDeliverList() []*Case {
	if m != nil {
		return m.UnDeliverList
	}
	return nil
}

// 收单规则
type CompanyConf struct {
	CompanyConfId   string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
	CompanyConfName string `protobuf:"bytes,2,opt,name=companyConfName,proto3" json:"companyConfName,omitempty"`
	MinAmount       int64  `protobuf:"varint,3,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	MaxAmount       int64  `protobuf:"varint,4,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	OverdueDays     int32  `protobuf:"varint,5,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	MaxReceive      int64  `protobuf:"varint,6,opt,name=maxReceive,proto3" json:"maxReceive,omitempty"`
	IsAutoAdd       bool   `protobuf:"varint,7,opt,name=isAutoAdd,proto3" json:"isAutoAdd,omitempty"`
	Rate            int32  `protobuf:"varint,8,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *CompanyConf) Reset()                    { *m = CompanyConf{} }
func (m *CompanyConf) String() string            { return proto.CompactTextString(m) }
func (*CompanyConf) ProtoMessage()               {}
func (*CompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{52} }

func (m *CompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

func (m *CompanyConf) GetCompanyConfName() string {
	if m != nil {
		return m.CompanyConfName
	}
	return ""
}

func (m *CompanyConf) GetMinAmount() int64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *CompanyConf) GetMaxAmount() int64 {
	if m != nil {
		return m.MaxAmount
	}
	return 0
}

func (m *CompanyConf) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *CompanyConf) GetMaxReceive() int64 {
	if m != nil {
		return m.MaxReceive
	}
	return 0
}

func (m *CompanyConf) GetIsAutoAdd() bool {
	if m != nil {
		return m.IsAutoAdd
	}
	return false
}

func (m *CompanyConf) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 案件规则
type CaseConf struct {
	BankId        string `protobuf:"bytes,1,opt,name=bankId,proto3" json:"bankId,omitempty"`
	CaseConfId    string `protobuf:"bytes,2,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
	CaseMinAmount int64  `protobuf:"varint,3,opt,name=caseMinAmount,proto3" json:"caseMinAmount,omitempty"`
	CaseMaxAmount int64  `protobuf:"varint,4,opt,name=caseMaxAmount,proto3" json:"caseMaxAmount,omitempty"`
	OverdueDays   int32  `protobuf:"varint,5,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	ExpireDays    int32  `protobuf:"varint,6,opt,name=expireDays,proto3" json:"expireDays,omitempty"`
	IsApply       bool   `protobuf:"varint,7,opt,name=isApply,proto3" json:"isApply,omitempty"`
	Rate          int32  `protobuf:"varint,8,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *CaseConf) Reset()                    { *m = CaseConf{} }
func (m *CaseConf) String() string            { return proto.CompactTextString(m) }
func (*CaseConf) ProtoMessage()               {}
func (*CaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{53} }

func (m *CaseConf) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *CaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

func (m *CaseConf) GetCaseMinAmount() int64 {
	if m != nil {
		return m.CaseMinAmount
	}
	return 0
}

func (m *CaseConf) GetCaseMaxAmount() int64 {
	if m != nil {
		return m.CaseMaxAmount
	}
	return 0
}

func (m *CaseConf) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *CaseConf) GetExpireDays() int32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *CaseConf) GetIsApply() bool {
	if m != nil {
		return m.IsApply
	}
	return false
}

func (m *CaseConf) GetRate() int32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 案件
type Case struct {
	CaseId         string    `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	CaseOwner      string    `protobuf:"bytes,2,opt,name=caseOwner,proto3" json:"caseOwner,omitempty"`
	CaseIdCard     string    `protobuf:"bytes,3,opt,name=caseIdCard,proto3" json:"caseIdCard,omitempty"`
	Contract       string    `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	BankCard       string    `protobuf:"bytes,5,opt,name=bankCard,proto3" json:"bankCard,omitempty"`
	DebtAmount     int64     `protobuf:"varint,6,opt,name=debtAmount,proto3" json:"debtAmount,omitempty"`
	OriginalAmount int64     `protobuf:"varint,7,opt,name=originalAmount,proto3" json:"originalAmount,omitempty"`
	Fees           int64     `protobuf:"varint,8,opt,name=fees,proto3" json:"fees,omitempty"`
	OverdueDays    int32     `protobuf:"varint,9,opt,name=overdueDays,proto3" json:"overdueDays,omitempty"`
	DelayDays      int32     `protobuf:"varint,10,opt,name=delayDays,proto3" json:"delayDays,omitempty"`
	CaseArea       string    `protobuf:"bytes,11,opt,name=caseArea,proto3" json:"caseArea,omitempty"`
	CaseState      CaseState `protobuf:"varint,12,opt,name=caseState,proto3,enum=gfcollection.CaseState" json:"caseState,omitempty"`
	BankId         string    `protobuf:"bytes,13,opt,name=bankId,proto3" json:"bankId,omitempty"`
	CompanyId      string    `protobuf:"bytes,14,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (m *Case) Reset()                    { *m = Case{} }
func (m *Case) String() string            { return proto.CompactTextString(m) }
func (*Case) ProtoMessage()               {}
func (*Case) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{54} }

func (m *Case) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *Case) GetCaseOwner() string {
	if m != nil {
		return m.CaseOwner
	}
	return ""
}

func (m *Case) GetCaseIdCard() string {
	if m != nil {
		return m.CaseIdCard
	}
	return ""
}

func (m *Case) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Case) GetBankCard() string {
	if m != nil {
		return m.BankCard
	}
	return ""
}

func (m *Case) GetDebtAmount() int64 {
	if m != nil {
		return m.DebtAmount
	}
	return 0
}

func (m *Case) GetOriginalAmount() int64 {
	if m != nil {
		return m.OriginalAmount
	}
	return 0
}

func (m *Case) GetFees() int64 {
	if m != nil {
		return m.Fees
	}
	return 0
}

func (m *Case) GetOverdueDays() int32 {
	if m != nil {
		return m.OverdueDays
	}
	return 0
}

func (m *Case) GetDelayDays() int32 {
	if m != nil {
		return m.DelayDays
	}
	return 0
}

func (m *Case) GetCaseArea() string {
	if m != nil {
		return m.CaseArea
	}
	return ""
}

func (m *Case) GetCaseState() CaseState {
	if m != nil {
		return m.CaseState
	}
	return CaseState_CS_UNK
}

func (m *Case) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *Case) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

// 地区列表
type AreaList struct {
	AreaCompany []*AreaCompany `protobuf:"bytes,1,rep,name=areaCompany" json:"areaCompany,omitempty"`
}

func (m *AreaList) Reset()                    { *m = AreaList{} }
func (m *AreaList) String() string            { return proto.CompactTextString(m) }
func (*AreaList) ProtoMessage()               {}
func (*AreaList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{55} }

func (m *AreaList) GetAreaCompany() []*AreaCompany {
	if m != nil {
		return m.AreaCompany
	}
	return nil
}

//
type AreaCompany struct {
	Area     string           `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
	Companys []*WeightCompany `protobuf:"bytes,2,rep,name=companys" json:"companys,omitempty"`
}

func (m *AreaCompany) Reset()                    { *m = AreaCompany{} }
func (m *AreaCompany) String() string            { return proto.CompactTextString(m) }
func (*AreaCompany) ProtoMessage()               {}
func (*AreaCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{56} }

func (m *AreaCompany) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *AreaCompany) GetCompanys() []*WeightCompany {
	if m != nil {
		return m.Companys
	}
	return nil
}

type WeightCompany struct {
	CompanyId   string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
	Weight      int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	FirstWeight int32  `protobuf:"varint,3,opt,name=firstWeight,proto3" json:"firstWeight,omitempty"`
}

func (m *WeightCompany) Reset()                    { *m = WeightCompany{} }
func (m *WeightCompany) String() string            { return proto.CompactTextString(m) }
func (*WeightCompany) ProtoMessage()               {}
func (*WeightCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{57} }

func (m *WeightCompany) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *WeightCompany) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *WeightCompany) GetFirstWeight() int32 {
	if m != nil {
		return m.FirstWeight
	}
	return 0
}

// 地区案件池
type AreaCasePool struct {
	BankId         string  `protobuf:"bytes,1,opt,name=bankId,proto3" json:"bankId,omitempty"`
	Area           string  `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	CaseList       []*Case `protobuf:"bytes,3,rep,name=caseList" json:"caseList,omitempty"`
	WaitingList    []*Case `protobuf:"bytes,4,rep,name=waitingList" json:"waitingList,omitempty"`
	DeliverList    []*Case `protobuf:"bytes,5,rep,name=deliverList" json:"deliverList,omitempty"`
	CollectingList []*Case `protobuf:"bytes,6,rep,name=collectingList" json:"collectingList,omitempty"`
	DelayedList    []*Case `protobuf:"bytes,7,rep,name=delayedList" json:"delayedList,omitempty"`
}

func (m *AreaCasePool) Reset()                    { *m = AreaCasePool{} }
func (m *AreaCasePool) String() string            { return proto.CompactTextString(m) }
func (*AreaCasePool) ProtoMessage()               {}
func (*AreaCasePool) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{58} }

func (m *AreaCasePool) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *AreaCasePool) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *AreaCasePool) GetCaseList() []*Case {
	if m != nil {
		return m.CaseList
	}
	return nil
}

func (m *AreaCasePool) GetWaitingList() []*Case {
	if m != nil {
		return m.WaitingList
	}
	return nil
}

func (m *AreaCasePool) GetDeliverList() []*Case {
	if m != nil {
		return m.DeliverList
	}
	return nil
}

func (m *AreaCasePool) GetCollectingList() []*Case {
	if m != nil {
		return m.CollectingList
	}
	return nil
}

func (m *AreaCasePool) GetDelayedList() []*Case {
	if m != nil {
		return m.DelayedList
	}
	return nil
}

type Platform struct {
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Platform) Reset()                    { *m = Platform{} }
func (m *Platform) String() string            { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()               {}
func (*Platform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{59} }

func (m *Platform) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Platform) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type CaseDelay struct {
	CaseId string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	Days   int32  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (m *CaseDelay) Reset()                    { *m = CaseDelay{} }
func (m *CaseDelay) String() string            { return proto.CompactTextString(m) }
func (*CaseDelay) ProtoMessage()               {}
func (*CaseDelay) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{60} }

func (m *CaseDelay) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *CaseDelay) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

type Event struct {
	// Types that are valid to be assigned to Value:
	//	*Event_InitPlatform
	//	*Event_SetBank
	//	*Event_SetCompany
	//	*Event_AddCompany
	//	*Event_AddCaseConf
	//	*Event_EditCaseConf
	//	*Event_DelCaseConf
	//	*Event_ImportCase
	//	*Event_ImportCaseList
	//	*Event_ApplyCaseConf
	//	*Event_AddCompanyConf
	//	*Event_EditCompanyConf
	//	*Event_DelCompanyConf
	//	*Event_DelayCaseList
	//	*Event_CancelCaseList
	//	*Event_CollectCaseList
	//	*Event_FinishCaseList
	//	*Event_SwitchCase
	//	*Event_UpdateWeight
	//	*Event_DeliverCaseList
	Value isEvent_Value `protobuf_oneof:"value"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{61} }

type isEvent_Value interface {
	isEvent_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_InitPlatform struct {
	InitPlatform *EventInitPlatform `protobuf:"bytes,1,opt,name=initPlatform,oneof"`
}
type Event_SetBank struct {
	SetBank *EventSetBank `protobuf:"bytes,2,opt,name=setBank,oneof"`
}
type Event_SetCompany struct {
	SetCompany *EventSetCompany `protobuf:"bytes,3,opt,name=setCompany,oneof"`
}
type Event_AddCompany struct {
	AddCompany *EventAddCompany `protobuf:"bytes,4,opt,name=addCompany,oneof"`
}
type Event_AddCaseConf struct {
	AddCaseConf *EventAddCaseConf `protobuf:"bytes,5,opt,name=addCaseConf,oneof"`
}
type Event_EditCaseConf struct {
	EditCaseConf *EventEditCaseConf `protobuf:"bytes,6,opt,name=editCaseConf,oneof"`
}
type Event_DelCaseConf struct {
	DelCaseConf *EventDelCaseConf `protobuf:"bytes,7,opt,name=delCaseConf,oneof"`
}
type Event_ImportCase struct {
	ImportCase *EventImportCase `protobuf:"bytes,8,opt,name=importCase,oneof"`
}
type Event_ImportCaseList struct {
	ImportCaseList *EventImportCaseList `protobuf:"bytes,9,opt,name=importCaseList,oneof"`
}
type Event_ApplyCaseConf struct {
	ApplyCaseConf *EventApplyCaseConf `protobuf:"bytes,10,opt,name=applyCaseConf,oneof"`
}
type Event_AddCompanyConf struct {
	AddCompanyConf *EventAddCompanyConf `protobuf:"bytes,11,opt,name=addCompanyConf,oneof"`
}
type Event_EditCompanyConf struct {
	EditCompanyConf *EventEditCompanyConf `protobuf:"bytes,12,opt,name=editCompanyConf,oneof"`
}
type Event_DelCompanyConf struct {
	DelCompanyConf *EventDelCompanyConf `protobuf:"bytes,13,opt,name=delCompanyConf,oneof"`
}
type Event_DelayCaseList struct {
	DelayCaseList *EventDelayCaseList `protobuf:"bytes,14,opt,name=delayCaseList,oneof"`
}
type Event_CancelCaseList struct {
	CancelCaseList *EventCancelCaseList `protobuf:"bytes,15,opt,name=cancelCaseList,oneof"`
}
type Event_CollectCaseList struct {
	CollectCaseList *EventCollectCaseList `protobuf:"bytes,16,opt,name=collectCaseList,oneof"`
}
type Event_FinishCaseList struct {
	FinishCaseList *EventFinishCaseList `protobuf:"bytes,17,opt,name=finishCaseList,oneof"`
}
type Event_SwitchCase struct {
	SwitchCase *EventSwitchCase `protobuf:"bytes,18,opt,name=switchCase,oneof"`
}
type Event_UpdateWeight struct {
	UpdateWeight *EventUpdateWeight `protobuf:"bytes,19,opt,name=updateWeight,oneof"`
}
type Event_DeliverCaseList struct {
	DeliverCaseList *EventDeliverCaseList `protobuf:"bytes,20,opt,name=deliverCaseList,oneof"`
}

func (*Event_InitPlatform) isEvent_Value()    {}
func (*Event_SetBank) isEvent_Value()         {}
func (*Event_SetCompany) isEvent_Value()      {}
func (*Event_AddCompany) isEvent_Value()      {}
func (*Event_AddCaseConf) isEvent_Value()     {}
func (*Event_EditCaseConf) isEvent_Value()    {}
func (*Event_DelCaseConf) isEvent_Value()     {}
func (*Event_ImportCase) isEvent_Value()      {}
func (*Event_ImportCaseList) isEvent_Value()  {}
func (*Event_ApplyCaseConf) isEvent_Value()   {}
func (*Event_AddCompanyConf) isEvent_Value()  {}
func (*Event_EditCompanyConf) isEvent_Value() {}
func (*Event_DelCompanyConf) isEvent_Value()  {}
func (*Event_DelayCaseList) isEvent_Value()   {}
func (*Event_CancelCaseList) isEvent_Value()  {}
func (*Event_CollectCaseList) isEvent_Value() {}
func (*Event_FinishCaseList) isEvent_Value()  {}
func (*Event_SwitchCase) isEvent_Value()      {}
func (*Event_UpdateWeight) isEvent_Value()    {}
func (*Event_DeliverCaseList) isEvent_Value() {}

func (m *Event) GetValue() isEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Event) GetInitPlatform() *EventInitPlatform {
	if x, ok := m.GetValue().(*Event_InitPlatform); ok {
		return x.InitPlatform
	}
	return nil
}

func (m *Event) GetSetBank() *EventSetBank {
	if x, ok := m.GetValue().(*Event_SetBank); ok {
		return x.SetBank
	}
	return nil
}

func (m *Event) GetSetCompany() *EventSetCompany {
	if x, ok := m.GetValue().(*Event_SetCompany); ok {
		return x.SetCompany
	}
	return nil
}

func (m *Event) GetAddCompany() *EventAddCompany {
	if x, ok := m.GetValue().(*Event_AddCompany); ok {
		return x.AddCompany
	}
	return nil
}

func (m *Event) GetAddCaseConf() *EventAddCaseConf {
	if x, ok := m.GetValue().(*Event_AddCaseConf); ok {
		return x.AddCaseConf
	}
	return nil
}

func (m *Event) GetEditCaseConf() *EventEditCaseConf {
	if x, ok := m.GetValue().(*Event_EditCaseConf); ok {
		return x.EditCaseConf
	}
	return nil
}

func (m *Event) GetDelCaseConf() *EventDelCaseConf {
	if x, ok := m.GetValue().(*Event_DelCaseConf); ok {
		return x.DelCaseConf
	}
	return nil
}

func (m *Event) GetImportCase() *EventImportCase {
	if x, ok := m.GetValue().(*Event_ImportCase); ok {
		return x.ImportCase
	}
	return nil
}

func (m *Event) GetImportCaseList() *EventImportCaseList {
	if x, ok := m.GetValue().(*Event_ImportCaseList); ok {
		return x.ImportCaseList
	}
	return nil
}

func (m *Event) GetApplyCaseConf() *EventApplyCaseConf {
	if x, ok := m.GetValue().(*Event_ApplyCaseConf); ok {
		return x.ApplyCaseConf
	}
	return nil
}

func (m *Event) GetAddCompanyConf() *EventAddCompanyConf {
	if x, ok := m.GetValue().(*Event_AddCompanyConf); ok {
		return x.AddCompanyConf
	}
	return nil
}

func (m *Event) GetEditCompanyConf() *EventEditCompanyConf {
	if x, ok := m.GetValue().(*Event_EditCompanyConf); ok {
		return x.EditCompanyConf
	}
	return nil
}

func (m *Event) GetDelCompanyConf() *EventDelCompanyConf {
	if x, ok := m.GetValue().(*Event_DelCompanyConf); ok {
		return x.DelCompanyConf
	}
	return nil
}

func (m *Event) GetDelayCaseList() *EventDelayCaseList {
	if x, ok := m.GetValue().(*Event_DelayCaseList); ok {
		return x.DelayCaseList
	}
	return nil
}

func (m *Event) GetCancelCaseList() *EventCancelCaseList {
	if x, ok := m.GetValue().(*Event_CancelCaseList); ok {
		return x.CancelCaseList
	}
	return nil
}

func (m *Event) GetCollectCaseList() *EventCollectCaseList {
	if x, ok := m.GetValue().(*Event_CollectCaseList); ok {
		return x.CollectCaseList
	}
	return nil
}

func (m *Event) GetFinishCaseList() *EventFinishCaseList {
	if x, ok := m.GetValue().(*Event_FinishCaseList); ok {
		return x.FinishCaseList
	}
	return nil
}

func (m *Event) GetSwitchCase() *EventSwitchCase {
	if x, ok := m.GetValue().(*Event_SwitchCase); ok {
		return x.SwitchCase
	}
	return nil
}

func (m *Event) GetUpdateWeight() *EventUpdateWeight {
	if x, ok := m.GetValue().(*Event_UpdateWeight); ok {
		return x.UpdateWeight
	}
	return nil
}

func (m *Event) GetDeliverCaseList() *EventDeliverCaseList {
	if x, ok := m.GetValue().(*Event_DeliverCaseList); ok {
		return x.DeliverCaseList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_InitPlatform)(nil),
		(*Event_SetBank)(nil),
		(*Event_SetCompany)(nil),
		(*Event_AddCompany)(nil),
		(*Event_AddCaseConf)(nil),
		(*Event_EditCaseConf)(nil),
		(*Event_DelCaseConf)(nil),
		(*Event_ImportCase)(nil),
		(*Event_ImportCaseList)(nil),
		(*Event_ApplyCaseConf)(nil),
		(*Event_AddCompanyConf)(nil),
		(*Event_EditCompanyConf)(nil),
		(*Event_DelCompanyConf)(nil),
		(*Event_DelayCaseList)(nil),
		(*Event_CancelCaseList)(nil),
		(*Event_CollectCaseList)(nil),
		(*Event_FinishCaseList)(nil),
		(*Event_SwitchCase)(nil),
		(*Event_UpdateWeight)(nil),
		(*Event_DeliverCaseList)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// value
	switch x := m.Value.(type) {
	case *Event_InitPlatform:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InitPlatform); err != nil {
			return err
		}
	case *Event_SetBank:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetBank); err != nil {
			return err
		}
	case *Event_SetCompany:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCompany); err != nil {
			return err
		}
	case *Event_AddCompany:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCompany); err != nil {
			return err
		}
	case *Event_AddCaseConf:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCaseConf); err != nil {
			return err
		}
	case *Event_EditCaseConf:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EditCaseConf); err != nil {
			return err
		}
	case *Event_DelCaseConf:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelCaseConf); err != nil {
			return err
		}
	case *Event_ImportCase:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImportCase); err != nil {
			return err
		}
	case *Event_ImportCaseList:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImportCaseList); err != nil {
			return err
		}
	case *Event_ApplyCaseConf:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplyCaseConf); err != nil {
			return err
		}
	case *Event_AddCompanyConf:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddCompanyConf); err != nil {
			return err
		}
	case *Event_EditCompanyConf:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EditCompanyConf); err != nil {
			return err
		}
	case *Event_DelCompanyConf:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelCompanyConf); err != nil {
			return err
		}
	case *Event_DelayCaseList:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelayCaseList); err != nil {
			return err
		}
	case *Event_CancelCaseList:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CancelCaseList); err != nil {
			return err
		}
	case *Event_CollectCaseList:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CollectCaseList); err != nil {
			return err
		}
	case *Event_FinishCaseList:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FinishCaseList); err != nil {
			return err
		}
	case *Event_SwitchCase:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SwitchCase); err != nil {
			return err
		}
	case *Event_UpdateWeight:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateWeight); err != nil {
			return err
		}
	case *Event_DeliverCaseList:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeliverCaseList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Value has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // value.initPlatform
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventInitPlatform)
		err := b.DecodeMessage(msg)
		m.Value = &Event_InitPlatform{msg}
		return true, err
	case 2: // value.setBank
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventSetBank)
		err := b.DecodeMessage(msg)
		m.Value = &Event_SetBank{msg}
		return true, err
	case 3: // value.setCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventSetCompany)
		err := b.DecodeMessage(msg)
		m.Value = &Event_SetCompany{msg}
		return true, err
	case 4: // value.addCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventAddCompany)
		err := b.DecodeMessage(msg)
		m.Value = &Event_AddCompany{msg}
		return true, err
	case 5: // value.addCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventAddCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_AddCaseConf{msg}
		return true, err
	case 6: // value.editCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventEditCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_EditCaseConf{msg}
		return true, err
	case 7: // value.delCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventDelCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_DelCaseConf{msg}
		return true, err
	case 8: // value.importCase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventImportCase)
		err := b.DecodeMessage(msg)
		m.Value = &Event_ImportCase{msg}
		return true, err
	case 9: // value.importCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventImportCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_ImportCaseList{msg}
		return true, err
	case 10: // value.applyCaseConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventApplyCaseConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_ApplyCaseConf{msg}
		return true, err
	case 11: // value.addCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventAddCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_AddCompanyConf{msg}
		return true, err
	case 12: // value.editCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventEditCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_EditCompanyConf{msg}
		return true, err
	case 13: // value.delCompanyConf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventDelCompanyConf)
		err := b.DecodeMessage(msg)
		m.Value = &Event_DelCompanyConf{msg}
		return true, err
	case 14: // value.delayCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventDelayCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_DelayCaseList{msg}
		return true, err
	case 15: // value.cancelCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventCancelCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_CancelCaseList{msg}
		return true, err
	case 16: // value.collectCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventCollectCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_CollectCaseList{msg}
		return true, err
	case 17: // value.finishCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventFinishCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_FinishCaseList{msg}
		return true, err
	case 18: // value.switchCase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventSwitchCase)
		err := b.DecodeMessage(msg)
		m.Value = &Event_SwitchCase{msg}
		return true, err
	case 19: // value.updateWeight
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventUpdateWeight)
		err := b.DecodeMessage(msg)
		m.Value = &Event_UpdateWeight{msg}
		return true, err
	case 20: // value.deliverCaseList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventDeliverCaseList)
		err := b.DecodeMessage(msg)
		m.Value = &Event_DeliverCaseList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// value
	switch x := m.Value.(type) {
	case *Event_InitPlatform:
		s := proto.Size(x.InitPlatform)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_SetBank:
		s := proto.Size(x.SetBank)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_SetCompany:
		s := proto.Size(x.SetCompany)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AddCompany:
		s := proto.Size(x.AddCompany)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AddCaseConf:
		s := proto.Size(x.AddCaseConf)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_EditCaseConf:
		s := proto.Size(x.EditCaseConf)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_DelCaseConf:
		s := proto.Size(x.DelCaseConf)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ImportCase:
		s := proto.Size(x.ImportCase)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ImportCaseList:
		s := proto.Size(x.ImportCaseList)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ApplyCaseConf:
		s := proto.Size(x.ApplyCaseConf)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AddCompanyConf:
		s := proto.Size(x.AddCompanyConf)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_EditCompanyConf:
		s := proto.Size(x.EditCompanyConf)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_DelCompanyConf:
		s := proto.Size(x.DelCompanyConf)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_DelayCaseList:
		s := proto.Size(x.DelayCaseList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CancelCaseList:
		s := proto.Size(x.CancelCaseList)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CollectCaseList:
		s := proto.Size(x.CollectCaseList)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_FinishCaseList:
		s := proto.Size(x.FinishCaseList)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_SwitchCase:
		s := proto.Size(x.SwitchCase)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_UpdateWeight:
		s := proto.Size(x.UpdateWeight)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_DeliverCaseList:
		s := proto.Size(x.DeliverCaseList)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventInitPlatform struct {
	PlatformKey []byte `protobuf:"bytes,1,opt,name=platformKey,proto3" json:"platformKey,omitempty"`
}

func (m *EventInitPlatform) Reset()                    { *m = EventInitPlatform{} }
func (m *EventInitPlatform) String() string            { return proto.CompactTextString(m) }
func (*EventInitPlatform) ProtoMessage()               {}
func (*EventInitPlatform) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{62} }

func (m *EventInitPlatform) GetPlatformKey() []byte {
	if m != nil {
		return m.PlatformKey
	}
	return nil
}

type EventSetBank struct {
	BankId string `protobuf:"bytes,1,opt,name=bankId,proto3" json:"bankId,omitempty"`
}

func (m *EventSetBank) Reset()                    { *m = EventSetBank{} }
func (m *EventSetBank) String() string            { return proto.CompactTextString(m) }
func (*EventSetBank) ProtoMessage()               {}
func (*EventSetBank) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{63} }

func (m *EventSetBank) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

type EventSetCompany struct {
	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (m *EventSetCompany) Reset()                    { *m = EventSetCompany{} }
func (m *EventSetCompany) String() string            { return proto.CompactTextString(m) }
func (*EventSetCompany) ProtoMessage()               {}
func (*EventSetCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{64} }

func (m *EventSetCompany) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

type EventAddCompany struct {
	CompanyId string `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (m *EventAddCompany) Reset()                    { *m = EventAddCompany{} }
func (m *EventAddCompany) String() string            { return proto.CompactTextString(m) }
func (*EventAddCompany) ProtoMessage()               {}
func (*EventAddCompany) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{65} }

func (m *EventAddCompany) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

type EventAddCaseConf struct {
	CaseConfId string `protobuf:"bytes,1,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
}

func (m *EventAddCaseConf) Reset()                    { *m = EventAddCaseConf{} }
func (m *EventAddCaseConf) String() string            { return proto.CompactTextString(m) }
func (*EventAddCaseConf) ProtoMessage()               {}
func (*EventAddCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{66} }

func (m *EventAddCaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

type EventEditCaseConf struct {
	CaseConfId string `protobuf:"bytes,1,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
}

func (m *EventEditCaseConf) Reset()                    { *m = EventEditCaseConf{} }
func (m *EventEditCaseConf) String() string            { return proto.CompactTextString(m) }
func (*EventEditCaseConf) ProtoMessage()               {}
func (*EventEditCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{67} }

func (m *EventEditCaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

type EventDelCaseConf struct {
	CaseConfId string `protobuf:"bytes,1,opt,name=caseConfId,proto3" json:"caseConfId,omitempty"`
}

func (m *EventDelCaseConf) Reset()                    { *m = EventDelCaseConf{} }
func (m *EventDelCaseConf) String() string            { return proto.CompactTextString(m) }
func (*EventDelCaseConf) ProtoMessage()               {}
func (*EventDelCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{68} }

func (m *EventDelCaseConf) GetCaseConfId() string {
	if m != nil {
		return m.CaseConfId
	}
	return ""
}

type EventImportCase struct {
	CaseId string         `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	Result *DeliverResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *EventImportCase) Reset()                    { *m = EventImportCase{} }
func (m *EventImportCase) String() string            { return proto.CompactTextString(m) }
func (*EventImportCase) ProtoMessage()               {}
func (*EventImportCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{69} }

func (m *EventImportCase) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *EventImportCase) GetResult() *DeliverResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type EventImportCaseList struct {
	CaseList []*Case        `protobuf:"bytes,1,rep,name=caseList" json:"caseList,omitempty"`
	Result   *DeliverResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *EventImportCaseList) Reset()                    { *m = EventImportCaseList{} }
func (m *EventImportCaseList) String() string            { return proto.CompactTextString(m) }
func (*EventImportCaseList) ProtoMessage()               {}
func (*EventImportCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{70} }

func (m *EventImportCaseList) GetCaseList() []*Case {
	if m != nil {
		return m.CaseList
	}
	return nil
}

func (m *EventImportCaseList) GetResult() *DeliverResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type EventApplyCaseConf struct {
	CaseConfIds []string `protobuf:"bytes,1,rep,name=caseConfIds" json:"caseConfIds,omitempty"`
}

func (m *EventApplyCaseConf) Reset()                    { *m = EventApplyCaseConf{} }
func (m *EventApplyCaseConf) String() string            { return proto.CompactTextString(m) }
func (*EventApplyCaseConf) ProtoMessage()               {}
func (*EventApplyCaseConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{71} }

func (m *EventApplyCaseConf) GetCaseConfIds() []string {
	if m != nil {
		return m.CaseConfIds
	}
	return nil
}

type EventAddCompanyConf struct {
	CompanyConfId string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
}

func (m *EventAddCompanyConf) Reset()                    { *m = EventAddCompanyConf{} }
func (m *EventAddCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*EventAddCompanyConf) ProtoMessage()               {}
func (*EventAddCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{72} }

func (m *EventAddCompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

type EventEditCompanyConf struct {
	CompanyConfId string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
}

func (m *EventEditCompanyConf) Reset()                    { *m = EventEditCompanyConf{} }
func (m *EventEditCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*EventEditCompanyConf) ProtoMessage()               {}
func (*EventEditCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{73} }

func (m *EventEditCompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

type EventDelCompanyConf struct {
	CompanyConfId string `protobuf:"bytes,1,opt,name=companyConfId,proto3" json:"companyConfId,omitempty"`
}

func (m *EventDelCompanyConf) Reset()                    { *m = EventDelCompanyConf{} }
func (m *EventDelCompanyConf) String() string            { return proto.CompactTextString(m) }
func (*EventDelCompanyConf) ProtoMessage()               {}
func (*EventDelCompanyConf) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{74} }

func (m *EventDelCompanyConf) GetCompanyConfId() string {
	if m != nil {
		return m.CompanyConfId
	}
	return ""
}

type EventDelayCaseList struct {
	CaseList []*CaseDelay `protobuf:"bytes,1,rep,name=caseList" json:"caseList,omitempty"`
}

func (m *EventDelayCaseList) Reset()                    { *m = EventDelayCaseList{} }
func (m *EventDelayCaseList) String() string            { return proto.CompactTextString(m) }
func (*EventDelayCaseList) ProtoMessage()               {}
func (*EventDelayCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{75} }

func (m *EventDelayCaseList) GetCaseList() []*CaseDelay {
	if m != nil {
		return m.CaseList
	}
	return nil
}

type EventCancelCaseList struct {
	CaseList []string `protobuf:"bytes,1,rep,name=caseList" json:"caseList,omitempty"`
}

func (m *EventCancelCaseList) Reset()                    { *m = EventCancelCaseList{} }
func (m *EventCancelCaseList) String() string            { return proto.CompactTextString(m) }
func (*EventCancelCaseList) ProtoMessage()               {}
func (*EventCancelCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{76} }

func (m *EventCancelCaseList) GetCaseList() []string {
	if m != nil {
		return m.CaseList
	}
	return nil
}

type EventCollectCaseList struct {
	CaseList []string `protobuf:"bytes,1,rep,name=caseList" json:"caseList,omitempty"`
}

func (m *EventCollectCaseList) Reset()                    { *m = EventCollectCaseList{} }
func (m *EventCollectCaseList) String() string            { return proto.CompactTextString(m) }
func (*EventCollectCaseList) ProtoMessage()               {}
func (*EventCollectCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{77} }

func (m *EventCollectCaseList) GetCaseList() []string {
	if m != nil {
		return m.CaseList
	}
	return nil
}

type EventFinishCaseList struct {
	CaseList []string       `protobuf:"bytes,1,rep,name=caseList" json:"caseList,omitempty"`
	Result   *DeliverResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *EventFinishCaseList) Reset()                    { *m = EventFinishCaseList{} }
func (m *EventFinishCaseList) String() string            { return proto.CompactTextString(m) }
func (*EventFinishCaseList) ProtoMessage()               {}
func (*EventFinishCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{78} }

func (m *EventFinishCaseList) GetCaseList() []string {
	if m != nil {
		return m.CaseList
	}
	return nil
}

func (m *EventFinishCaseList) GetResult() *DeliverResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type EventSwitchCase struct {
	CaseId    string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (m *EventSwitchCase) Reset()                    { *m = EventSwitchCase{} }
func (m *EventSwitchCase) String() string            { return proto.CompactTextString(m) }
func (*EventSwitchCase) ProtoMessage()               {}
func (*EventSwitchCase) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{79} }

func (m *EventSwitchCase) GetCaseId() string {
	if m != nil {
		return m.CaseId
	}
	return ""
}

func (m *EventSwitchCase) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

type EventUpdateWeight struct {
}

func (m *EventUpdateWeight) Reset()                    { *m = EventUpdateWeight{} }
func (m *EventUpdateWeight) String() string            { return proto.CompactTextString(m) }
func (*EventUpdateWeight) ProtoMessage()               {}
func (*EventUpdateWeight) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{80} }

type EventDeliverCaseList struct {
	CaseIds []string `protobuf:"bytes,1,rep,name=caseIds" json:"caseIds,omitempty"`
}

func (m *EventDeliverCaseList) Reset()                    { *m = EventDeliverCaseList{} }
func (m *EventDeliverCaseList) String() string            { return proto.CompactTextString(m) }
func (*EventDeliverCaseList) ProtoMessage()               {}
func (*EventDeliverCaseList) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{81} }

func (m *EventDeliverCaseList) GetCaseIds() []string {
	if m != nil {
		return m.CaseIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "gfcollection.Request")
	proto.RegisterType((*RequestInitPlatform)(nil), "gfcollection.RequestInitPlatform")
	proto.RegisterType((*RequestSetBank)(nil), "gfcollection.RequestSetBank")
	proto.RegisterType((*RequestSetCompany)(nil), "gfcollection.RequestSetCompany")
	proto.RegisterType((*RequestAddCompany)(nil), "gfcollection.RequestAddCompany")
	proto.RegisterType((*RequestAddCaseConf)(nil), "gfcollection.RequestAddCaseConf")
	proto.RegisterType((*RequestEditCaseConf)(nil), "gfcollection.RequestEditCaseConf")
	proto.RegisterType((*RequestDelCaseConf)(nil), "gfcollection.RequestDelCaseConf")
	proto.RegisterType((*RequestImportCase)(nil), "gfcollection.RequestImportCase")
	proto.RegisterType((*RequestImportCaseList)(nil), "gfcollection.RequestImportCaseList")
	proto.RegisterType((*RequestApplyCaseConf)(nil), "gfcollection.RequestApplyCaseConf")
	proto.RegisterType((*RequestAddCompanyConf)(nil), "gfcollection.RequestAddCompanyConf")
	proto.RegisterType((*RequestEditCompanyConf)(nil), "gfcollection.RequestEditCompanyConf")
	proto.RegisterType((*RequestDelCompanyConf)(nil), "gfcollection.RequestDelCompanyConf")
	proto.RegisterType((*RequestDelayCaseList)(nil), "gfcollection.RequestDelayCaseList")
	proto.RegisterType((*RequestCancelCaseList)(nil), "gfcollection.RequestCancelCaseList")
	proto.RegisterType((*RequestCollectCaseList)(nil), "gfcollection.RequestCollectCaseList")
	proto.RegisterType((*RequestFinishCaseList)(nil), "gfcollection.RequestFinishCaseList")
	proto.RegisterType((*RequestSwitchCase)(nil), "gfcollection.RequestSwitchCase")
	proto.RegisterType((*RequestUpdateWeight)(nil), "gfcollection.RequestUpdateWeight")
	proto.RegisterType((*RequestDeliverCaseList)(nil), "gfcollection.RequestDeliverCaseList")
	proto.RegisterType((*Response)(nil), "gfcollection.Response")
	proto.RegisterType((*ResponseException)(nil), "gfcollection.ResponseException")
	proto.RegisterType((*ResponseOK)(nil), "gfcollection.ResponseOK")
	proto.RegisterType((*Receipt)(nil), "gfcollection.Receipt")
	proto.RegisterType((*ResponseInitPlatform)(nil), "gfcollection.ResponseInitPlatform")
	proto.RegisterType((*ResponseSetBank)(nil), "gfcollection.ResponseSetBank")
	proto.RegisterType((*ResponseSetCompany)(nil), "gfcollection.ResponseSetCompany")
	proto.RegisterType((*ResponseAddCompany)(nil), "gfcollection.ResponseAddCompany")
	proto.RegisterType((*ResponseAddCaseConf)(nil), "gfcollection.ResponseAddCaseConf")
	proto.RegisterType((*ResponseEditCaseConf)(nil), "gfcollection.ResponseEditCaseConf")
	proto.RegisterType((*ResponseDelCaseConf)(nil), "gfcollection.ResponseDelCaseConf")
	proto.RegisterType((*ResponseImportCase)(nil), "gfcollection.ResponseImportCase")
	proto.RegisterType((*ResponseImportCaseList)(nil), "gfcollection.ResponseImportCaseList")
	proto.RegisterType((*ResponseApplyCaseConf)(nil), "gfcollection.ResponseApplyCaseConf")
	proto.RegisterType((*ResponseAddCompanyConf)(nil), "gfcollection.ResponseAddCompanyConf")
	proto.RegisterType((*ResponseEditCompanyConf)(nil), "gfcollection.ResponseEditCompanyConf")
	proto.RegisterType((*ResponseDelCompanyConf)(nil), "gfcollection.ResponseDelCompanyConf")
	proto.RegisterType((*ResponseDelayCaseList)(nil), "gfcollection.ResponseDelayCaseList")
	proto.RegisterType((*ResponseCancelCaseList)(nil), "gfcollection.ResponseCancelCaseList")
	proto.RegisterType((*ResponseCollectCaseList)(nil), "gfcollection.ResponseCollectCaseList")
	proto.RegisterType((*ResponseFinishCaseList)(nil), "gfcollection.ResponseFinishCaseList")
	proto.RegisterType((*ResponseSwitchCase)(nil), "gfcollection.ResponseSwitchCase")
	proto.RegisterType((*ResponseUpdateWeight)(nil), "gfcollection.ResponseUpdateWeight")
	proto.RegisterType((*ResponseDeliverCaseList)(nil), "gfcollection.ResponseDeliverCaseList")
	proto.RegisterType((*Bank)(nil), "gfcollection.Bank")
	proto.RegisterType((*Banks)(nil), "gfcollection.Banks")
	proto.RegisterType((*DeliverResult)(nil), "gfcollection.DeliverResult")
	proto.RegisterType((*CompanyWeight)(nil), "gfcollection.CompanyWeight")
	proto.RegisterType((*SwitchCase)(nil), "gfcollection.SwitchCase")
	proto.RegisterType((*DeliverCompany)(nil), "gfcollection.DeliverCompany")
	proto.RegisterType((*Company)(nil), "gfcollection.Company")
	proto.RegisterType((*CompanyConf)(nil), "gfcollection.CompanyConf")
	proto.RegisterType((*CaseConf)(nil), "gfcollection.CaseConf")
	proto.RegisterType((*Case)(nil), "gfcollection.Case")
	proto.RegisterType((*AreaList)(nil), "gfcollection.AreaList")
	proto.RegisterType((*AreaCompany)(nil), "gfcollection.AreaCompany")
	proto.RegisterType((*WeightCompany)(nil), "gfcollection.WeightCompany")
	proto.RegisterType((*AreaCasePool)(nil), "gfcollection.AreaCasePool")
	proto.RegisterType((*Platform)(nil), "gfcollection.Platform")
	proto.RegisterType((*CaseDelay)(nil), "gfcollection.CaseDelay")
	proto.RegisterType((*Event)(nil), "gfcollection.Event")
	proto.RegisterType((*EventInitPlatform)(nil), "gfcollection.EventInitPlatform")
	proto.RegisterType((*EventSetBank)(nil), "gfcollection.EventSetBank")
	proto.RegisterType((*EventSetCompany)(nil), "gfcollection.EventSetCompany")
	proto.RegisterType((*EventAddCompany)(nil), "gfcollection.EventAddCompany")
	proto.RegisterType((*EventAddCaseConf)(nil), "gfcollection.EventAddCaseConf")
	proto.RegisterType((*EventEditCaseConf)(nil), "gfcollection.EventEditCaseConf")
	proto.RegisterType((*EventDelCaseConf)(nil), "gfcollection.EventDelCaseConf")
	proto.RegisterType((*EventImportCase)(nil), "gfcollection.EventImportCase")
	proto.RegisterType((*EventImportCaseList)(nil), "gfcollection.EventImportCaseList")
	proto.RegisterType((*EventApplyCaseConf)(nil), "gfcollection.EventApplyCaseConf")
	proto.RegisterType((*EventAddCompanyConf)(nil), "gfcollection.EventAddCompanyConf")
	proto.RegisterType((*EventEditCompanyConf)(nil), "gfcollection.EventEditCompanyConf")
	proto.RegisterType((*EventDelCompanyConf)(nil), "gfcollection.EventDelCompanyConf")
	proto.RegisterType((*EventDelayCaseList)(nil), "gfcollection.EventDelayCaseList")
	proto.RegisterType((*EventCancelCaseList)(nil), "gfcollection.EventCancelCaseList")
	proto.RegisterType((*EventCollectCaseList)(nil), "gfcollection.EventCollectCaseList")
	proto.RegisterType((*EventFinishCaseList)(nil), "gfcollection.EventFinishCaseList")
	proto.RegisterType((*EventSwitchCase)(nil), "gfcollection.EventSwitchCase")
	proto.RegisterType((*EventUpdateWeight)(nil), "gfcollection.EventUpdateWeight")
	proto.RegisterType((*EventDeliverCaseList)(nil), "gfcollection.EventDeliverCaseList")
	proto.RegisterEnum("gfcollection.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("gfcollection.CaseState", CaseState_name, CaseState_value)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.Op != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Op))
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if m.InstructionId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.ActionId != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ActionId))
	}
	return i, nil
}

func (m *Request_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n2, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Request_SetBank) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetBank != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SetBank.Size()))
		n3, err := m.SetBank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Request_SetCompany) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetCompany != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SetCompany.Size()))
		n4, err := m.SetCompany.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Request_AddCompany) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCompany != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCompany.Size()))
		n5, err := m.AddCompany.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Request_AddCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCaseConf != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCaseConf.Size()))
		n6, err := m.AddCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Request_EditCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EditCaseConf != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EditCaseConf.Size()))
		n7, err := m.EditCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Request_DelCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelCaseConf != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelCaseConf.Size()))
		n8, err := m.DelCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Request_ImportCase) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ImportCase != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ImportCase.Size()))
		n9, err := m.ImportCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Request_ImportCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ImportCaseList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ImportCaseList.Size()))
		n10, err := m.ImportCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Request_ApplyCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyCaseConf != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyCaseConf.Size()))
		n11, err := m.ApplyCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Request_AddCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCompanyConf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCompanyConf.Size()))
		n12, err := m.AddCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Request_EditCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EditCompanyConf != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EditCompanyConf.Size()))
		n13, err := m.EditCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Request_DelCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelCompanyConf != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelCompanyConf.Size()))
		n14, err := m.DelCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Request_DelayCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelayCaseList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelayCaseList.Size()))
		n15, err := m.DelayCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Request_CancelCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CancelCaseList != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CancelCaseList.Size()))
		n16, err := m.CancelCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Request_CollectCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CollectCaseList != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CollectCaseList.Size()))
		n17, err := m.CollectCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Request_FinishCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FinishCaseList != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.FinishCaseList.Size()))
		n18, err := m.FinishCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Request_SwitchCase) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SwitchCase != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SwitchCase.Size()))
		n19, err := m.SwitchCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Request_UpdateWeight) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateWeight != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpdateWeight.Size()))
		n20, err := m.UpdateWeight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Request_DeliverCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeliverCaseList != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DeliverCaseList.Size()))
		n21, err := m.DeliverCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *RequestInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlatformKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlatformKey)))
		i += copy(dAtA[i:], m.PlatformKey)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *RequestSetBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetBank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.BankId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.BankName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankName)))
		i += copy(dAtA[i:], m.BankName)
	}
	return i, nil
}

func (m *RequestSetCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyPubkey)))
		i += copy(dAtA[i:], m.CompanyPubkey)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	if len(m.CompanyName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName)))
		i += copy(dAtA[i:], m.CompanyName)
	}
	return i, nil
}

func (m *RequestAddCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyPubkey)))
		i += copy(dAtA[i:], m.CompanyPubkey)
	}
	if len(m.CompanyArea) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyArea)))
		i += copy(dAtA[i:], m.CompanyArea)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	if len(m.CompanyName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName)))
		i += copy(dAtA[i:], m.CompanyName)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	return i, nil
}

func (m *RequestAddCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	if m.CaseMinAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseMinAmount))
	}
	if m.CaseMaxAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseMaxAmount))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.ExpireDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireDays))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *RequestEditCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	if m.CaseMinAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseMinAmount))
	}
	if m.CaseMaxAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseMaxAmount))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.ExpireDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireDays))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *RequestDelCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDelCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	return i, nil
}

func (m *RequestImportCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestImportCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if len(m.CaseOwner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseOwner)))
		i += copy(dAtA[i:], m.CaseOwner)
	}
	if len(m.CaseIdCard) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseIdCard)))
		i += copy(dAtA[i:], m.CaseIdCard)
	}
	if len(m.Contract) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Contract)))
		i += copy(dAtA[i:], m.Contract)
	}
	if len(m.BankCard) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankCard)))
		i += copy(dAtA[i:], m.BankCard)
	}
	if m.DebtAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DebtAmount))
	}
	if m.OriginalAmount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginalAmount))
	}
	if m.Fees != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fees))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if len(m.CaseArea) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseArea)))
		i += copy(dAtA[i:], m.CaseArea)
	}
	return i, nil
}

func (m *RequestImportCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestImportCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, msg := range m.CaseList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestApplyCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestApplyCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsApply {
		dAtA[i] = 0x10
		i++
		if m.IsApply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestAddCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	if len(m.CompanyConfName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfName)))
		i += copy(dAtA[i:], m.CompanyConfName)
	}
	if m.MinAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MinAmount))
	}
	if m.MaxAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxAmount))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.MaxReceive != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxReceive))
	}
	if m.IsAutoAdd {
		dAtA[i] = 0x38
		i++
		if m.IsAutoAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *RequestEditCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	if len(m.CompanyConfName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfName)))
		i += copy(dAtA[i:], m.CompanyConfName)
	}
	if m.MinAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MinAmount))
	}
	if m.MaxAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxAmount))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.MaxReceive != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxReceive))
	}
	if m.IsAutoAdd {
		dAtA[i] = 0x38
		i++
		if m.IsAutoAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *RequestDelCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDelCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	return i, nil
}

func (m *RequestDelayCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDelayCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseDelay) > 0 {
		for _, msg := range m.CaseDelay {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestCancelCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		for _, s := range m.CaseId {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestCollectCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCollectCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		for _, s := range m.CaseId {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestFinishCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFinishCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		for _, s := range m.CaseId {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestSwitchCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSwitchCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	return i, nil
}

func (m *RequestUpdateWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUpdateWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WeightList) > 0 {
		for _, msg := range m.WeightList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestDeliverCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeliverCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn22, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	return i, nil
}

func (m *Response_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n23, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Response_SetBank) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetBank != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SetBank.Size()))
		n24, err := m.SetBank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Response_SetCompany) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetCompany != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SetCompany.Size()))
		n25, err := m.SetCompany.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Response_AddCompany) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCompany != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCompany.Size()))
		n26, err := m.AddCompany.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Response_AddCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCaseConf != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCaseConf.Size()))
		n27, err := m.AddCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *Response_EditCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EditCaseConf != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EditCaseConf.Size()))
		n28, err := m.EditCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Response_DelCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelCaseConf != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelCaseConf.Size()))
		n29, err := m.DelCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Response_ImportCase) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ImportCase != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ImportCase.Size()))
		n30, err := m.ImportCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Response_ImportCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ImportCaseList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ImportCaseList.Size()))
		n31, err := m.ImportCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *Response_ApplyCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyCaseConf != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyCaseConf.Size()))
		n32, err := m.ApplyCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *Response_AddCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCompanyConf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCompanyConf.Size()))
		n33, err := m.AddCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Response_EditCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EditCompanyConf != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EditCompanyConf.Size()))
		n34, err := m.EditCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *Response_DelCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelCompanyConf != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelCompanyConf.Size()))
		n35, err := m.DelCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *Response_DelayCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelayCaseList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelayCaseList.Size()))
		n36, err := m.DelayCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *Response_CancelCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CancelCaseList != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CancelCaseList.Size()))
		n37, err := m.CancelCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *Response_CollectCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CollectCaseList != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CollectCaseList.Size()))
		n38, err := m.CollectCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *Response_FinishCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FinishCaseList != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.FinishCaseList.Size()))
		n39, err := m.FinishCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *Response_SwitchCase) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SwitchCase != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SwitchCase.Size()))
		n40, err := m.SwitchCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *Response_UpdateWeight) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateWeight != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpdateWeight.Size()))
		n41, err := m.UpdateWeight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *Response_DeliverCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeliverCaseList != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DeliverCaseList.Size()))
		n42, err := m.DeliverCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *Response_Ok) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ok != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ok.Size()))
		n43, err := m.Ok.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *Response_Exception) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Exception != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Exception.Size()))
		n44, err := m.Exception.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *ResponseException) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseException) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ResponseOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseOK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOk {
		dAtA[i] = 0x8
		i++
		if m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func (m *ResponseInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n45, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *ResponseSetBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSetBank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n46, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *ResponseSetCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSetCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n47, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *ResponseAddCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAddCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n48, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}

func (m *ResponseAddCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAddCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n49, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}

func (m *ResponseEditCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEditCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n50, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *ResponseDelCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDelCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n51, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *ResponseImportCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseImportCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n52, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *ResponseImportCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseImportCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n53, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}

func (m *ResponseApplyCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseApplyCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n54, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *ResponseAddCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAddCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n55, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}

func (m *ResponseEditCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEditCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n56, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}

func (m *ResponseDelCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDelCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n57, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}

func (m *ResponseDelayCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDelayCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n58, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}

func (m *ResponseCancelCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCancelCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n59, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}

func (m *ResponseCollectCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCollectCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n60, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}

func (m *ResponseFinishCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFinishCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n61, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}

func (m *ResponseSwitchCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSwitchCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n62, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}

func (m *ResponseUpdateWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUpdateWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n63, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}

func (m *ResponseDeliverCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDeliverCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstructionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InstructionId))
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Event.Size()))
		n64, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}

func (m *Bank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.BankId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.BankName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankName)))
		i += copy(dAtA[i:], m.BankName)
	}
	if len(m.WaitingList) > 0 {
		for _, msg := range m.WaitingList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CollectingList) > 0 {
		for _, msg := range m.CollectingList {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DelayedList) > 0 {
		for _, msg := range m.DelayedList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CaseConfList) > 0 {
		for _, msg := range m.CaseConfList {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsApplyCompanyConf {
		dAtA[i] = 0x40
		i++
		if m.IsApplyCompanyConf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsCompanyOk {
		dAtA[i] = 0x48
		i++
		if m.IsCompanyOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBankConfOk {
		dAtA[i] = 0x50
		i++
		if m.IsBankConfOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Banks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Banks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Banks) > 0 {
		for _, s := range m.Banks {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DeliverResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliverResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeliverList) > 0 {
		for _, msg := range m.DeliverList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CompanyWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	if len(m.Area) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i += copy(dAtA[i:], m.Area)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	return i, nil
}

func (m *SwitchCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	return i, nil
}

func (m *DeliverCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliverCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	if len(m.Area) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i += copy(dAtA[i:], m.Area)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if len(m.Indexs) > 0 {
		dAtA66 := make([]byte, len(m.Indexs)*10)
		var j65 int
		for _, num1 := range m.Indexs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA66[j65] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j65++
			}
			dAtA66[j65] = uint8(num)
			j65++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(j65))
		i += copy(dAtA[i:], dAtA66[:j65])
	}
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Company) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Company) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyPubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyPubkey)))
		i += copy(dAtA[i:], m.CompanyPubkey)
	}
	if len(m.CompanyArea) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyArea)))
		i += copy(dAtA[i:], m.CompanyArea)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	if len(m.CompanyName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyName)))
		i += copy(dAtA[i:], m.CompanyName)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if len(m.DeliverList) > 0 {
		for _, msg := range m.DeliverList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CollectingList) > 0 {
		for _, msg := range m.CollectingList {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DelayedList) > 0 {
		for _, msg := range m.DelayedList {
			dAtA[i] = 0x42
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CompanyConf != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CompanyConf.Size()))
		n67, err := m.CompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if len(m.UnDeliverList) > 0 {
		for _, msg := range m.UnDeliverList {
			dAtA[i] = 0x52
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	if len(m.CompanyConfName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfName)))
		i += copy(dAtA[i:], m.CompanyConfName)
	}
	if m.MinAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MinAmount))
	}
	if m.MaxAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxAmount))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.MaxReceive != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxReceive))
	}
	if m.IsAutoAdd {
		dAtA[i] = 0x38
		i++
		if m.IsAutoAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *CaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BankId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	if m.CaseMinAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseMinAmount))
	}
	if m.CaseMaxAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseMaxAmount))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.ExpireDays != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireDays))
	}
	if m.IsApply {
		dAtA[i] = 0x38
		i++
		if m.IsApply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Rate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rate))
	}
	return i, nil
}

func (m *Case) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Case) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if len(m.CaseOwner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseOwner)))
		i += copy(dAtA[i:], m.CaseOwner)
	}
	if len(m.CaseIdCard) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseIdCard)))
		i += copy(dAtA[i:], m.CaseIdCard)
	}
	if len(m.Contract) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Contract)))
		i += copy(dAtA[i:], m.Contract)
	}
	if len(m.BankCard) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankCard)))
		i += copy(dAtA[i:], m.BankCard)
	}
	if m.DebtAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DebtAmount))
	}
	if m.OriginalAmount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginalAmount))
	}
	if m.Fees != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fees))
	}
	if m.OverdueDays != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueDays))
	}
	if m.DelayDays != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelayDays))
	}
	if len(m.CaseArea) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseArea)))
		i += copy(dAtA[i:], m.CaseArea)
	}
	if m.CaseState != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaseState))
	}
	if len(m.BankId) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	return i, nil
}

func (m *AreaList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AreaList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AreaCompany) > 0 {
		for _, msg := range m.AreaCompany {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AreaCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AreaCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Area) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i += copy(dAtA[i:], m.Area)
	}
	if len(m.Companys) > 0 {
		for _, msg := range m.Companys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WeightCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if m.FirstWeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.FirstWeight))
	}
	return i, nil
}

func (m *AreaCasePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AreaCasePool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BankId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.Area) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i += copy(dAtA[i:], m.Area)
	}
	if len(m.CaseList) > 0 {
		for _, msg := range m.CaseList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.WaitingList) > 0 {
		for _, msg := range m.WaitingList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeliverList) > 0 {
		for _, msg := range m.DeliverList {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CollectingList) > 0 {
		for _, msg := range m.CollectingList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DelayedList) > 0 {
		for _, msg := range m.DelayedList {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Platform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Platform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *CaseDelay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaseDelay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if m.Days != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Days))
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn68, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn68
	}
	return i, nil
}

func (m *Event_InitPlatform) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InitPlatform != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.InitPlatform.Size()))
		n69, err := m.InitPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *Event_SetBank) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetBank != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SetBank.Size()))
		n70, err := m.SetBank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	return i, nil
}
func (m *Event_SetCompany) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetCompany != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SetCompany.Size()))
		n71, err := m.SetCompany.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *Event_AddCompany) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCompany != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCompany.Size()))
		n72, err := m.AddCompany.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *Event_AddCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCaseConf != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCaseConf.Size()))
		n73, err := m.AddCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *Event_EditCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EditCaseConf != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EditCaseConf.Size()))
		n74, err := m.EditCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *Event_DelCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelCaseConf != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelCaseConf.Size()))
		n75, err := m.DelCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *Event_ImportCase) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ImportCase != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ImportCase.Size()))
		n76, err := m.ImportCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *Event_ImportCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ImportCaseList != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ImportCaseList.Size()))
		n77, err := m.ImportCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *Event_ApplyCaseConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApplyCaseConf != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ApplyCaseConf.Size()))
		n78, err := m.ApplyCaseConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *Event_AddCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddCompanyConf != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AddCompanyConf.Size()))
		n79, err := m.AddCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *Event_EditCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EditCompanyConf != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EditCompanyConf.Size()))
		n80, err := m.EditCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *Event_DelCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelCompanyConf != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelCompanyConf.Size()))
		n81, err := m.DelCompanyConf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *Event_DelayCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DelayCaseList != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DelayCaseList.Size()))
		n82, err := m.DelayCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *Event_CancelCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CancelCaseList != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CancelCaseList.Size()))
		n83, err := m.CancelCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *Event_CollectCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CollectCaseList != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CollectCaseList.Size()))
		n84, err := m.CollectCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}
func (m *Event_FinishCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FinishCaseList != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.FinishCaseList.Size()))
		n85, err := m.FinishCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}
func (m *Event_SwitchCase) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SwitchCase != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SwitchCase.Size()))
		n86, err := m.SwitchCase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	return i, nil
}
func (m *Event_UpdateWeight) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateWeight != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpdateWeight.Size()))
		n87, err := m.UpdateWeight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	return i, nil
}
func (m *Event_DeliverCaseList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeliverCaseList != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DeliverCaseList.Size()))
		n88, err := m.DeliverCaseList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}
func (m *EventInitPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInitPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlatformKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlatformKey)))
		i += copy(dAtA[i:], m.PlatformKey)
	}
	return i, nil
}

func (m *EventSetBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetBank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BankId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	return i, nil
}

func (m *EventSetCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	return i, nil
}

func (m *EventAddCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddCompany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	return i, nil
}

func (m *EventAddCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	return i, nil
}

func (m *EventEditCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEditCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	return i, nil
}

func (m *EventDelCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDelCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseConfId)))
		i += copy(dAtA[i:], m.CaseConfId)
	}
	return i, nil
}

func (m *EventImportCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventImportCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result.Size()))
		n89, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func (m *EventImportCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventImportCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, msg := range m.CaseList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result.Size()))
		n90, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	return i, nil
}

func (m *EventApplyCaseConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventApplyCaseConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseConfIds) > 0 {
		for _, s := range m.CaseConfIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EventAddCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	return i, nil
}

func (m *EventEditCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEditCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	return i, nil
}

func (m *EventDelCompanyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDelCompanyConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyConfId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyConfId)))
		i += copy(dAtA[i:], m.CompanyConfId)
	}
	return i, nil
}

func (m *EventDelayCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDelayCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, msg := range m.CaseList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventCancelCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, s := range m.CaseList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EventCollectCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCollectCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, s := range m.CaseList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EventFinishCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFinishCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, s := range m.CaseList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result.Size()))
		n91, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}

func (m *EventSwitchCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwitchCase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaseId)))
		i += copy(dAtA[i:], m.CaseId)
	}
	if len(m.CompanyId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CompanyId)))
		i += copy(dAtA[i:], m.CompanyId)
	}
	return i, nil
}

func (m *EventUpdateWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EventDeliverCaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeliverCaseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.Op != 0 {
		n += 2 + sovApi(uint64(m.Op))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.InstructionId != 0 {
		n += 2 + sovApi(uint64(m.InstructionId))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ActionId != 0 {
		n += 2 + sovApi(uint64(m.ActionId))
	}
	return n
}

func (m *Request_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_SetBank) Size() (n int) {
	var l int
	_ = l
	if m.SetBank != nil {
		l = m.SetBank.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_SetCompany) Size() (n int) {
	var l int
	_ = l
	if m.SetCompany != nil {
		l = m.SetCompany.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_AddCompany) Size() (n int) {
	var l int
	_ = l
	if m.AddCompany != nil {
		l = m.AddCompany.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_AddCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.AddCaseConf != nil {
		l = m.AddCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_EditCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.EditCaseConf != nil {
		l = m.EditCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_DelCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.DelCaseConf != nil {
		l = m.DelCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ImportCase) Size() (n int) {
	var l int
	_ = l
	if m.ImportCase != nil {
		l = m.ImportCase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ImportCaseList) Size() (n int) {
	var l int
	_ = l
	if m.ImportCaseList != nil {
		l = m.ImportCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_ApplyCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.ApplyCaseConf != nil {
		l = m.ApplyCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_AddCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.AddCompanyConf != nil {
		l = m.AddCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_EditCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.EditCompanyConf != nil {
		l = m.EditCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_DelCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.DelCompanyConf != nil {
		l = m.DelCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_DelayCaseList) Size() (n int) {
	var l int
	_ = l
	if m.DelayCaseList != nil {
		l = m.DelayCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_CancelCaseList) Size() (n int) {
	var l int
	_ = l
	if m.CancelCaseList != nil {
		l = m.CancelCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_CollectCaseList) Size() (n int) {
	var l int
	_ = l
	if m.CollectCaseList != nil {
		l = m.CollectCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_FinishCaseList) Size() (n int) {
	var l int
	_ = l
	if m.FinishCaseList != nil {
		l = m.FinishCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_SwitchCase) Size() (n int) {
	var l int
	_ = l
	if m.SwitchCase != nil {
		l = m.SwitchCase.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_UpdateWeight) Size() (n int) {
	var l int
	_ = l
	if m.UpdateWeight != nil {
		l = m.UpdateWeight.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Request_DeliverCaseList) Size() (n int) {
	var l int
	_ = l
	if m.DeliverCaseList != nil {
		l = m.DeliverCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *RequestInitPlatform) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlatformKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestSetBank) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestSetCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestAddCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyArea)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	return n
}

func (m *RequestAddCaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CaseMinAmount != 0 {
		n += 1 + sovApi(uint64(m.CaseMinAmount))
	}
	if m.CaseMaxAmount != 0 {
		n += 1 + sovApi(uint64(m.CaseMaxAmount))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.ExpireDays != 0 {
		n += 1 + sovApi(uint64(m.ExpireDays))
	}
	if m.Rate != 0 {
		n += 1 + sovApi(uint64(m.Rate))
	}
	return n
}

func (m *RequestEditCaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CaseMinAmount != 0 {
		n += 1 + sovApi(uint64(m.CaseMinAmount))
	}
	if m.CaseMaxAmount != 0 {
		n += 1 + sovApi(uint64(m.CaseMaxAmount))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.ExpireDays != 0 {
		n += 1 + sovApi(uint64(m.ExpireDays))
	}
	if m.Rate != 0 {
		n += 1 + sovApi(uint64(m.Rate))
	}
	return n
}

func (m *RequestDelCaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestImportCase) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaseOwner)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaseIdCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DebtAmount != 0 {
		n += 1 + sovApi(uint64(m.DebtAmount))
	}
	if m.OriginalAmount != 0 {
		n += 1 + sovApi(uint64(m.OriginalAmount))
	}
	if m.Fees != 0 {
		n += 1 + sovApi(uint64(m.Fees))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	l = len(m.CaseArea)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestImportCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, e := range m.CaseList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestApplyCaseConf) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.IsApply {
		n += 2
	}
	return n
}

func (m *RequestAddCompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyConfName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MinAmount != 0 {
		n += 1 + sovApi(uint64(m.MinAmount))
	}
	if m.MaxAmount != 0 {
		n += 1 + sovApi(uint64(m.MaxAmount))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.MaxReceive != 0 {
		n += 1 + sovApi(uint64(m.MaxReceive))
	}
	if m.IsAutoAdd {
		n += 2
	}
	if m.Rate != 0 {
		n += 1 + sovApi(uint64(m.Rate))
	}
	return n
}

func (m *RequestEditCompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyConfName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MinAmount != 0 {
		n += 1 + sovApi(uint64(m.MinAmount))
	}
	if m.MaxAmount != 0 {
		n += 1 + sovApi(uint64(m.MaxAmount))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.MaxReceive != 0 {
		n += 1 + sovApi(uint64(m.MaxReceive))
	}
	if m.IsAutoAdd {
		n += 2
	}
	if m.Rate != 0 {
		n += 1 + sovApi(uint64(m.Rate))
	}
	return n
}

func (m *RequestDelCompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestDelayCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseDelay) > 0 {
		for _, e := range m.CaseDelay {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestCancelCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		for _, s := range m.CaseId {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestCollectCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		for _, s := range m.CaseId {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestFinishCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseId) > 0 {
		for _, s := range m.CaseId {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestSwitchCase) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RequestUpdateWeight) Size() (n int) {
	var l int
	_ = l
	if len(m.WeightList) > 0 {
		for _, e := range m.WeightList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RequestDeliverCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Response_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_SetBank) Size() (n int) {
	var l int
	_ = l
	if m.SetBank != nil {
		l = m.SetBank.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_SetCompany) Size() (n int) {
	var l int
	_ = l
	if m.SetCompany != nil {
		l = m.SetCompany.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_AddCompany) Size() (n int) {
	var l int
	_ = l
	if m.AddCompany != nil {
		l = m.AddCompany.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_AddCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.AddCaseConf != nil {
		l = m.AddCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_EditCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.EditCaseConf != nil {
		l = m.EditCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_DelCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.DelCaseConf != nil {
		l = m.DelCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ImportCase) Size() (n int) {
	var l int
	_ = l
	if m.ImportCase != nil {
		l = m.ImportCase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ImportCaseList) Size() (n int) {
	var l int
	_ = l
	if m.ImportCaseList != nil {
		l = m.ImportCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_ApplyCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.ApplyCaseConf != nil {
		l = m.ApplyCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_AddCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.AddCompanyConf != nil {
		l = m.AddCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_EditCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.EditCompanyConf != nil {
		l = m.EditCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_DelCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.DelCompanyConf != nil {
		l = m.DelCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_DelayCaseList) Size() (n int) {
	var l int
	_ = l
	if m.DelayCaseList != nil {
		l = m.DelayCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_CancelCaseList) Size() (n int) {
	var l int
	_ = l
	if m.CancelCaseList != nil {
		l = m.CancelCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_CollectCaseList) Size() (n int) {
	var l int
	_ = l
	if m.CollectCaseList != nil {
		l = m.CollectCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_FinishCaseList) Size() (n int) {
	var l int
	_ = l
	if m.FinishCaseList != nil {
		l = m.FinishCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_SwitchCase) Size() (n int) {
	var l int
	_ = l
	if m.SwitchCase != nil {
		l = m.SwitchCase.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_UpdateWeight) Size() (n int) {
	var l int
	_ = l
	if m.UpdateWeight != nil {
		l = m.UpdateWeight.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_DeliverCaseList) Size() (n int) {
	var l int
	_ = l
	if m.DeliverCaseList != nil {
		l = m.DeliverCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_Ok) Size() (n int) {
	var l int
	_ = l
	if m.Ok != nil {
		l = m.Ok.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Response_Exception) Size() (n int) {
	var l int
	_ = l
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ResponseException) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseOK) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *Receipt) Size() (n int) {
	var l int
	_ = l
	if m.IsOk {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseInitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseSetBank) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseSetCompany) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseAddCompany) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseAddCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseEditCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseDelCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseImportCase) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseImportCaseList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseApplyCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseAddCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseEditCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseDelCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseDelayCaseList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseCancelCaseList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseCollectCaseList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseFinishCaseList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseSwitchCase) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseUpdateWeight) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseDeliverCaseList) Size() (n int) {
	var l int
	_ = l
	if m.InstructionId != 0 {
		n += 1 + sovApi(uint64(m.InstructionId))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Bank) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.WaitingList) > 0 {
		for _, e := range m.WaitingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.CollectingList) > 0 {
		for _, e := range m.CollectingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DelayedList) > 0 {
		for _, e := range m.DelayedList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.CaseConfList) > 0 {
		for _, e := range m.CaseConfList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.IsApplyCompanyConf {
		n += 2
	}
	if m.IsCompanyOk {
		n += 2
	}
	if m.IsBankConfOk {
		n += 2
	}
	return n
}

func (m *Banks) Size() (n int) {
	var l int
	_ = l
	if len(m.Banks) > 0 {
		for _, s := range m.Banks {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *DeliverResult) Size() (n int) {
	var l int
	_ = l
	if len(m.DeliverList) > 0 {
		for _, e := range m.DeliverList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *CompanyWeight) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	return n
}

func (m *SwitchCase) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *DeliverCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if len(m.Indexs) > 0 {
		l = 0
		for _, e := range m.Indexs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Company) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyPubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyArea)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if len(m.DeliverList) > 0 {
		for _, e := range m.DeliverList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.CollectingList) > 0 {
		for _, e := range m.CollectingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DelayedList) > 0 {
		for _, e := range m.DelayedList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.CompanyConf != nil {
		l = m.CompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UnDeliverList) > 0 {
		for _, e := range m.UnDeliverList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *CompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyConfName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MinAmount != 0 {
		n += 1 + sovApi(uint64(m.MinAmount))
	}
	if m.MaxAmount != 0 {
		n += 1 + sovApi(uint64(m.MaxAmount))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.MaxReceive != 0 {
		n += 1 + sovApi(uint64(m.MaxReceive))
	}
	if m.IsAutoAdd {
		n += 2
	}
	if m.Rate != 0 {
		n += 1 + sovApi(uint64(m.Rate))
	}
	return n
}

func (m *CaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CaseMinAmount != 0 {
		n += 1 + sovApi(uint64(m.CaseMinAmount))
	}
	if m.CaseMaxAmount != 0 {
		n += 1 + sovApi(uint64(m.CaseMaxAmount))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.ExpireDays != 0 {
		n += 1 + sovApi(uint64(m.ExpireDays))
	}
	if m.IsApply {
		n += 2
	}
	if m.Rate != 0 {
		n += 1 + sovApi(uint64(m.Rate))
	}
	return n
}

func (m *Case) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaseOwner)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaseIdCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DebtAmount != 0 {
		n += 1 + sovApi(uint64(m.DebtAmount))
	}
	if m.OriginalAmount != 0 {
		n += 1 + sovApi(uint64(m.OriginalAmount))
	}
	if m.Fees != 0 {
		n += 1 + sovApi(uint64(m.Fees))
	}
	if m.OverdueDays != 0 {
		n += 1 + sovApi(uint64(m.OverdueDays))
	}
	if m.DelayDays != 0 {
		n += 1 + sovApi(uint64(m.DelayDays))
	}
	l = len(m.CaseArea)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CaseState != 0 {
		n += 1 + sovApi(uint64(m.CaseState))
	}
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AreaList) Size() (n int) {
	var l int
	_ = l
	if len(m.AreaCompany) > 0 {
		for _, e := range m.AreaCompany {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *AreaCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Companys) > 0 {
		for _, e := range m.Companys {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *WeightCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if m.FirstWeight != 0 {
		n += 1 + sovApi(uint64(m.FirstWeight))
	}
	return n
}

func (m *AreaCasePool) Size() (n int) {
	var l int
	_ = l
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.CaseList) > 0 {
		for _, e := range m.CaseList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.WaitingList) > 0 {
		for _, e := range m.WaitingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DeliverList) > 0 {
		for _, e := range m.DeliverList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.CollectingList) > 0 {
		for _, e := range m.CollectingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DelayedList) > 0 {
		for _, e := range m.DelayedList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Platform) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CaseDelay) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Days != 0 {
		n += 1 + sovApi(uint64(m.Days))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Event_InitPlatform) Size() (n int) {
	var l int
	_ = l
	if m.InitPlatform != nil {
		l = m.InitPlatform.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_SetBank) Size() (n int) {
	var l int
	_ = l
	if m.SetBank != nil {
		l = m.SetBank.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_SetCompany) Size() (n int) {
	var l int
	_ = l
	if m.SetCompany != nil {
		l = m.SetCompany.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_AddCompany) Size() (n int) {
	var l int
	_ = l
	if m.AddCompany != nil {
		l = m.AddCompany.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_AddCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.AddCaseConf != nil {
		l = m.AddCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_EditCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.EditCaseConf != nil {
		l = m.EditCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_DelCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.DelCaseConf != nil {
		l = m.DelCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_ImportCase) Size() (n int) {
	var l int
	_ = l
	if m.ImportCase != nil {
		l = m.ImportCase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_ImportCaseList) Size() (n int) {
	var l int
	_ = l
	if m.ImportCaseList != nil {
		l = m.ImportCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_ApplyCaseConf) Size() (n int) {
	var l int
	_ = l
	if m.ApplyCaseConf != nil {
		l = m.ApplyCaseConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_AddCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.AddCompanyConf != nil {
		l = m.AddCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_EditCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.EditCompanyConf != nil {
		l = m.EditCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_DelCompanyConf) Size() (n int) {
	var l int
	_ = l
	if m.DelCompanyConf != nil {
		l = m.DelCompanyConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_DelayCaseList) Size() (n int) {
	var l int
	_ = l
	if m.DelayCaseList != nil {
		l = m.DelayCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_CancelCaseList) Size() (n int) {
	var l int
	_ = l
	if m.CancelCaseList != nil {
		l = m.CancelCaseList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_CollectCaseList) Size() (n int) {
	var l int
	_ = l
	if m.CollectCaseList != nil {
		l = m.CollectCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_FinishCaseList) Size() (n int) {
	var l int
	_ = l
	if m.FinishCaseList != nil {
		l = m.FinishCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_SwitchCase) Size() (n int) {
	var l int
	_ = l
	if m.SwitchCase != nil {
		l = m.SwitchCase.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_UpdateWeight) Size() (n int) {
	var l int
	_ = l
	if m.UpdateWeight != nil {
		l = m.UpdateWeight.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Event_DeliverCaseList) Size() (n int) {
	var l int
	_ = l
	if m.DeliverCaseList != nil {
		l = m.DeliverCaseList.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *EventInitPlatform) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlatformKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventSetBank) Size() (n int) {
	var l int
	_ = l
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventSetCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventAddCompany) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventAddCaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventEditCaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventDelCaseConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventImportCase) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventImportCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, e := range m.CaseList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventApplyCaseConf) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseConfIds) > 0 {
		for _, s := range m.CaseConfIds {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *EventAddCompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventEditCompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventDelCompanyConf) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompanyConfId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventDelayCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, e := range m.CaseList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *EventCancelCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, s := range m.CaseList {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *EventCollectCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, s := range m.CaseList {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *EventFinishCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseList) > 0 {
		for _, s := range m.CaseList {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventSwitchCase) Size() (n int) {
	var l int
	_ = l
	l = len(m.CaseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventUpdateWeight) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EventDeliverCaseList) Size() (n int) {
	var l int
	_ = l
	if len(m.CaseIds) > 0 {
		for _, s := range m.CaseIds {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestSetBank{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_SetBank{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestSetCompany{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_SetCompany{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAddCompany{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_AddCompany{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAddCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_AddCaseConf{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestEditCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_EditCaseConf{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDelCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_DelCaseConf{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestImportCase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ImportCase{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestImportCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ImportCaseList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestApplyCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_ApplyCaseConf{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAddCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_AddCompanyConf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestEditCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_EditCompanyConf{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDelCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_DelCompanyConf{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDelayCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_DelayCaseList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_CancelCaseList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCollectCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_CollectCaseList{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestFinishCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_FinishCaseList{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestSwitchCase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_SwitchCase{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestUpdateWeight{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_UpdateWeight{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDeliverCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Request_DeliverCaseList{v}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformKey = append(m.PlatformKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatformKey == nil {
				m.PlatformKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyPubkey = append(m.CompanyPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.CompanyPubkey == nil {
				m.CompanyPubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyPubkey = append(m.CompanyPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.CompanyPubkey == nil {
				m.CompanyPubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseMinAmount", wireType)
			}
			m.CaseMinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseMinAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseMaxAmount", wireType)
			}
			m.CaseMaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseMaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDays", wireType)
			}
			m.ExpireDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseMinAmount", wireType)
			}
			m.CaseMinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseMinAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseMaxAmount", wireType)
			}
			m.CaseMaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseMaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDays", wireType)
			}
			m.ExpireDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDelCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDelCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDelCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestImportCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestImportCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestImportCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseIdCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseIdCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAmount", wireType)
			}
			m.DebtAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAmount", wireType)
			}
			m.OriginalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			m.Fees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fees |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestImportCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestImportCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestImportCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, &Case{})
			if err := m.CaseList[len(m.CaseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestApplyCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestApplyCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestApplyCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseIds = append(m.CaseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApply = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			m.MinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			m.MaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReceive", wireType)
			}
			m.MaxReceive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReceive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoAdd = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			m.MinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			m.MaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReceive", wireType)
			}
			m.MaxReceive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReceive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoAdd = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDelCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDelCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDelCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDelayCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDelayCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDelayCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseDelay = append(m.CaseDelay, &CaseDelay{})
			if err := m.CaseDelay[len(m.CaseDelay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = append(m.CaseId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCollectCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCollectCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCollectCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = append(m.CaseId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFinishCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFinishCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFinishCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = append(m.CaseId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSwitchCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSwitchCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSwitchCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUpdateWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUpdateWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUpdateWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightList = append(m.WeightList, &CompanyWeight{})
			if err := m.WeightList[len(m.WeightList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeliverCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeliverCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeliverCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseIds = append(m.CaseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSetBank{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_SetBank{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSetCompany{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_SetCompany{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAddCompany{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_AddCompany{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAddCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_AddCaseConf{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseEditCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_EditCaseConf{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseDelCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_DelCaseConf{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseImportCase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ImportCase{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseImportCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ImportCaseList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseApplyCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_ApplyCaseConf{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAddCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_AddCompanyConf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseEditCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_EditCompanyConf{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseDelCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_DelCompanyConf{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseDelayCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_DelayCaseList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseCancelCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_CancelCaseList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseCollectCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_CollectCaseList{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseFinishCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_FinishCaseList{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSwitchCase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_SwitchCase{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseUpdateWeight{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_UpdateWeight{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseDeliverCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_DeliverCaseList{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseOK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_Ok{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseException{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Response_Exception{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseException) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseException: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseException: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOk = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = append(m.Err[:0], dAtA[iNdEx:postIndex]...)
			if m.Err == nil {
				m.Err = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSetBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSetBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSetBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSetCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSetCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSetCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAddCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAddCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAddCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAddCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAddCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAddCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEditCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEditCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEditCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDelCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDelCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDelCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseImportCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseImportCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseImportCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseImportCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseImportCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseImportCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseApplyCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseApplyCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseApplyCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAddCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAddCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAddCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEditCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEditCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEditCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDelCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDelCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDelCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDelayCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDelayCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDelayCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCancelCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCancelCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCancelCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCollectCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCollectCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCollectCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFinishCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFinishCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFinishCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSwitchCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSwitchCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSwitchCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUpdateWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUpdateWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUpdateWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDeliverCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDeliverCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDeliverCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionId", wireType)
			}
			m.InstructionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstructionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitingList = append(m.WaitingList, &Case{})
			if err := m.WaitingList[len(m.WaitingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectingList = append(m.CollectingList, &Case{})
			if err := m.CollectingList[len(m.CollectingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelayedList = append(m.DelayedList, &Case{})
			if err := m.DelayedList[len(m.DelayedList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfList = append(m.CaseConfList, &CaseConf{})
			if err := m.CaseConfList[len(m.CaseConfList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApplyCompanyConf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApplyCompanyConf = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompanyOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompanyOk = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBankConfOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBankConfOk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Banks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banks = append(m.Banks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliverResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliverResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliverResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliverList = append(m.DeliverList, &DeliverCompany{})
			if err := m.DeliverList[len(m.DeliverList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliverCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliverCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliverCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexs = append(m.Indexs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexs = append(m.Indexs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseIds = append(m.CaseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Company) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Company: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Company: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyPubkey = append(m.CompanyPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.CompanyPubkey == nil {
				m.CompanyPubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliverList = append(m.DeliverList, &Case{})
			if err := m.DeliverList[len(m.DeliverList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectingList = append(m.CollectingList, &Case{})
			if err := m.CollectingList[len(m.CollectingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelayedList = append(m.DelayedList, &Case{})
			if err := m.DelayedList[len(m.DelayedList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompanyConf == nil {
				m.CompanyConf = &CompanyConf{}
			}
			if err := m.CompanyConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnDeliverList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnDeliverList = append(m.UnDeliverList, &Case{})
			if err := m.UnDeliverList[len(m.UnDeliverList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			m.MinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			m.MaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReceive", wireType)
			}
			m.MaxReceive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReceive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoAdd = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseMinAmount", wireType)
			}
			m.CaseMinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseMinAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseMaxAmount", wireType)
			}
			m.CaseMaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseMaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDays", wireType)
			}
			m.ExpireDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApply = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Case) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Case: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Case: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseIdCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseIdCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAmount", wireType)
			}
			m.DebtAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAmount", wireType)
			}
			m.OriginalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			m.Fees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fees |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueDays", wireType)
			}
			m.OverdueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayDays", wireType)
			}
			m.DelayDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseState", wireType)
			}
			m.CaseState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaseState |= (CaseState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AreaList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AreaList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AreaList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaCompany = append(m.AreaCompany, &AreaCompany{})
			if err := m.AreaCompany[len(m.AreaCompany)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AreaCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AreaCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AreaCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companys = append(m.Companys, &WeightCompany{})
			if err := m.Companys[len(m.Companys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstWeight", wireType)
			}
			m.FirstWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstWeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AreaCasePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AreaCasePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AreaCasePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, &Case{})
			if err := m.CaseList[len(m.CaseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitingList = append(m.WaitingList, &Case{})
			if err := m.WaitingList[len(m.WaitingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliverList = append(m.DeliverList, &Case{})
			if err := m.DeliverList[len(m.DeliverList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectingList = append(m.CollectingList, &Case{})
			if err := m.CollectingList[len(m.CollectingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelayedList = append(m.DelayedList, &Case{})
			if err := m.DelayedList[len(m.DelayedList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Platform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Platform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Platform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaseDelay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaseDelay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaseDelay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventInitPlatform{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_InitPlatform{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventSetBank{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_SetBank{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventSetCompany{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_SetCompany{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCompany", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventAddCompany{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_AddCompany{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventAddCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_AddCaseConf{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventEditCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_EditCaseConf{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventDelCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_DelCaseConf{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventImportCase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_ImportCase{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventImportCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_ImportCaseList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCaseConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventApplyCaseConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_ApplyCaseConf{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventAddCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_AddCompanyConf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventEditCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_EditCompanyConf{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelCompanyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventDelCompanyConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_DelCompanyConf{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventDelayCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_DelayCaseList{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventCancelCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_CancelCaseList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventCollectCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_CollectCaseList{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventFinishCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_FinishCaseList{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchCase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventSwitchCase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_SwitchCase{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateWeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventUpdateWeight{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_UpdateWeight{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverCaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventDeliverCaseList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Event_DeliverCaseList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInitPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInitPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInitPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformKey = append(m.PlatformKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatformKey == nil {
				m.PlatformKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEditCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEditCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEditCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDelCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDelCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDelCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventImportCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventImportCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventImportCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DeliverResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventImportCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventImportCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventImportCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, &Case{})
			if err := m.CaseList[len(m.CaseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DeliverResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventApplyCaseConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventApplyCaseConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventApplyCaseConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseConfIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseConfIds = append(m.CaseConfIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEditCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEditCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEditCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDelCompanyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDelCompanyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDelCompanyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyConfId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyConfId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDelayCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDelayCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDelayCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, &CaseDelay{})
			if err := m.CaseList[len(m.CaseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCollectCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCollectCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCollectCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFinishCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFinishCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFinishCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseList = append(m.CaseList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DeliverResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSwitchCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwitchCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwitchCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeliverCaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeliverCaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeliverCaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaseIds = append(m.CaseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 2904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5b, 0x4f, 0x73, 0x1b, 0xb7,
	0x15, 0xd7, 0x92, 0xe2, 0xbf, 0xc7, 0x3f, 0x5a, 0x41, 0xb2, 0xcc, 0x38, 0x8e, 0x42, 0x6f, 0x9c,
	0x8c, 0x92, 0x83, 0x93, 0xca, 0xf9, 0xd7, 0xb8, 0xad, 0x47, 0x22, 0x59, 0x93, 0x91, 0x45, 0xd9,
	0x2b, 0x3b, 0x9e, 0x74, 0x3a, 0xf5, 0xac, 0x45, 0x48, 0xde, 0x8a, 0xe2, 0xb2, 0xdc, 0xa5, 0x6d,
	0xf5, 0xda, 0x53, 0x67, 0xda, 0x73, 0xf3, 0x21, 0x3a, 0xbd, 0xf4, 0xd4, 0xe9, 0x17, 0xf0, 0xb1,
	0xa7, 0x76, 0xa6, 0xa7, 0x8e, 0xfb, 0x3d, 0xda, 0x0e, 0xb0, 0x58, 0x2c, 0xb0, 0x04, 0x96, 0xb2,
	0x22, 0x1e, 0xda, 0xe6, 0x46, 0x3c, 0xbc, 0xf7, 0xf0, 0xf0, 0x00, 0xbc, 0x07, 0xfc, 0xde, 0x12,
	0x4a, 0xce, 0xc8, 0xbd, 0x31, 0x1a, 0x7b, 0x81, 0x87, 0x2a, 0x47, 0x87, 0x07, 0xde, 0x60, 0x80,
	0x0f, 0x02, 0xd7, 0x1b, 0x5a, 0xbf, 0xaa, 0x42, 0xc1, 0xc6, 0xbf, 0x98, 0x60, 0x3f, 0x40, 0x77,
	0xa0, 0xe2, 0x0e, 0xdd, 0xe0, 0xde, 0xc0, 0x09, 0x0e, 0xbd, 0xf1, 0x49, 0xdd, 0x68, 0x18, 0x1b,
	0xe5, 0xcd, 0x6b, 0x37, 0x44, 0x81, 0x1b, 0x8c, 0xb9, 0x2b, 0x30, 0x76, 0x16, 0x6c, 0x49, 0x10,
	0x7d, 0x0e, 0x05, 0x1f, 0x07, 0xdb, 0xce, 0xf0, 0xb8, 0x9e, 0xa1, 0x3a, 0xae, 0x2a, 0x75, 0xec,
	0x87, 0x3c, 0x9d, 0x05, 0x3b, 0x62, 0x47, 0x5b, 0x00, 0x3e, 0x0e, 0x9a, 0xde, 0xc9, 0xc8, 0x19,
	0x9e, 0xd6, 0xb3, 0x54, 0xf8, 0x6d, 0x9d, 0x30, 0x63, 0xeb, 0x2c, 0xd8, 0x82, 0x10, 0x51, 0xe1,
	0xf4, 0xfb, 0x91, 0x8a, 0xc5, 0x14, 0x15, 0x5b, 0x9c, 0x8d, 0xa8, 0x88, 0x85, 0x50, 0x0b, 0xca,
	0xa4, 0xe5, 0xf8, 0xb8, 0xe9, 0x0d, 0x0f, 0xeb, 0x39, 0xaa, 0xa3, 0xa1, 0xd5, 0xc1, 0xf8, 0x3a,
	0x0b, 0xb6, 0x28, 0x46, 0xdc, 0x89, 0xfb, 0x6e, 0xc0, 0xd5, 0xe4, 0x53, 0xdc, 0xd9, 0x16, 0x18,
	0x89, 0x3b, 0x45, 0x41, 0x62, 0x4e, 0x1f, 0x0f, 0xb8, 0x9e, 0x42, 0x8a, 0x39, 0xad, 0x98, 0x8f,
	0x98, 0x23, 0x88, 0x11, 0xbf, 0xb8, 0x27, 0x23, 0x6f, 0x4c, 0xf5, 0xd6, 0x8b, 0x29, 0x7e, 0xe9,
	0x72, 0x36, 0xe2, 0x97, 0x58, 0x08, 0xed, 0x42, 0x2d, 0x6e, 0xdd, 0x75, 0xfd, 0xa0, 0x5e, 0xa2,
	0x6a, 0xde, 0x99, 0xa1, 0x86, 0xb0, 0x76, 0x16, 0xec, 0x84, 0x30, 0xfa, 0x12, 0xaa, 0xce, 0x68,
	0x34, 0x38, 0xe5, 0x33, 0x03, 0xaa, 0xcd, 0x52, 0x3b, 0x5a, 0xe4, 0xec, 0x2c, 0xd8, 0xb2, 0x28,
	0x31, 0x2d, 0x5e, 0x40, 0xaa, 0xac, 0x9c, 0x62, 0xda, 0x96, 0xc4, 0x4a, 0x4c, 0x93, 0x85, 0xd1,
	0x3d, 0x58, 0xa2, 0x4b, 0x20, 0xe8, 0xab, 0x50, 0x7d, 0xd7, 0xf5, 0xcb, 0x27, 0x29, 0x4c, 0x8a,
	0x13, 0x03, 0xc9, 0x6a, 0x08, 0x0a, 0xab, 0x29, 0x06, 0xb6, 0x24, 0x56, 0x62, 0xa0, 0x2c, 0x4c,
	0x7c, 0xd7, 0xc7, 0x03, 0xe7, 0x94, 0xaf, 0x44, 0x2d, 0xc5, 0x77, 0x2d, 0x91, 0x93, 0xf8, 0x4e,
	0x12, 0x25, 0xa6, 0x1d, 0x38, 0xc3, 0x83, 0x70, 0xaf, 0x50, 0x65, 0x4b, 0x29, 0xa6, 0x35, 0x25,
	0x56, 0x62, 0x9a, 0x2c, 0x4c, 0x7c, 0xc7, 0xa4, 0xb8, 0x3e, 0x33, 0xc5, 0x77, 0x4d, 0x99, 0x97,
	0xf8, 0x2e, 0x21, 0x4e, 0x0c, 0x3c, 0x74, 0x87, 0xae, 0xff, 0x94, 0x2b, 0x5c, 0x4e, 0x31, 0xf0,
	0xc7, 0x12, 0x2b, 0x31, 0x50, 0x16, 0xa6, 0x41, 0xe6, 0xb9, 0x1b, 0x1c, 0x50, 0x4a, 0x1d, 0xa5,
	0x05, 0x19, 0xce, 0x46, 0x83, 0x0c, 0x6f, 0x91, 0xb3, 0x3d, 0x19, 0xf5, 0x9d, 0x00, 0x3f, 0xc2,
	0xee, 0xd1, 0xd3, 0xa0, 0xbe, 0x92, 0x72, 0xb6, 0x1f, 0x0a, 0x8c, 0xe4, 0x6c, 0x8b, 0x82, 0xc4,
	0x59, 0x7d, 0x3c, 0x70, 0x9f, 0xe1, 0x31, 0x9f, 0xdb, 0x6a, 0x8a, 0xb3, 0x5a, 0x32, 0x2f, 0x71,
	0x56, 0x42, 0x1c, 0xd5, 0x20, 0xe3, 0x8d, 0xea, 0x97, 0x1a, 0xc6, 0x46, 0xd6, 0xce, 0x78, 0x23,
	0x64, 0x42, 0x76, 0xe2, 0xf6, 0xeb, 0x6b, 0x0d, 0x63, 0xa3, 0x64, 0x93, 0x9f, 0x68, 0x0d, 0xf2,
	0xa3, 0xc9, 0x93, 0x63, 0x7c, 0x5a, 0xbf, 0xdc, 0x30, 0x36, 0x2a, 0x36, 0x6b, 0xa1, 0xeb, 0x50,
	0x75, 0x87, 0x7e, 0x30, 0x9e, 0xd0, 0x21, 0xbb, 0xfd, 0x7a, 0x9d, 0x2a, 0x91, 0x89, 0x08, 0xc1,
	0xa2, 0xef, 0x1e, 0x0d, 0xeb, 0x6f, 0x50, 0x59, 0xfa, 0x1b, 0x7d, 0x02, 0x45, 0x27, 0x12, 0xba,
	0xd2, 0x30, 0x36, 0x6a, 0x9b, 0x6f, 0xc8, 0xe6, 0xef, 0x62, 0xdf, 0x77, 0x8e, 0xf0, 0x83, 0xd3,
	0x11, 0xb6, 0x39, 0xeb, 0x76, 0x01, 0x72, 0xcf, 0x9c, 0xc1, 0x04, 0x5b, 0x3b, 0xb0, 0xa2, 0xc8,
	0x2b, 0xa8, 0x01, 0xe5, 0x11, 0xfb, 0xbd, 0x83, 0x4f, 0x69, 0x3e, 0xaa, 0xd8, 0x22, 0x89, 0x18,
	0xe3, 0x0e, 0x0f, 0x3d, 0x9a, 0x66, 0x4a, 0x36, 0xfd, 0x6d, 0xfd, 0x14, 0x6a, 0x72, 0x82, 0x11,
	0x26, 0x6c, 0x48, 0x13, 0x5e, 0x83, 0xfc, 0x13, 0x67, 0x78, 0xdc, 0xed, 0x33, 0x79, 0xd6, 0x42,
	0x57, 0xa0, 0x48, 0x7e, 0xf5, 0x9c, 0x13, 0x4c, 0x73, 0x50, 0xc9, 0xe6, 0x6d, 0xeb, 0x14, 0x96,
	0xa7, 0x32, 0x10, 0xf1, 0xdc, 0x41, 0xf8, 0xf3, 0x9e, 0x38, 0x8e, 0x4c, 0x44, 0x57, 0xa1, 0xc4,
	0x08, 0x7c, 0xc4, 0x98, 0x40, 0x26, 0xcb, 0x1a, 0xc2, 0xb8, 0x22, 0xc9, 0xfa, 0xa3, 0xc1, 0xc7,
	0x8e, 0x03, 0xd8, 0x19, 0xc7, 0x8e, 0xb5, 0x6f, 0x8d, 0xb1, 0xc3, 0x46, 0x17, 0x49, 0xb2, 0x75,
	0xd9, 0x19, 0xd6, 0x2d, 0x4e, 0x59, 0x47, 0x9c, 0xf9, 0x3c, 0x3c, 0x0c, 0x24, 0x5f, 0xe6, 0x6c,
	0xd6, 0xb2, 0xfe, 0x6a, 0x00, 0x9a, 0x4e, 0x96, 0x68, 0x1d, 0xe0, 0x80, 0xfd, 0xee, 0xf6, 0xa9,
	0xcd, 0x25, 0x5b, 0xa0, 0xd0, 0x69, 0x39, 0x3e, 0xde, 0x75, 0x87, 0x5b, 0x27, 0xde, 0x64, 0x18,
	0x50, 0x93, 0xb3, 0xb6, 0x4c, 0xe4, 0x5c, 0xce, 0x0b, 0xc6, 0x95, 0x15, 0xb8, 0x22, 0x22, 0x31,
	0xde, 0x7b, 0x86, 0xc7, 0xfd, 0x09, 0x6e, 0x39, 0xa7, 0x3e, 0x35, 0x3e, 0x67, 0x8b, 0x24, 0x62,
	0x0d, 0x7e, 0x31, 0x72, 0xc7, 0x21, 0x43, 0x38, 0x01, 0x81, 0x42, 0xf6, 0xd9, 0xd8, 0x09, 0x30,
	0xcd, 0xe1, 0x39, 0x9b, 0xfe, 0xb6, 0xfe, 0x66, 0xf0, 0x5d, 0x2b, 0xa6, 0xef, 0xff, 0x81, 0x99,
	0x7d, 0xcc, 0x57, 0x4c, 0xb8, 0x4f, 0xcc, 0x9a, 0x97, 0xf5, 0xe7, 0x0c, 0xdf, 0x9e, 0x71, 0xea,
	0x27, 0xdb, 0x82, 0xf0, 0x70, 0x09, 0xd6, 0xa2, 0xdb, 0xcd, 0xf1, 0xf1, 0xde, 0xf3, 0x21, 0x1e,
	0xf3, 0xc3, 0x10, 0x11, 0xa2, 0xb1, 0xba, 0xfd, 0xa6, 0x33, 0x8e, 0x76, 0xa3, 0x40, 0x21, 0x27,
	0xf4, 0xc0, 0x1b, 0x06, 0x63, 0xe7, 0x20, 0x60, 0x7b, 0x91, 0xb7, 0xa3, 0xd3, 0x4b, 0x25, 0x73,
	0xf1, 0xe9, 0xa5, 0x72, 0xeb, 0x00, 0x7d, 0xfc, 0x24, 0x60, 0x2e, 0xcd, 0x53, 0x97, 0x0a, 0x14,
	0xf4, 0x1e, 0xd4, 0xbc, 0xb1, 0x7b, 0xe4, 0x0e, 0x9d, 0x01, 0xe3, 0x29, 0x50, 0x9e, 0x04, 0x95,
	0x78, 0xed, 0x10, 0x63, 0x9f, 0x5e, 0xa3, 0xb2, 0x36, 0xfd, 0x9d, 0x5c, 0x8b, 0xd2, 0xf4, 0x5a,
	0x10, 0xab, 0x1d, 0x1f, 0xd3, 0x13, 0x08, 0xcc, 0x6a, 0xd6, 0xb6, 0xee, 0xc0, 0x25, 0xe5, 0xbd,
	0x09, 0xdd, 0x08, 0x85, 0x68, 0x6a, 0x30, 0x1a, 0xd9, 0x8d, 0xf2, 0x26, 0x92, 0x63, 0x2b, 0xe1,
	0xb4, 0x39, 0x8f, 0xf5, 0x25, 0xac, 0xaa, 0xae, 0x4c, 0xa8, 0x0e, 0x85, 0xd0, 0x81, 0x3e, 0x55,
	0x53, 0xb2, 0xa3, 0x26, 0xe9, 0x71, 0x7d, 0xca, 0x4c, 0x17, 0xa2, 0x68, 0x47, 0x4d, 0xeb, 0x77,
	0x19, 0x6e, 0x95, 0x7c, 0x65, 0x12, 0xa2, 0x8e, 0xb4, 0x1f, 0x64, 0x22, 0xda, 0x20, 0x57, 0x01,
	0x4e, 0xa0, 0x91, 0x23, 0x5c, 0xea, 0x24, 0x99, 0x6c, 0x87, 0x13, 0x7e, 0x20, 0xc2, 0xad, 0x1e,
	0x13, 0x68, 0x2f, 0x3f, 0x08, 0x8b, 0xac, 0x57, 0x77, 0x08, 0x72, 0xca, 0x43, 0x70, 0xe2, 0xbc,
	0xb0, 0xf1, 0x01, 0x76, 0x9f, 0xe1, 0x68, 0xd9, 0x63, 0x0a, 0xd1, 0xef, 0xfa, 0x5b, 0x93, 0xc0,
	0xdb, 0xea, 0xf7, 0xe9, 0x8a, 0x17, 0xed, 0x98, 0xc0, 0x8f, 0x48, 0x51, 0x38, 0x22, 0xdf, 0x64,
	0x60, 0x4d, 0x7d, 0xf9, 0xfb, 0xbf, 0x77, 0xcd, 0x0f, 0xf9, 0x9e, 0x91, 0x6f, 0xb1, 0x67, 0x73,
	0x8c, 0xb5, 0xcb, 0xf7, 0xaf, 0x74, 0x6d, 0x45, 0x9f, 0x84, 0x01, 0x83, 0x12, 0xd9, 0x41, 0xb8,
	0x3c, 0x7d, 0x10, 0x68, 0xb7, 0x1d, 0x73, 0x5a, 0x1f, 0x72, 0x6b, 0xe4, 0x8b, 0xab, 0x14, 0x98,
	0xb2, 0x71, 0x60, 0xb2, 0x3e, 0xe2, 0x0b, 0x9b, 0xb8, 0x99, 0x6a, 0x25, 0xe2, 0x21, 0xe4, 0xab,
	0xa7, 0x56, 0xa0, 0x1b, 0xdf, 0x21, 0xe2, 0x2b, 0x65, 0x5a, 0xa0, 0xd4, 0xde, 0x1a, 0x2c, 0x9b,
	0xe7, 0x20, 0xf1, 0x9a, 0x89, 0x6e, 0x01, 0x84, 0xe9, 0x57, 0x08, 0x1b, 0x6f, 0x26, 0xbc, 0x15,
	0xea, 0x08, 0x05, 0x6c, 0x81, 0xdd, 0xda, 0xe4, 0x1e, 0x48, 0x5c, 0x37, 0xf5, 0x31, 0xc4, 0xfa,
	0x7b, 0x05, 0x8a, 0x36, 0xf6, 0x47, 0xde, 0xd0, 0xc7, 0xa8, 0xa3, 0x04, 0x12, 0xa6, 0xde, 0x26,
	0x21, 0x77, 0x2a, 0x92, 0xf0, 0xfd, 0x24, 0x92, 0xf0, 0x96, 0x5a, 0x89, 0x02, 0x4a, 0xd8, 0x56,
	0x40, 0x09, 0x0d, 0xad, 0xb4, 0x1a, 0x4b, 0xd8, 0x56, 0x60, 0x09, 0x1a, 0x1d, 0x5a, 0x30, 0xa1,
	0xad, 0x02, 0x13, 0xae, 0xe9, 0x95, 0x68, 0xd0, 0x84, 0x8e, 0x12, 0x4d, 0xd0, 0xf8, 0x34, 0x15,
	0x4e, 0x68, 0xab, 0xe0, 0x04, 0x8d, 0x41, 0x29, 0x78, 0xc2, 0xb6, 0x02, 0x4f, 0xd0, 0xf8, 0x46,
	0x0b, 0x28, 0xf4, 0x34, 0x80, 0xc2, 0xf5, 0x59, 0x7a, 0x34, 0x88, 0xc2, 0x8e, 0x1a, 0x51, 0x78,
	0x47, 0xe3, 0xed, 0x74, 0x48, 0xa1, 0xa7, 0x81, 0x14, 0xae, 0xcf, 0xda, 0x00, 0x1a, 0x4c, 0xe1,
	0xbe, 0x0e, 0x53, 0x78, 0x37, 0x65, 0x11, 0xd3, 0x41, 0x85, 0x9e, 0x06, 0x54, 0xb8, 0xae, 0x5f,
	0xcd, 0x54, 0x54, 0x61, 0x47, 0x8d, 0x2a, 0xbc, 0xa3, 0x55, 0x97, 0x06, 0x2b, 0xf4, 0x34, 0xb0,
	0x82, 0xc6, 0xb8, 0x99, 0xb8, 0xc2, 0x7d, 0x1d, 0xae, 0xa0, 0xf1, 0xdf, 0x19, 0x80, 0x85, 0x9e,
	0x06, 0x58, 0xd0, 0x98, 0x38, 0x13, 0x59, 0xd8, 0x56, 0x20, 0x0b, 0xba, 0x98, 0xa3, 0x83, 0x16,
	0x3a, 0x4a, 0x68, 0x41, 0x73, 0xd0, 0x53, 0xb1, 0x85, 0xfb, 0x3a, 0x6c, 0xe1, 0x5d, 0xed, 0x7a,
	0xce, 0x02, 0x17, 0x3e, 0x80, 0x8c, 0x77, 0x4c, 0xc1, 0x85, 0xf2, 0x66, 0x5d, 0xad, 0x65, 0x6f,
	0xa7, 0xb3, 0x60, 0x67, 0xbc, 0x63, 0x74, 0x1b, 0x4a, 0xf8, 0xc5, 0x01, 0x1e, 0x91, 0x5e, 0x0a,
	0x3f, 0x28, 0x50, 0x16, 0xb6, 0xd3, 0x23, 0xb6, 0xce, 0x82, 0x1d, 0xcb, 0xc4, 0xf0, 0xc0, 0xfb,
	0x24, 0x5f, 0x26, 0x58, 0xd1, 0x2a, 0xe4, 0xf0, 0x78, 0xec, 0x8d, 0x59, 0xba, 0x0c, 0x1b, 0xd6,
	0x55, 0x80, 0xd8, 0x10, 0x8a, 0x85, 0x1c, 0x53, 0x86, 0x22, 0x31, 0xc9, 0xfa, 0x10, 0x0a, 0xf4,
	0x5e, 0x33, 0xa2, 0x37, 0x78, 0xd7, 0xdf, 0x8b, 0x3a, 0xe9, 0x6f, 0x64, 0x42, 0x16, 0x8f, 0xc3,
	0xd7, 0x48, 0xc5, 0x26, 0x3f, 0xad, 0x23, 0x72, 0x19, 0x99, 0xce, 0x53, 0xd3, 0x50, 0x89, 0xa1,
	0x82, 0x4a, 0xde, 0x87, 0x1c, 0x7e, 0x86, 0xd9, 0x0b, 0xaf, 0xbc, 0xb9, 0x22, 0xcf, 0xbe, 0x4d,
	0xba, 0xec, 0x90, 0xc3, 0x7a, 0x02, 0x4b, 0x89, 0x5c, 0x76, 0xf1, 0x63, 0x60, 0xf2, 0xac, 0x4b,
	0x66, 0xbc, 0xb9, 0x0e, 0x23, 0xc3, 0x14, 0x17, 0x3b, 0xcc, 0x21, 0xb9, 0xf9, 0x4c, 0xa5, 0xcd,
	0x8b, 0x1f, 0x47, 0xd8, 0x02, 0xd2, 0x33, 0x7f, 0x9e, 0x13, 0x12, 0x9f, 0xdd, 0xf3, 0x5c, 0x1f,
	0xe1, 0x9d, 0x7e, 0xe1, 0xc3, 0xb8, 0xe4, 0x16, 0xa9, 0xca, 0xdb, 0x17, 0x3f, 0xd4, 0x53, 0x72,
	0x01, 0x57, 0xe4, 0xf4, 0xb9, 0x4e, 0x6a, 0xfa, 0x41, 0x7c, 0xb1, 0x43, 0xfd, 0x1c, 0x2e, 0x6b,
	0x6e, 0x02, 0x73, 0x9d, 0xd6, 0xf4, 0x9b, 0x6d, 0x6e, 0x6b, 0x25, 0xbf, 0xef, 0xe6, 0x39, 0xa9,
	0xc4, 0xd3, 0x6f, 0x9e, 0x6b, 0x95, 0x7c, 0x34, 0xce, 0x73, 0x5a, 0x89, 0xe7, 0xe6, 0x5c, 0x13,
	0x46, 0x7c, 0x41, 0x99, 0x67, 0x84, 0x95, 0x1e, 0xb1, 0xf3, 0x5c, 0xa6, 0xe4, 0xcb, 0xf6, 0xc2,
	0xc7, 0xfa, 0x7d, 0x16, 0x16, 0x2f, 0xba, 0xf8, 0x80, 0x3e, 0x86, 0xf2, 0x73, 0xc7, 0x0d, 0xdc,
	0xe1, 0x11, 0xbd, 0xcd, 0x2d, 0x6a, 0xe1, 0x40, 0x91, 0x0d, 0x7d, 0x01, 0xb5, 0xa8, 0x9f, 0x09,
	0xe6, 0xb4, 0x82, 0x09, 0x4e, 0x32, 0x22, 0xbd, 0xd5, 0xe3, 0x3e, 0x15, 0xcc, 0xeb, 0x47, 0x14,
	0xd8, 0xd0, 0x17, 0x50, 0x89, 0x80, 0x61, 0x2a, 0x56, 0xa0, 0x62, 0x6b, 0xd3, 0x62, 0x84, 0xc3,
	0x96, 0x78, 0xd1, 0x0d, 0x40, 0x0c, 0x7e, 0x14, 0xdf, 0x35, 0x45, 0x7a, 0x4d, 0x53, 0xf4, 0xa0,
	0x06, 0x94, 0x5d, 0x9f, 0x11, 0xf6, 0x8e, 0xe9, 0x03, 0xb2, 0x68, 0x8b, 0x24, 0x64, 0x41, 0xc5,
	0xf5, 0xc9, 0x5a, 0x10, 0xfe, 0xbd, 0x63, 0xfa, 0x28, 0x2c, 0xda, 0x12, 0xcd, 0x7a, 0x0b, 0x72,
	0xa4, 0xe5, 0x93, 0x6b, 0x25, 0x71, 0x77, 0x04, 0x70, 0x84, 0x0d, 0x6b, 0x0f, 0xaa, 0x6c, 0xc7,
	0xd8, 0xd8, 0x9f, 0x0c, 0x02, 0xf4, 0x23, 0xea, 0x17, 0x42, 0x10, 0x10, 0x96, 0xc4, 0x67, 0x0e,
	0xd1, 0x1e, 0x0b, 0x0d, 0xb1, 0x45, 0x01, 0xeb, 0x6b, 0xa8, 0x4a, 0x00, 0x8c, 0x0c, 0xf3, 0x18,
	0xc9, 0xf2, 0x0b, 0x82, 0x45, 0x27, 0xae, 0xdb, 0xd0, 0xdf, 0x42, 0xc1, 0x25, 0x2b, 0x15, 0x5c,
	0xb6, 0x01, 0xbe, 0x35, 0xac, 0xf4, 0x1b, 0x03, 0x6a, 0xb2, 0xf9, 0x17, 0x67, 0x20, 0xa1, 0xbb,
	0xc3, 0x3e, 0x7e, 0xe1, 0xd3, 0x0d, 0x9c, 0xb3, 0x59, 0x4b, 0x44, 0x97, 0x72, 0x32, 0xba, 0xf4,
	0x32, 0x0b, 0x85, 0xff, 0x92, 0x7a, 0x17, 0x3b, 0x31, 0x7c, 0x67, 0xa4, 0x9f, 0x98, 0x88, 0x4d,
	0x71, 0x46, 0x0b, 0xe7, 0x3d, 0xa3, 0xc5, 0xb3, 0x9d, 0xd1, 0x5b, 0x7c, 0x86, 0xf4, 0x80, 0x85,
	0xc0, 0xcb, 0x1b, 0x4a, 0x8c, 0x90, 0x9e, 0x52, 0x91, 0x1b, 0x7d, 0x0e, 0xd5, 0xc9, 0xb0, 0x25,
	0x4c, 0x13, 0xb4, 0x83, 0xca, 0x8c, 0xd6, 0x6f, 0x33, 0x50, 0xfe, 0x0e, 0x2d, 0x8f, 0xd1, 0xf2,
	0x7f, 0x19, 0x50, 0xe4, 0xf7, 0xd5, 0x38, 0x27, 0x18, 0x52, 0x4e, 0x90, 0x4b, 0x6f, 0x99, 0xd9,
	0x25, 0xc5, 0xec, 0x99, 0x4a, 0x8a, 0x8b, 0x67, 0x28, 0x29, 0xe6, 0x66, 0x95, 0x14, 0xf3, 0x53,
	0x25, 0x45, 0xa1, 0x9e, 0x54, 0x90, 0xea, 0x49, 0x4a, 0x07, 0xfc, 0x29, 0x0b, 0x8b, 0xdf, 0x55,
	0x0a, 0x13, 0x2e, 0xbe, 0x0a, 0x25, 0x7a, 0x56, 0x69, 0x3f, 0xd0, 0xfe, 0x98, 0x20, 0xd5, 0x11,
	0xcb, 0x72, 0x1d, 0x31, 0x2a, 0x93, 0xec, 0x07, 0xc4, 0xcf, 0x15, 0xfa, 0x2d, 0x86, 0xa2, 0x4c,
	0x42, 0xbb, 0xed, 0x98, 0x53, 0xd8, 0x79, 0x55, 0x69, 0xe7, 0x49, 0x51, 0xb2, 0x96, 0x4c, 0x13,
	0x77, 0xa0, 0x48, 0x06, 0x8d, 0xe2, 0x09, 0x89, 0xfa, 0x11, 0x58, 0x1e, 0x66, 0xc4, 0x44, 0x3c,
	0xd9, 0x8a, 0x19, 0x6c, 0x91, 0xdb, 0xfa, 0x09, 0x94, 0x85, 0x3e, 0x9e, 0x4d, 0x0c, 0x21, 0x9b,
	0x7c, 0x46, 0x16, 0x92, 0x76, 0xfb, 0xf5, 0x8c, 0xaa, 0xa0, 0x11, 0x26, 0xd2, 0x48, 0x3d, 0x67,
	0xb6, 0x8e, 0xa0, 0x2a, 0x75, 0xcd, 0xc8, 0x64, 0x71, 0x5c, 0xcf, 0x48, 0x71, 0xbd, 0x01, 0xe5,
	0x43, 0x77, 0xec, 0x07, 0x8f, 0xc4, 0x94, 0x26, 0x92, 0xac, 0x97, 0x19, 0xa8, 0xd0, 0x59, 0x38,
	0x3e, 0xbe, 0xe7, 0x79, 0x03, 0xed, 0x71, 0x56, 0x25, 0x4b, 0xb1, 0xcc, 0x9b, 0x9d, 0x5d, 0xe6,
	0x3d, 0xe7, 0x55, 0x30, 0x91, 0x9c, 0x72, 0xe7, 0x4d, 0x4e, 0xf9, 0xf3, 0x26, 0xa7, 0xc2, 0x99,
	0x92, 0x93, 0xf5, 0x29, 0x14, 0x39, 0xd6, 0xa6, 0xbb, 0x40, 0xab, 0xbe, 0xfd, 0xf9, 0x0c, 0x4a,
	0xbc, 0x0a, 0xa8, 0x0d, 0x28, 0x08, 0x16, 0xfb, 0x0e, 0xdd, 0x45, 0x34, 0x0a, 0x91, 0xdf, 0xd6,
	0x1f, 0xca, 0x90, 0xa3, 0xf7, 0x77, 0xd4, 0x56, 0x16, 0xaf, 0xde, 0x56, 0x5c, 0xf5, 0x53, 0x2b,
	0x57, 0x9f, 0x26, 0x2b, 0x57, 0x57, 0x14, 0x1a, 0x14, 0x65, 0xab, 0xdb, 0x8a, 0xb2, 0xd5, 0x5b,
	0x6a, 0x51, 0x75, 0xcd, 0xea, 0xb6, 0xa2, 0x66, 0xa5, 0x52, 0xa0, 0x2d, 0x58, 0x6d, 0xab, 0x0a,
	0x56, 0xeb, 0x1a, 0x0d, 0x9a, 0x6a, 0x55, 0x5b, 0x59, 0xad, 0x52, 0x39, 0x31, 0xb5, 0x54, 0xb5,
	0xad, 0x2a, 0x55, 0xa9, 0x4c, 0x49, 0xa9, 0x53, 0xdd, 0x56, 0xd4, 0xa9, 0x54, 0xfe, 0xd0, 0x16,
	0xa9, 0x76, 0x34, 0x45, 0xaa, 0x6b, 0xa9, 0x4a, 0x34, 0x15, 0xaa, 0x8e, 0xba, 0x42, 0xd5, 0x50,
	0xb9, 0x37, 0xbd, 0x3c, 0xb5, 0xa3, 0x29, 0x4f, 0x5d, 0x4b, 0x5d, 0x6b, 0x4d, 0x6d, 0xaa, 0xa7,
	0xab, 0x4d, 0x59, 0xba, 0x25, 0x4b, 0x2f, 0x4c, 0xed, 0x68, 0x0a, 0x53, 0xd7, 0x34, 0x6b, 0x97,
	0x5a, 0x95, 0xea, 0xa8, 0xab, 0x52, 0x0d, 0xb5, 0xae, 0xb4, 0x92, 0xd4, 0x8e, 0xa6, 0x24, 0xa5,
	0x32, 0x6b, 0x66, 0x3d, 0xaa, 0xa7, 0xab, 0x47, 0xa9, 0x7c, 0x76, 0x86, 0x62, 0xd4, 0x8e, 0xa6,
	0x18, 0xa5, 0x32, 0x6e, 0x66, 0x25, 0xea, 0xb6, 0xa2, 0x12, 0xa5, 0x0c, 0x23, 0xba, 0x32, 0x54,
	0x5b, 0x59, 0x86, 0x52, 0x9d, 0xe0, 0xd4, 0x1a, 0x54, 0x4f, 0x57, 0x83, 0xb2, 0xd4, 0xab, 0x37,
	0xa3, 0x00, 0x15, 0xd7, 0x84, 0x3e, 0x81, 0xe5, 0xa9, 0x20, 0x3c, 0xfb, 0x83, 0x51, 0xeb, 0x3d,
	0xa8, 0x88, 0x91, 0x57, 0x97, 0xa2, 0xad, 0x0f, 0x61, 0x29, 0x11, 0x66, 0xd3, 0xaf, 0x0d, 0x5c,
	0x40, 0x28, 0x79, 0xa4, 0x0b, 0x6c, 0x82, 0x99, 0x8c, 0xa2, 0x33, 0x3f, 0xb1, 0xbb, 0xc9, 0x26,
	0xfd, 0x3a, 0xdf, 0x1b, 0xf2, 0x81, 0x5e, 0xe7, 0x5b, 0xbe, 0x9f, 0xb1, 0xd9, 0x9c, 0xe1, 0x43,
	0xbe, 0x9b, 0x90, 0x1f, 0x53, 0x4c, 0x84, 0xe5, 0xb9, 0x37, 0x95, 0x20, 0x48, 0x08, 0x9b, 0xd8,
	0x8c, 0xd5, 0xfa, 0x25, 0xac, 0x28, 0xe2, 0xe5, 0xeb, 0x7e, 0xeb, 0x76, 0xbe, 0xb1, 0x3f, 0x05,
	0x34, 0x1d, 0x5f, 0xe9, 0x83, 0x9f, 0xcf, 0x3f, 0x42, 0x7f, 0x44, 0x92, 0x75, 0x8b, 0xd9, 0x7c,
	0x9e, 0x2f, 0xe1, 0xac, 0x1f, 0xc0, 0xaa, 0x2a, 0x76, 0x9e, 0x51, 0x3a, 0x1a, 0xfa, 0x5c, 0x1f,
	0x54, 0x75, 0xd9, 0x7c, 0x65, 0xb8, 0xfd, 0xe6, 0x94, 0xab, 0xb5, 0x5f, 0x53, 0xc5, 0xdf, 0x16,
	0x7e, 0x8f, 0xd9, 0x91, 0xc0, 0xd3, 0xaf, 0x24, 0x74, 0x95, 0x04, 0x91, 0x4d, 0x36, 0xf1, 0x24,
	0x2e, 0x9e, 0x26, 0x73, 0xc8, 0x86, 0x49, 0xe0, 0xdb, 0x29, 0x22, 0xe7, 0xdb, 0x09, 0x77, 0xa2,
	0x43, 0xfe, 0x6d, 0xe1, 0xb2, 0x15, 0x76, 0x2e, 0xc5, 0x50, 0x68, 0x7d, 0xc4, 0x66, 0x7e, 0xe6,
	0x8f, 0xa8, 0x3e, 0xf8, 0x77, 0x16, 0xca, 0xc2, 0x97, 0xf2, 0xa8, 0x02, 0xc5, 0x5d, 0xff, 0xa8,
	0x3d, 0x1e, 0x7b, 0x63, 0x73, 0x01, 0x95, 0xa1, 0xb0, 0xeb, 0x1f, 0x91, 0x78, 0x67, 0x1a, 0x68,
	0x09, 0xca, 0xbb, 0xfe, 0xd1, 0xfe, 0xd3, 0x49, 0xd0, 0xf2, 0x9e, 0x0f, 0xcd, 0x0c, 0xe3, 0x6d,
	0x0e, 0x3c, 0x1f, 0x9b, 0x59, 0xb4, 0x02, 0x4b, 0x8c, 0x37, 0x8a, 0x8d, 0xe6, 0x22, 0xaa, 0x01,
	0x10, 0x99, 0x30, 0xf2, 0x99, 0x39, 0xb4, 0x0c, 0xd5, 0xb0, 0xcd, 0xf6, 0x94, 0x99, 0x67, 0xa4,
	0x78, 0x87, 0x9b, 0x05, 0x84, 0xa0, 0xc6, 0x48, 0xec, 0x2c, 0x98, 0x45, 0xa6, 0x5e, 0x8c, 0x42,
	0x66, 0x89, 0x31, 0x0a, 0x51, 0xc6, 0x04, 0xa6, 0x2f, 0x3e, 0xe5, 0x66, 0x19, 0x5d, 0x82, 0x65,
	0x89, 0x44, 0x7c, 0x62, 0x56, 0xd0, 0x2a, 0x98, 0x64, 0x18, 0xf1, 0x4c, 0x9a, 0x55, 0xc6, 0x2c,
	0x9f, 0x38, 0xb3, 0x86, 0xd6, 0x00, 0x45, 0xe3, 0x0b, 0xf4, 0x25, 0xc6, 0x2e, 0x9f, 0x12, 0xd3,
	0x64, 0xba, 0xa5, 0xfd, 0x6f, 0x2e, 0x33, 0x66, 0x79, 0x2b, 0x9b, 0x88, 0xe9, 0x4e, 0x6c, 0x57,
	0x73, 0x85, 0xb1, 0xcb, 0x5b, 0xd2, 0x5c, 0x8d, 0x9c, 0xc8, 0x77, 0x90, 0x79, 0x89, 0x79, 0x47,
	0xdc, 0x0b, 0xe6, 0x1a, 0x53, 0x9b, 0xd8, 0x0b, 0xe6, 0xe5, 0x68, 0xdd, 0xbc, 0xc9, 0x30, 0x30,
	0xeb, 0x1f, 0xfc, 0xda, 0x08, 0x1f, 0x30, 0xe1, 0xa3, 0x1c, 0x20, 0xdf, 0xdc, 0x7f, 0xfc, 0xb0,
	0xb7, 0x63, 0x2e, 0x20, 0x13, 0x2a, 0xf4, 0x77, 0xab, 0x7d, 0xb7, 0xfb, 0x55, 0xdb, 0x36, 0x0d,
	0x54, 0x85, 0x52, 0x73, 0xff, 0xf1, 0xa3, 0xad, 0xee, 0x83, 0x76, 0xcb, 0xcc, 0x90, 0xd5, 0x6d,
	0xee, 0x3f, 0x8e, 0xba, 0xb3, 0x64, 0x39, 0x9a, 0xfb, 0x8f, 0x9b, 0x7b, 0x77, 0xef, 0xb6, 0x9b,
	0x0f, 0xba, 0xdd, 0xde, 0x9d, 0x70, 0x07, 0x84, 0x3c, 0x5b, 0x5f, 0xb7, 0x5b, 0x66, 0x8e, 0xb5,
	0xf7, 0xbe, 0x6a, 0xdb, 0xad, 0x87, 0x6d, 0x33, 0x4f, 0xb6, 0x18, 0xe9, 0xdf, 0xeb, 0xb5, 0xcd,
	0xc2, 0xb6, 0xf9, 0xf2, 0xd5, 0xba, 0xf1, 0x97, 0x57, 0xeb, 0xc6, 0x3f, 0x5e, 0xad, 0x1b, 0xdf,
	0xfc, 0x73, 0x7d, 0xe1, 0x49, 0x9e, 0xfe, 0x83, 0xf0, 0xe6, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0x9e, 0x80, 0x27, 0x4e, 0x38, 0x00, 0x00,
}
