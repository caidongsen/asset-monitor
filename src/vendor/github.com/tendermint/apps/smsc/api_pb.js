/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.smsc.Admin', null, global);
goog.exportSymbol('proto.smsc.Carrier', null, global);
goog.exportSymbol('proto.smsc.Checker', null, global);
goog.exportSymbol('proto.smsc.Event', null, global);
goog.exportSymbol('proto.smsc.EventCarry', null, global);
goog.exportSymbol('proto.smsc.EventCheck', null, global);
goog.exportSymbol('proto.smsc.EventCreateAccount', null, global);
goog.exportSymbol('proto.smsc.EventCreateOrder', null, global);
goog.exportSymbol('proto.smsc.EventDeleteAccount', null, global);
goog.exportSymbol('proto.smsc.EventDelivery', null, global);
goog.exportSymbol('proto.smsc.EventEditAccount', null, global);
goog.exportSymbol('proto.smsc.EventSetAdmin', null, global);
goog.exportSymbol('proto.smsc.EventSetSupplier', null, global);
goog.exportSymbol('proto.smsc.MessageType', null, global);
goog.exportSymbol('proto.smsc.Operate', null, global);
goog.exportSymbol('proto.smsc.Order', null, global);
goog.exportSymbol('proto.smsc.OrderState', null, global);
goog.exportSymbol('proto.smsc.Planner', null, global);
goog.exportSymbol('proto.smsc.Receipt', null, global);
goog.exportSymbol('proto.smsc.Request', null, global);
goog.exportSymbol('proto.smsc.RequestCarry', null, global);
goog.exportSymbol('proto.smsc.RequestCheck', null, global);
goog.exportSymbol('proto.smsc.RequestCreateAccount', null, global);
goog.exportSymbol('proto.smsc.RequestCreateOrder', null, global);
goog.exportSymbol('proto.smsc.RequestDeleteAccount', null, global);
goog.exportSymbol('proto.smsc.RequestDelivery', null, global);
goog.exportSymbol('proto.smsc.RequestEditAccount', null, global);
goog.exportSymbol('proto.smsc.RequestSetAdmin', null, global);
goog.exportSymbol('proto.smsc.RequestSetSupplier', null, global);
goog.exportSymbol('proto.smsc.Response', null, global);
goog.exportSymbol('proto.smsc.ResponseCarry', null, global);
goog.exportSymbol('proto.smsc.ResponseCheck', null, global);
goog.exportSymbol('proto.smsc.ResponseCreateAccount', null, global);
goog.exportSymbol('proto.smsc.ResponseCreateOrder', null, global);
goog.exportSymbol('proto.smsc.ResponseDeleteAccount', null, global);
goog.exportSymbol('proto.smsc.ResponseDelivery', null, global);
goog.exportSymbol('proto.smsc.ResponseEditAccount', null, global);
goog.exportSymbol('proto.smsc.ResponseException', null, global);
goog.exportSymbol('proto.smsc.ResponseOK', null, global);
goog.exportSymbol('proto.smsc.ResponseSetAdmin', null, global);
goog.exportSymbol('proto.smsc.ResponseSetSupplier', null, global);
goog.exportSymbol('proto.smsc.Role', null, global);
goog.exportSymbol('proto.smsc.Supplier', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Admin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.Admin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Admin.displayName = 'proto.smsc.Admin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Admin.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Admin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Admin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Admin.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Admin}
 */
proto.smsc.Admin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Admin;
  return proto.smsc.Admin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Admin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Admin}
 */
proto.smsc.Admin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Admin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Admin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Admin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Admin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Admin.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.Admin.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.Admin.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Admin.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Planner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smsc.Planner.repeatedFields_, null);
};
goog.inherits(proto.smsc.Planner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Planner.displayName = 'proto.smsc.Planner';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smsc.Planner.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Planner.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Planner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Planner} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Planner.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    supplierList: jspb.Message.getField(msg, 4),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Planner}
 */
proto.smsc.Planner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Planner;
  return proto.smsc.Planner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Planner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Planner}
 */
proto.smsc.Planner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setSupplierList(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Planner} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Planner.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Planner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Planner.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getSupplierList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.Planner.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.Planner.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.smsc.Planner.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.smsc.Planner.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.smsc.Planner.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.Planner.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated int64 supplier = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.smsc.Planner.prototype.getSupplierList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<number>} value */
proto.smsc.Planner.prototype.setSupplierList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.smsc.Planner.prototype.addSupplier = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.smsc.Planner.prototype.clearSupplierList = function() {
  this.setSupplierList([]);
};


/**
 * optional bytes pubkey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Planner.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes pubkey = 5;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.Planner.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.Planner.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Planner.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Supplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.Supplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Supplier.displayName = 'proto.smsc.Supplier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Supplier.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Supplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Supplier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Supplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    planner: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Supplier}
 */
proto.smsc.Supplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Supplier;
  return proto.smsc.Supplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Supplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Supplier}
 */
proto.smsc.Supplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlanner(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Supplier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Supplier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Supplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Supplier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPlanner();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.Supplier.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.Supplier.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.smsc.Supplier.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.smsc.Supplier.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.smsc.Supplier.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.Supplier.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 planner = 4;
 * @return {number}
 */
proto.smsc.Supplier.prototype.getPlanner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.smsc.Supplier.prototype.setPlanner = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes pubkey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Supplier.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes pubkey = 5;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.Supplier.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.Supplier.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Supplier.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Carrier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.Carrier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Carrier.displayName = 'proto.smsc.Carrier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Carrier.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Carrier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Carrier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Carrier.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Carrier}
 */
proto.smsc.Carrier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Carrier;
  return proto.smsc.Carrier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Carrier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Carrier}
 */
proto.smsc.Carrier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Carrier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Carrier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Carrier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Carrier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.Carrier.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.Carrier.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.smsc.Carrier.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.smsc.Carrier.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.smsc.Carrier.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.Carrier.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes pubkey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Carrier.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pubkey = 4;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.Carrier.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.Carrier.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Carrier.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Checker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.Checker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Checker.displayName = 'proto.smsc.Checker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Checker.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Checker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Checker} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Checker.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Checker}
 */
proto.smsc.Checker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Checker;
  return proto.smsc.Checker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Checker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Checker}
 */
proto.smsc.Checker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Checker} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Checker.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Checker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Checker.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.Checker.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.Checker.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.smsc.Checker.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.smsc.Checker.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.smsc.Checker.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.Checker.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes pubkey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Checker.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pubkey = 4;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.Checker.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.Checker.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Checker.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Order.displayName = 'proto.smsc.Order';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Order} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    boxid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    partnum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    info: jspb.Message.getFieldWithDefault(msg, 5, ""),
    carid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    requireddate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    deliverydate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    carrydate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    checkdate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    planner: jspb.Message.getFieldWithDefault(msg, 11, 0),
    supplier: jspb.Message.getFieldWithDefault(msg, 12, 0),
    carrier: jspb.Message.getFieldWithDefault(msg, 13, 0),
    checker: jspb.Message.getFieldWithDefault(msg, 14, 0),
    state: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Order}
 */
proto.smsc.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Order;
  return proto.smsc.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Order}
 */
proto.smsc.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequireddate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeliverydate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarrydate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckdate(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlanner(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSupplier(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCarrier(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChecker(value);
      break;
    case 15:
      var value = /** @type {!proto.smsc.OrderState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Order} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Order.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Order.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPartid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getBoxid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPartnum();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getInfo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getCarid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getRequireddate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getDeliverydate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getCarrydate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getCheckdate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getPlanner();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = this.getSupplier();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = this.getCarrier();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = this.getChecker();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.smsc.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string partId = 2;
 * @return {string}
 */
proto.smsc.Order.prototype.getPartid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setPartid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string boxId = 3;
 * @return {string}
 */
proto.smsc.Order.prototype.getBoxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setBoxid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 partNum = 4;
 * @return {number}
 */
proto.smsc.Order.prototype.getPartnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.smsc.Order.prototype.setPartnum = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string info = 5;
 * @return {string}
 */
proto.smsc.Order.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string carId = 6;
 * @return {string}
 */
proto.smsc.Order.prototype.getCarid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setCarid = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string requiredDate = 7;
 * @return {string}
 */
proto.smsc.Order.prototype.getRequireddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setRequireddate = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string deliveryDate = 8;
 * @return {string}
 */
proto.smsc.Order.prototype.getDeliverydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setDeliverydate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string carryDate = 9;
 * @return {string}
 */
proto.smsc.Order.prototype.getCarrydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setCarrydate = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string checkDate = 10;
 * @return {string}
 */
proto.smsc.Order.prototype.getCheckdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.smsc.Order.prototype.setCheckdate = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int64 planner = 11;
 * @return {number}
 */
proto.smsc.Order.prototype.getPlanner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.smsc.Order.prototype.setPlanner = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int64 supplier = 12;
 * @return {number}
 */
proto.smsc.Order.prototype.getSupplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.smsc.Order.prototype.setSupplier = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int64 carrier = 13;
 * @return {number}
 */
proto.smsc.Order.prototype.getCarrier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.smsc.Order.prototype.setCarrier = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int64 checker = 14;
 * @return {number}
 */
proto.smsc.Order.prototype.getChecker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.smsc.Order.prototype.setChecker = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional OrderState state = 15;
 * @return {!proto.smsc.OrderState}
 */
proto.smsc.Order.prototype.getState = function() {
  return /** @type {!proto.smsc.OrderState} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.smsc.OrderState} value */
proto.smsc.Order.prototype.setState = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.smsc.Request.oneofGroups_);
};
goog.inherits(proto.smsc.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Request.displayName = 'proto.smsc.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.smsc.Request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.smsc.Request.ValueCase = {
  VALUE_NOT_SET: 0,
  SETADMIN: 1,
  CREATEACCOUNT: 2,
  EDITACCOUNT: 3,
  DELETEACCOUNT: 4,
  SETSUPPLIER: 5,
  CREATEORDER: 6,
  DELIVERY: 7,
  CARRY: 8,
  CHECK: 9
};

/**
 * @return {proto.smsc.Request.ValueCase}
 */
proto.smsc.Request.prototype.getValueCase = function() {
  return /** @type {proto.smsc.Request.ValueCase} */(jspb.Message.computeOneofCase(this, proto.smsc.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    setadmin: (f = msg.getSetadmin()) && proto.smsc.RequestSetAdmin.toObject(includeInstance, f),
    createaccount: (f = msg.getCreateaccount()) && proto.smsc.RequestCreateAccount.toObject(includeInstance, f),
    editaccount: (f = msg.getEditaccount()) && proto.smsc.RequestEditAccount.toObject(includeInstance, f),
    deleteaccount: (f = msg.getDeleteaccount()) && proto.smsc.RequestDeleteAccount.toObject(includeInstance, f),
    setsupplier: (f = msg.getSetsupplier()) && proto.smsc.RequestSetSupplier.toObject(includeInstance, f),
    createorder: (f = msg.getCreateorder()) && proto.smsc.RequestCreateOrder.toObject(includeInstance, f),
    delivery: (f = msg.getDelivery()) && proto.smsc.RequestDelivery.toObject(includeInstance, f),
    carry: (f = msg.getCarry()) && proto.smsc.RequestCarry.toObject(includeInstance, f),
    check: (f = msg.getCheck()) && proto.smsc.RequestCheck.toObject(includeInstance, f),
    uid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    instructionid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    pubkey: msg.getPubkey_asB64(),
    sign: msg.getSign_asB64(),
    actionid: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Request}
 */
proto.smsc.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Request;
  return proto.smsc.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Request}
 */
proto.smsc.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smsc.RequestSetAdmin;
      reader.readMessage(value,proto.smsc.RequestSetAdmin.deserializeBinaryFromReader);
      msg.setSetadmin(value);
      break;
    case 2:
      var value = new proto.smsc.RequestCreateAccount;
      reader.readMessage(value,proto.smsc.RequestCreateAccount.deserializeBinaryFromReader);
      msg.setCreateaccount(value);
      break;
    case 3:
      var value = new proto.smsc.RequestEditAccount;
      reader.readMessage(value,proto.smsc.RequestEditAccount.deserializeBinaryFromReader);
      msg.setEditaccount(value);
      break;
    case 4:
      var value = new proto.smsc.RequestDeleteAccount;
      reader.readMessage(value,proto.smsc.RequestDeleteAccount.deserializeBinaryFromReader);
      msg.setDeleteaccount(value);
      break;
    case 5:
      var value = new proto.smsc.RequestSetSupplier;
      reader.readMessage(value,proto.smsc.RequestSetSupplier.deserializeBinaryFromReader);
      msg.setSetsupplier(value);
      break;
    case 6:
      var value = new proto.smsc.RequestCreateOrder;
      reader.readMessage(value,proto.smsc.RequestCreateOrder.deserializeBinaryFromReader);
      msg.setCreateorder(value);
      break;
    case 7:
      var value = new proto.smsc.RequestDelivery;
      reader.readMessage(value,proto.smsc.RequestDelivery.deserializeBinaryFromReader);
      msg.setDelivery(value);
      break;
    case 8:
      var value = new proto.smsc.RequestCarry;
      reader.readMessage(value,proto.smsc.RequestCarry.deserializeBinaryFromReader);
      msg.setCarry(value);
      break;
    case 9:
      var value = new proto.smsc.RequestCheck;
      reader.readMessage(value,proto.smsc.RequestCheck.deserializeBinaryFromReader);
      msg.setCheck(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    case 14:
      var value = /** @type {!proto.smsc.MessageType} */ (reader.readEnum());
      msg.setActionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSetadmin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.smsc.RequestSetAdmin.serializeBinaryToWriter
    );
  }
  f = this.getCreateaccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.RequestCreateAccount.serializeBinaryToWriter
    );
  }
  f = this.getEditaccount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smsc.RequestEditAccount.serializeBinaryToWriter
    );
  }
  f = this.getDeleteaccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.smsc.RequestDeleteAccount.serializeBinaryToWriter
    );
  }
  f = this.getSetsupplier();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.smsc.RequestSetSupplier.serializeBinaryToWriter
    );
  }
  f = this.getCreateorder();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.smsc.RequestCreateOrder.serializeBinaryToWriter
    );
  }
  f = this.getDelivery();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.smsc.RequestDelivery.serializeBinaryToWriter
    );
  }
  f = this.getCarry();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.smsc.RequestCarry.serializeBinaryToWriter
    );
  }
  f = this.getCheck();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.smsc.RequestCheck.serializeBinaryToWriter
    );
  }
  f = this.getUid();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = this.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getActionid();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * optional RequestSetAdmin setAdmin = 1;
 * @return {?proto.smsc.RequestSetAdmin}
 */
proto.smsc.Request.prototype.getSetadmin = function() {
  return /** @type{?proto.smsc.RequestSetAdmin} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestSetAdmin, 1));
};


/** @param {?proto.smsc.RequestSetAdmin|undefined} value */
proto.smsc.Request.prototype.setSetadmin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearSetadmin = function() {
  this.setSetadmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasSetadmin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestCreateAccount createAccount = 2;
 * @return {?proto.smsc.RequestCreateAccount}
 */
proto.smsc.Request.prototype.getCreateaccount = function() {
  return /** @type{?proto.smsc.RequestCreateAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestCreateAccount, 2));
};


/** @param {?proto.smsc.RequestCreateAccount|undefined} value */
proto.smsc.Request.prototype.setCreateaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearCreateaccount = function() {
  this.setCreateaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasCreateaccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestEditAccount editAccount = 3;
 * @return {?proto.smsc.RequestEditAccount}
 */
proto.smsc.Request.prototype.getEditaccount = function() {
  return /** @type{?proto.smsc.RequestEditAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestEditAccount, 3));
};


/** @param {?proto.smsc.RequestEditAccount|undefined} value */
proto.smsc.Request.prototype.setEditaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearEditaccount = function() {
  this.setEditaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasEditaccount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestDeleteAccount deleteAccount = 4;
 * @return {?proto.smsc.RequestDeleteAccount}
 */
proto.smsc.Request.prototype.getDeleteaccount = function() {
  return /** @type{?proto.smsc.RequestDeleteAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestDeleteAccount, 4));
};


/** @param {?proto.smsc.RequestDeleteAccount|undefined} value */
proto.smsc.Request.prototype.setDeleteaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearDeleteaccount = function() {
  this.setDeleteaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasDeleteaccount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestSetSupplier setSupplier = 5;
 * @return {?proto.smsc.RequestSetSupplier}
 */
proto.smsc.Request.prototype.getSetsupplier = function() {
  return /** @type{?proto.smsc.RequestSetSupplier} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestSetSupplier, 5));
};


/** @param {?proto.smsc.RequestSetSupplier|undefined} value */
proto.smsc.Request.prototype.setSetsupplier = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearSetsupplier = function() {
  this.setSetsupplier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasSetsupplier = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestCreateOrder createOrder = 6;
 * @return {?proto.smsc.RequestCreateOrder}
 */
proto.smsc.Request.prototype.getCreateorder = function() {
  return /** @type{?proto.smsc.RequestCreateOrder} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestCreateOrder, 6));
};


/** @param {?proto.smsc.RequestCreateOrder|undefined} value */
proto.smsc.Request.prototype.setCreateorder = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearCreateorder = function() {
  this.setCreateorder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasCreateorder = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestDelivery delivery = 7;
 * @return {?proto.smsc.RequestDelivery}
 */
proto.smsc.Request.prototype.getDelivery = function() {
  return /** @type{?proto.smsc.RequestDelivery} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestDelivery, 7));
};


/** @param {?proto.smsc.RequestDelivery|undefined} value */
proto.smsc.Request.prototype.setDelivery = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearDelivery = function() {
  this.setDelivery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasDelivery = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RequestCarry carry = 8;
 * @return {?proto.smsc.RequestCarry}
 */
proto.smsc.Request.prototype.getCarry = function() {
  return /** @type{?proto.smsc.RequestCarry} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestCarry, 8));
};


/** @param {?proto.smsc.RequestCarry|undefined} value */
proto.smsc.Request.prototype.setCarry = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearCarry = function() {
  this.setCarry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasCarry = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestCheck check = 9;
 * @return {?proto.smsc.RequestCheck}
 */
proto.smsc.Request.prototype.getCheck = function() {
  return /** @type{?proto.smsc.RequestCheck} */ (
    jspb.Message.getWrapperField(this, proto.smsc.RequestCheck, 9));
};


/** @param {?proto.smsc.RequestCheck|undefined} value */
proto.smsc.Request.prototype.setCheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.smsc.Request.oneofGroups_[0], value);
};


proto.smsc.Request.prototype.clearCheck = function() {
  this.setCheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Request.prototype.hasCheck = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 uid = 10;
 * @return {number}
 */
proto.smsc.Request.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.smsc.Request.prototype.setUid = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int64 instructionId = 11;
 * @return {number}
 */
proto.smsc.Request.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.smsc.Request.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bytes pubkey = 12;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Request.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes pubkey = 12;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.Request.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.Request.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Request.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes sign = 13;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Request.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes sign = 13;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.smsc.Request.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.smsc.Request.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Request.prototype.setSign = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional MessageType actionId = 14;
 * @return {!proto.smsc.MessageType}
 */
proto.smsc.Request.prototype.getActionid = function() {
  return /** @type {!proto.smsc.MessageType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.smsc.MessageType} value */
proto.smsc.Request.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestSetAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestSetAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestSetAdmin.displayName = 'proto.smsc.RequestSetAdmin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestSetAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestSetAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestSetAdmin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestSetAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestSetAdmin}
 */
proto.smsc.RequestSetAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestSetAdmin;
  return proto.smsc.RequestSetAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestSetAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestSetAdmin}
 */
proto.smsc.RequestSetAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestSetAdmin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestSetAdmin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestSetAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestSetAdmin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.RequestSetAdmin.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.RequestSetAdmin.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.RequestSetAdmin.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.RequestSetAdmin.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestCreateAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestCreateAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestCreateAccount.displayName = 'proto.smsc.RequestCreateAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestCreateAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestCreateAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestCreateAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestCreateAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pubkey: msg.getPubkey_asB64(),
    account: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    role: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestCreateAccount}
 */
proto.smsc.RequestCreateAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestCreateAccount;
  return proto.smsc.RequestCreateAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestCreateAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestCreateAccount}
 */
proto.smsc.RequestCreateAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {!proto.smsc.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestCreateAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCreateAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestCreateAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCreateAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.RequestCreateAccount.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.RequestCreateAccount.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.RequestCreateAccount.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pubkey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.RequestCreateAccount.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.RequestCreateAccount.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.RequestCreateAccount.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.smsc.RequestCreateAccount.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.RequestCreateAccount.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.smsc.RequestCreateAccount.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.smsc.RequestCreateAccount.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Role role = 5;
 * @return {!proto.smsc.Role}
 */
proto.smsc.RequestCreateAccount.prototype.getRole = function() {
  return /** @type {!proto.smsc.Role} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.smsc.Role} value */
proto.smsc.RequestCreateAccount.prototype.setRole = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestEditAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestEditAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestEditAccount.displayName = 'proto.smsc.RequestEditAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestEditAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestEditAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestEditAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestEditAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pubkey: msg.getPubkey_asB64(),
    account: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    role: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestEditAccount}
 */
proto.smsc.RequestEditAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestEditAccount;
  return proto.smsc.RequestEditAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestEditAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestEditAccount}
 */
proto.smsc.RequestEditAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {!proto.smsc.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestEditAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestEditAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestEditAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestEditAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.RequestEditAccount.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.RequestEditAccount.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.RequestEditAccount.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pubkey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.RequestEditAccount.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.RequestEditAccount.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.RequestEditAccount.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.smsc.RequestEditAccount.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.RequestEditAccount.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.smsc.RequestEditAccount.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.smsc.RequestEditAccount.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Role role = 5;
 * @return {!proto.smsc.Role}
 */
proto.smsc.RequestEditAccount.prototype.getRole = function() {
  return /** @type {!proto.smsc.Role} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.smsc.Role} value */
proto.smsc.RequestEditAccount.prototype.setRole = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestDeleteAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestDeleteAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestDeleteAccount.displayName = 'proto.smsc.RequestDeleteAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestDeleteAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestDeleteAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestDeleteAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestDeleteAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestDeleteAccount}
 */
proto.smsc.RequestDeleteAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestDeleteAccount;
  return proto.smsc.RequestDeleteAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestDeleteAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestDeleteAccount}
 */
proto.smsc.RequestDeleteAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.smsc.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestDeleteAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestDeleteAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestDeleteAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestDeleteAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.RequestDeleteAccount.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.RequestDeleteAccount.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Role role = 2;
 * @return {!proto.smsc.Role}
 */
proto.smsc.RequestDeleteAccount.prototype.getRole = function() {
  return /** @type {!proto.smsc.Role} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.smsc.Role} value */
proto.smsc.RequestDeleteAccount.prototype.setRole = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestSetSupplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestSetSupplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestSetSupplier.displayName = 'proto.smsc.RequestSetSupplier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestSetSupplier.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestSetSupplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestSetSupplier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestSetSupplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    plannerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    supplierid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    op: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestSetSupplier}
 */
proto.smsc.RequestSetSupplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestSetSupplier;
  return proto.smsc.RequestSetSupplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestSetSupplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestSetSupplier}
 */
proto.smsc.RequestSetSupplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlannerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSupplierid(value);
      break;
    case 3:
      var value = /** @type {!proto.smsc.Operate} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestSetSupplier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestSetSupplier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestSetSupplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestSetSupplier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlannerid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getSupplierid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 plannerId = 1;
 * @return {number}
 */
proto.smsc.RequestSetSupplier.prototype.getPlannerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.RequestSetSupplier.prototype.setPlannerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 supplierId = 2;
 * @return {number}
 */
proto.smsc.RequestSetSupplier.prototype.getSupplierid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.smsc.RequestSetSupplier.prototype.setSupplierid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Operate op = 3;
 * @return {!proto.smsc.Operate}
 */
proto.smsc.RequestSetSupplier.prototype.getOp = function() {
  return /** @type {!proto.smsc.Operate} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.smsc.Operate} value */
proto.smsc.RequestSetSupplier.prototype.setOp = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestCreateOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestCreateOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestCreateOrder.displayName = 'proto.smsc.RequestCreateOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestCreateOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestCreateOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestCreateOrder} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestCreateOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    supplier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boxid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    partnum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    requireddate: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestCreateOrder}
 */
proto.smsc.RequestCreateOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestCreateOrder;
  return proto.smsc.RequestCreateOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestCreateOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestCreateOrder}
 */
proto.smsc.RequestCreateOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSupplier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequireddate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestCreateOrder} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCreateOrder.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestCreateOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCreateOrder.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSupplier();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getPartid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getBoxid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPartnum();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getRequireddate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string orderId = 1;
 * @return {string}
 */
proto.smsc.RequestCreateOrder.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.RequestCreateOrder.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 supplier = 2;
 * @return {number}
 */
proto.smsc.RequestCreateOrder.prototype.getSupplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.smsc.RequestCreateOrder.prototype.setSupplier = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string partId = 3;
 * @return {string}
 */
proto.smsc.RequestCreateOrder.prototype.getPartid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.RequestCreateOrder.prototype.setPartid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string boxId = 4;
 * @return {string}
 */
proto.smsc.RequestCreateOrder.prototype.getBoxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.smsc.RequestCreateOrder.prototype.setBoxid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 partNum = 5;
 * @return {number}
 */
proto.smsc.RequestCreateOrder.prototype.getPartnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.smsc.RequestCreateOrder.prototype.setPartnum = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string requiredDate = 6;
 * @return {string}
 */
proto.smsc.RequestCreateOrder.prototype.getRequireddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.smsc.RequestCreateOrder.prototype.setRequireddate = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestDelivery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestDelivery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestDelivery.displayName = 'proto.smsc.RequestDelivery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestDelivery.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestDelivery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestDelivery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestDelivery.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    carrier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boxid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    partnum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    deliverydate: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestDelivery}
 */
proto.smsc.RequestDelivery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestDelivery;
  return proto.smsc.RequestDelivery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestDelivery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestDelivery}
 */
proto.smsc.RequestDelivery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCarrier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeliverydate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestDelivery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestDelivery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestDelivery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestDelivery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCarrier();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getPartid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getBoxid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPartnum();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getDeliverydate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string orderId = 1;
 * @return {string}
 */
proto.smsc.RequestDelivery.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.RequestDelivery.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 carrier = 2;
 * @return {number}
 */
proto.smsc.RequestDelivery.prototype.getCarrier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.smsc.RequestDelivery.prototype.setCarrier = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string partId = 3;
 * @return {string}
 */
proto.smsc.RequestDelivery.prototype.getPartid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.RequestDelivery.prototype.setPartid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string boxId = 4;
 * @return {string}
 */
proto.smsc.RequestDelivery.prototype.getBoxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.smsc.RequestDelivery.prototype.setBoxid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 partNum = 5;
 * @return {number}
 */
proto.smsc.RequestDelivery.prototype.getPartnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.smsc.RequestDelivery.prototype.setPartnum = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string deliveryDate = 6;
 * @return {string}
 */
proto.smsc.RequestDelivery.prototype.getDeliverydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.smsc.RequestDelivery.prototype.setDeliverydate = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestCarry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestCarry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestCarry.displayName = 'proto.smsc.RequestCarry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestCarry.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestCarry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestCarry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestCarry.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boxid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    carid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    carrydate: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestCarry}
 */
proto.smsc.RequestCarry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestCarry;
  return proto.smsc.RequestCarry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestCarry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestCarry}
 */
proto.smsc.RequestCarry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarrydate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestCarry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCarry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestCarry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCarry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBoxid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCarid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCarrydate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string orderId = 1;
 * @return {string}
 */
proto.smsc.RequestCarry.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.RequestCarry.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string boxId = 2;
 * @return {string}
 */
proto.smsc.RequestCarry.prototype.getBoxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.smsc.RequestCarry.prototype.setBoxid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string carId = 3;
 * @return {string}
 */
proto.smsc.RequestCarry.prototype.getCarid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.RequestCarry.prototype.setCarid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string carryDate = 4;
 * @return {string}
 */
proto.smsc.RequestCarry.prototype.getCarrydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.smsc.RequestCarry.prototype.setCarrydate = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.RequestCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.RequestCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.RequestCheck.displayName = 'proto.smsc.RequestCheck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.RequestCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.RequestCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.RequestCheck} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.RequestCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    op: jspb.Message.getFieldWithDefault(msg, 2, 0),
    checkdate: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.RequestCheck}
 */
proto.smsc.RequestCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.RequestCheck;
  return proto.smsc.RequestCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.RequestCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.RequestCheck}
 */
proto.smsc.RequestCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 2:
      var value = /** @type {!proto.smsc.Operate} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.RequestCheck} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCheck.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.RequestCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.RequestCheck.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getCheckdate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string orderId = 1;
 * @return {string}
 */
proto.smsc.RequestCheck.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.RequestCheck.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Operate op = 2;
 * @return {!proto.smsc.Operate}
 */
proto.smsc.RequestCheck.prototype.getOp = function() {
  return /** @type {!proto.smsc.Operate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.smsc.Operate} value */
proto.smsc.RequestCheck.prototype.setOp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string checkDate = 3;
 * @return {string}
 */
proto.smsc.RequestCheck.prototype.getCheckdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.smsc.RequestCheck.prototype.setCheckdate = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.smsc.Response.oneofGroups_);
};
goog.inherits(proto.smsc.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Response.displayName = 'proto.smsc.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.smsc.Response.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.smsc.Response.ValueCase = {
  VALUE_NOT_SET: 0,
  SETADMIN: 1,
  CREATEACCOUNT: 2,
  EDITACCOUNT: 3,
  DELETEACCOUNT: 4,
  SETSUPPLIER: 5,
  CREATEORDER: 6,
  DELIVERY: 7,
  CARRY: 8,
  CHECK: 9,
  OK: 10,
  EXCEPTION: 11
};

/**
 * @return {proto.smsc.Response.ValueCase}
 */
proto.smsc.Response.prototype.getValueCase = function() {
  return /** @type {proto.smsc.Response.ValueCase} */(jspb.Message.computeOneofCase(this, proto.smsc.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    setadmin: (f = msg.getSetadmin()) && proto.smsc.ResponseSetAdmin.toObject(includeInstance, f),
    createaccount: (f = msg.getCreateaccount()) && proto.smsc.ResponseCreateAccount.toObject(includeInstance, f),
    editaccount: (f = msg.getEditaccount()) && proto.smsc.ResponseEditAccount.toObject(includeInstance, f),
    deleteaccount: (f = msg.getDeleteaccount()) && proto.smsc.ResponseDeleteAccount.toObject(includeInstance, f),
    setsupplier: (f = msg.getSetsupplier()) && proto.smsc.ResponseSetSupplier.toObject(includeInstance, f),
    createorder: (f = msg.getCreateorder()) && proto.smsc.ResponseCreateOrder.toObject(includeInstance, f),
    delivery: (f = msg.getDelivery()) && proto.smsc.ResponseDelivery.toObject(includeInstance, f),
    carry: (f = msg.getCarry()) && proto.smsc.ResponseCarry.toObject(includeInstance, f),
    check: (f = msg.getCheck()) && proto.smsc.ResponseCheck.toObject(includeInstance, f),
    ok: (f = msg.getOk()) && proto.smsc.ResponseOK.toObject(includeInstance, f),
    exception: (f = msg.getException()) && proto.smsc.ResponseException.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Response}
 */
proto.smsc.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Response;
  return proto.smsc.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Response}
 */
proto.smsc.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smsc.ResponseSetAdmin;
      reader.readMessage(value,proto.smsc.ResponseSetAdmin.deserializeBinaryFromReader);
      msg.setSetadmin(value);
      break;
    case 2:
      var value = new proto.smsc.ResponseCreateAccount;
      reader.readMessage(value,proto.smsc.ResponseCreateAccount.deserializeBinaryFromReader);
      msg.setCreateaccount(value);
      break;
    case 3:
      var value = new proto.smsc.ResponseEditAccount;
      reader.readMessage(value,proto.smsc.ResponseEditAccount.deserializeBinaryFromReader);
      msg.setEditaccount(value);
      break;
    case 4:
      var value = new proto.smsc.ResponseDeleteAccount;
      reader.readMessage(value,proto.smsc.ResponseDeleteAccount.deserializeBinaryFromReader);
      msg.setDeleteaccount(value);
      break;
    case 5:
      var value = new proto.smsc.ResponseSetSupplier;
      reader.readMessage(value,proto.smsc.ResponseSetSupplier.deserializeBinaryFromReader);
      msg.setSetsupplier(value);
      break;
    case 6:
      var value = new proto.smsc.ResponseCreateOrder;
      reader.readMessage(value,proto.smsc.ResponseCreateOrder.deserializeBinaryFromReader);
      msg.setCreateorder(value);
      break;
    case 7:
      var value = new proto.smsc.ResponseDelivery;
      reader.readMessage(value,proto.smsc.ResponseDelivery.deserializeBinaryFromReader);
      msg.setDelivery(value);
      break;
    case 8:
      var value = new proto.smsc.ResponseCarry;
      reader.readMessage(value,proto.smsc.ResponseCarry.deserializeBinaryFromReader);
      msg.setCarry(value);
      break;
    case 9:
      var value = new proto.smsc.ResponseCheck;
      reader.readMessage(value,proto.smsc.ResponseCheck.deserializeBinaryFromReader);
      msg.setCheck(value);
      break;
    case 10:
      var value = new proto.smsc.ResponseOK;
      reader.readMessage(value,proto.smsc.ResponseOK.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 11:
      var value = new proto.smsc.ResponseException;
      reader.readMessage(value,proto.smsc.ResponseException.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSetadmin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.smsc.ResponseSetAdmin.serializeBinaryToWriter
    );
  }
  f = this.getCreateaccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.ResponseCreateAccount.serializeBinaryToWriter
    );
  }
  f = this.getEditaccount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smsc.ResponseEditAccount.serializeBinaryToWriter
    );
  }
  f = this.getDeleteaccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.smsc.ResponseDeleteAccount.serializeBinaryToWriter
    );
  }
  f = this.getSetsupplier();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.smsc.ResponseSetSupplier.serializeBinaryToWriter
    );
  }
  f = this.getCreateorder();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.smsc.ResponseCreateOrder.serializeBinaryToWriter
    );
  }
  f = this.getDelivery();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.smsc.ResponseDelivery.serializeBinaryToWriter
    );
  }
  f = this.getCarry();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.smsc.ResponseCarry.serializeBinaryToWriter
    );
  }
  f = this.getCheck();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.smsc.ResponseCheck.serializeBinaryToWriter
    );
  }
  f = this.getOk();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.smsc.ResponseOK.serializeBinaryToWriter
    );
  }
  f = this.getException();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.smsc.ResponseException.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseSetAdmin setAdmin = 1;
 * @return {?proto.smsc.ResponseSetAdmin}
 */
proto.smsc.Response.prototype.getSetadmin = function() {
  return /** @type{?proto.smsc.ResponseSetAdmin} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseSetAdmin, 1));
};


/** @param {?proto.smsc.ResponseSetAdmin|undefined} value */
proto.smsc.Response.prototype.setSetadmin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearSetadmin = function() {
  this.setSetadmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasSetadmin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseCreateAccount createAccount = 2;
 * @return {?proto.smsc.ResponseCreateAccount}
 */
proto.smsc.Response.prototype.getCreateaccount = function() {
  return /** @type{?proto.smsc.ResponseCreateAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseCreateAccount, 2));
};


/** @param {?proto.smsc.ResponseCreateAccount|undefined} value */
proto.smsc.Response.prototype.setCreateaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearCreateaccount = function() {
  this.setCreateaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasCreateaccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseEditAccount editAccount = 3;
 * @return {?proto.smsc.ResponseEditAccount}
 */
proto.smsc.Response.prototype.getEditaccount = function() {
  return /** @type{?proto.smsc.ResponseEditAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseEditAccount, 3));
};


/** @param {?proto.smsc.ResponseEditAccount|undefined} value */
proto.smsc.Response.prototype.setEditaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearEditaccount = function() {
  this.setEditaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasEditaccount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseDeleteAccount deleteAccount = 4;
 * @return {?proto.smsc.ResponseDeleteAccount}
 */
proto.smsc.Response.prototype.getDeleteaccount = function() {
  return /** @type{?proto.smsc.ResponseDeleteAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseDeleteAccount, 4));
};


/** @param {?proto.smsc.ResponseDeleteAccount|undefined} value */
proto.smsc.Response.prototype.setDeleteaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearDeleteaccount = function() {
  this.setDeleteaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasDeleteaccount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResponseSetSupplier setSupplier = 5;
 * @return {?proto.smsc.ResponseSetSupplier}
 */
proto.smsc.Response.prototype.getSetsupplier = function() {
  return /** @type{?proto.smsc.ResponseSetSupplier} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseSetSupplier, 5));
};


/** @param {?proto.smsc.ResponseSetSupplier|undefined} value */
proto.smsc.Response.prototype.setSetsupplier = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearSetsupplier = function() {
  this.setSetsupplier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasSetsupplier = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResponseCreateOrder createOrder = 6;
 * @return {?proto.smsc.ResponseCreateOrder}
 */
proto.smsc.Response.prototype.getCreateorder = function() {
  return /** @type{?proto.smsc.ResponseCreateOrder} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseCreateOrder, 6));
};


/** @param {?proto.smsc.ResponseCreateOrder|undefined} value */
proto.smsc.Response.prototype.setCreateorder = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearCreateorder = function() {
  this.setCreateorder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasCreateorder = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ResponseDelivery delivery = 7;
 * @return {?proto.smsc.ResponseDelivery}
 */
proto.smsc.Response.prototype.getDelivery = function() {
  return /** @type{?proto.smsc.ResponseDelivery} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseDelivery, 7));
};


/** @param {?proto.smsc.ResponseDelivery|undefined} value */
proto.smsc.Response.prototype.setDelivery = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearDelivery = function() {
  this.setDelivery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasDelivery = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ResponseCarry carry = 8;
 * @return {?proto.smsc.ResponseCarry}
 */
proto.smsc.Response.prototype.getCarry = function() {
  return /** @type{?proto.smsc.ResponseCarry} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseCarry, 8));
};


/** @param {?proto.smsc.ResponseCarry|undefined} value */
proto.smsc.Response.prototype.setCarry = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearCarry = function() {
  this.setCarry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasCarry = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ResponseCheck check = 9;
 * @return {?proto.smsc.ResponseCheck}
 */
proto.smsc.Response.prototype.getCheck = function() {
  return /** @type{?proto.smsc.ResponseCheck} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseCheck, 9));
};


/** @param {?proto.smsc.ResponseCheck|undefined} value */
proto.smsc.Response.prototype.setCheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearCheck = function() {
  this.setCheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasCheck = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ResponseOK ok = 10;
 * @return {?proto.smsc.ResponseOK}
 */
proto.smsc.Response.prototype.getOk = function() {
  return /** @type{?proto.smsc.ResponseOK} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseOK, 10));
};


/** @param {?proto.smsc.ResponseOK|undefined} value */
proto.smsc.Response.prototype.setOk = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearOk = function() {
  this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasOk = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ResponseException exception = 11;
 * @return {?proto.smsc.ResponseException}
 */
proto.smsc.Response.prototype.getException = function() {
  return /** @type{?proto.smsc.ResponseException} */ (
    jspb.Message.getWrapperField(this, proto.smsc.ResponseException, 11));
};


/** @param {?proto.smsc.ResponseException|undefined} value */
proto.smsc.Response.prototype.setException = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.smsc.Response.oneofGroups_[0], value);
};


proto.smsc.Response.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Response.prototype.hasException = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseException = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseException, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseException.displayName = 'proto.smsc.ResponseException';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseException.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseException.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseException} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseException.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseException}
 */
proto.smsc.ResponseException.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseException;
  return proto.smsc.ResponseException.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseException} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseException}
 */
proto.smsc.ResponseException.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseException} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseException.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseException.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseException.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.smsc.ResponseException.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.ResponseException.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseOK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseOK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseOK.displayName = 'proto.smsc.ResponseOK';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseOK.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseOK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseOK} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseOK.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseOK}
 */
proto.smsc.ResponseOK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseOK;
  return proto.smsc.ResponseOK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseOK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseOK}
 */
proto.smsc.ResponseOK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseOK} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseOK.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseOK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseOK.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.smsc.ResponseOK.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.smsc.ResponseOK.prototype.setOk = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Receipt.displayName = 'proto.smsc.Receipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Receipt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    isok: jspb.Message.getFieldWithDefault(msg, 1, false),
    err: msg.getErr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Receipt}
 */
proto.smsc.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Receipt;
  return proto.smsc.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Receipt}
 */
proto.smsc.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Receipt.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Receipt.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIsok();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getErr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bool isOk = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.smsc.Receipt.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.smsc.Receipt.prototype.setIsok = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes err = 2;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.Receipt.prototype.getErr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err = 2;
 * This is a type-conversion wrapper around `getErr()`
 * @return {string}
 */
proto.smsc.Receipt.prototype.getErr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErr()));
};


/**
 * optional bytes err = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErr()`
 * @return {!Uint8Array}
 */
proto.smsc.Receipt.prototype.getErr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErr()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.Receipt.prototype.setErr = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseSetAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseSetAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseSetAdmin.displayName = 'proto.smsc.ResponseSetAdmin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseSetAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseSetAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseSetAdmin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseSetAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseSetAdmin}
 */
proto.smsc.ResponseSetAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseSetAdmin;
  return proto.smsc.ResponseSetAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseSetAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseSetAdmin}
 */
proto.smsc.ResponseSetAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseSetAdmin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseSetAdmin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseSetAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseSetAdmin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseSetAdmin.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseSetAdmin.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseSetAdmin.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseSetAdmin.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseSetAdmin.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseSetAdmin.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseCreateAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseCreateAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseCreateAccount.displayName = 'proto.smsc.ResponseCreateAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseCreateAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseCreateAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseCreateAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseCreateAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseCreateAccount}
 */
proto.smsc.ResponseCreateAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseCreateAccount;
  return proto.smsc.ResponseCreateAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseCreateAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseCreateAccount}
 */
proto.smsc.ResponseCreateAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseCreateAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCreateAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseCreateAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCreateAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseCreateAccount.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseCreateAccount.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseCreateAccount.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseCreateAccount.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseCreateAccount.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseCreateAccount.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseEditAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseEditAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseEditAccount.displayName = 'proto.smsc.ResponseEditAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseEditAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseEditAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseEditAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseEditAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseEditAccount}
 */
proto.smsc.ResponseEditAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseEditAccount;
  return proto.smsc.ResponseEditAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseEditAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseEditAccount}
 */
proto.smsc.ResponseEditAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseEditAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseEditAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseEditAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseEditAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseEditAccount.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseEditAccount.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseEditAccount.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseEditAccount.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseEditAccount.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseEditAccount.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseDeleteAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseDeleteAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseDeleteAccount.displayName = 'proto.smsc.ResponseDeleteAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseDeleteAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseDeleteAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseDeleteAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseDeleteAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseDeleteAccount}
 */
proto.smsc.ResponseDeleteAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseDeleteAccount;
  return proto.smsc.ResponseDeleteAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseDeleteAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseDeleteAccount}
 */
proto.smsc.ResponseDeleteAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseDeleteAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseDeleteAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseDeleteAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseDeleteAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseDeleteAccount.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseDeleteAccount.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseDeleteAccount.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseDeleteAccount.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseDeleteAccount.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseDeleteAccount.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseSetSupplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseSetSupplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseSetSupplier.displayName = 'proto.smsc.ResponseSetSupplier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseSetSupplier.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseSetSupplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseSetSupplier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseSetSupplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseSetSupplier}
 */
proto.smsc.ResponseSetSupplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseSetSupplier;
  return proto.smsc.ResponseSetSupplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseSetSupplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseSetSupplier}
 */
proto.smsc.ResponseSetSupplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseSetSupplier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseSetSupplier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseSetSupplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseSetSupplier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseSetSupplier.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseSetSupplier.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseSetSupplier.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseSetSupplier.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseSetSupplier.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseSetSupplier.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseCreateOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseCreateOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseCreateOrder.displayName = 'proto.smsc.ResponseCreateOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseCreateOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseCreateOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseCreateOrder} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseCreateOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseCreateOrder}
 */
proto.smsc.ResponseCreateOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseCreateOrder;
  return proto.smsc.ResponseCreateOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseCreateOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseCreateOrder}
 */
proto.smsc.ResponseCreateOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseCreateOrder} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCreateOrder.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseCreateOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCreateOrder.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseCreateOrder.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseCreateOrder.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseCreateOrder.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseCreateOrder.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseCreateOrder.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseCreateOrder.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseDelivery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseDelivery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseDelivery.displayName = 'proto.smsc.ResponseDelivery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseDelivery.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseDelivery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseDelivery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseDelivery.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseDelivery}
 */
proto.smsc.ResponseDelivery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseDelivery;
  return proto.smsc.ResponseDelivery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseDelivery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseDelivery}
 */
proto.smsc.ResponseDelivery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseDelivery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseDelivery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseDelivery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseDelivery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseDelivery.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseDelivery.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseDelivery.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseDelivery.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseDelivery.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseDelivery.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseCarry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseCarry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseCarry.displayName = 'proto.smsc.ResponseCarry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseCarry.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseCarry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseCarry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseCarry.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseCarry}
 */
proto.smsc.ResponseCarry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseCarry;
  return proto.smsc.ResponseCarry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseCarry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseCarry}
 */
proto.smsc.ResponseCarry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseCarry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCarry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseCarry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCarry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseCarry.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseCarry.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseCarry.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseCarry.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseCarry.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseCarry.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.ResponseCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.ResponseCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.ResponseCheck.displayName = 'proto.smsc.ResponseCheck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.ResponseCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.ResponseCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.ResponseCheck} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.ResponseCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.smsc.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.ResponseCheck}
 */
proto.smsc.ResponseCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.ResponseCheck;
  return proto.smsc.ResponseCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.ResponseCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.ResponseCheck}
 */
proto.smsc.ResponseCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.smsc.Event;
      reader.readMessage(value,proto.smsc.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.ResponseCheck} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCheck.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.ResponseCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.ResponseCheck.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.smsc.ResponseCheck.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.ResponseCheck.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.smsc.Event}
 */
proto.smsc.ResponseCheck.prototype.getEvent = function() {
  return /** @type{?proto.smsc.Event} */ (
    jspb.Message.getWrapperField(this, proto.smsc.Event, 2));
};


/** @param {?proto.smsc.Event|undefined} value */
proto.smsc.ResponseCheck.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.smsc.ResponseCheck.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.ResponseCheck.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.smsc.Event.oneofGroups_);
};
goog.inherits(proto.smsc.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.Event.displayName = 'proto.smsc.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.smsc.Event.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.smsc.Event.ValueCase = {
  VALUE_NOT_SET: 0,
  SETADMIN: 1,
  CREATEACCOUNT: 2,
  EDITACCOUNT: 3,
  DELETEACCOUNT: 4,
  SETSUPPLIER: 5,
  CREATEORDER: 6,
  DELIVERY: 7,
  CARRY: 8,
  CHECK: 9
};

/**
 * @return {proto.smsc.Event.ValueCase}
 */
proto.smsc.Event.prototype.getValueCase = function() {
  return /** @type {proto.smsc.Event.ValueCase} */(jspb.Message.computeOneofCase(this, proto.smsc.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.Event} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    setadmin: (f = msg.getSetadmin()) && proto.smsc.EventSetAdmin.toObject(includeInstance, f),
    createaccount: (f = msg.getCreateaccount()) && proto.smsc.EventCreateAccount.toObject(includeInstance, f),
    editaccount: (f = msg.getEditaccount()) && proto.smsc.EventEditAccount.toObject(includeInstance, f),
    deleteaccount: (f = msg.getDeleteaccount()) && proto.smsc.EventDeleteAccount.toObject(includeInstance, f),
    setsupplier: (f = msg.getSetsupplier()) && proto.smsc.EventSetSupplier.toObject(includeInstance, f),
    createorder: (f = msg.getCreateorder()) && proto.smsc.EventCreateOrder.toObject(includeInstance, f),
    delivery: (f = msg.getDelivery()) && proto.smsc.EventDelivery.toObject(includeInstance, f),
    carry: (f = msg.getCarry()) && proto.smsc.EventCarry.toObject(includeInstance, f),
    check: (f = msg.getCheck()) && proto.smsc.EventCheck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.Event}
 */
proto.smsc.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.Event;
  return proto.smsc.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.Event}
 */
proto.smsc.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smsc.EventSetAdmin;
      reader.readMessage(value,proto.smsc.EventSetAdmin.deserializeBinaryFromReader);
      msg.setSetadmin(value);
      break;
    case 2:
      var value = new proto.smsc.EventCreateAccount;
      reader.readMessage(value,proto.smsc.EventCreateAccount.deserializeBinaryFromReader);
      msg.setCreateaccount(value);
      break;
    case 3:
      var value = new proto.smsc.EventEditAccount;
      reader.readMessage(value,proto.smsc.EventEditAccount.deserializeBinaryFromReader);
      msg.setEditaccount(value);
      break;
    case 4:
      var value = new proto.smsc.EventDeleteAccount;
      reader.readMessage(value,proto.smsc.EventDeleteAccount.deserializeBinaryFromReader);
      msg.setDeleteaccount(value);
      break;
    case 5:
      var value = new proto.smsc.EventSetSupplier;
      reader.readMessage(value,proto.smsc.EventSetSupplier.deserializeBinaryFromReader);
      msg.setSetsupplier(value);
      break;
    case 6:
      var value = new proto.smsc.EventCreateOrder;
      reader.readMessage(value,proto.smsc.EventCreateOrder.deserializeBinaryFromReader);
      msg.setCreateorder(value);
      break;
    case 7:
      var value = new proto.smsc.EventDelivery;
      reader.readMessage(value,proto.smsc.EventDelivery.deserializeBinaryFromReader);
      msg.setDelivery(value);
      break;
    case 8:
      var value = new proto.smsc.EventCarry;
      reader.readMessage(value,proto.smsc.EventCarry.deserializeBinaryFromReader);
      msg.setCarry(value);
      break;
    case 9:
      var value = new proto.smsc.EventCheck;
      reader.readMessage(value,proto.smsc.EventCheck.deserializeBinaryFromReader);
      msg.setCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.Event} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Event.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.Event.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSetadmin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.smsc.EventSetAdmin.serializeBinaryToWriter
    );
  }
  f = this.getCreateaccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smsc.EventCreateAccount.serializeBinaryToWriter
    );
  }
  f = this.getEditaccount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smsc.EventEditAccount.serializeBinaryToWriter
    );
  }
  f = this.getDeleteaccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.smsc.EventDeleteAccount.serializeBinaryToWriter
    );
  }
  f = this.getSetsupplier();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.smsc.EventSetSupplier.serializeBinaryToWriter
    );
  }
  f = this.getCreateorder();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.smsc.EventCreateOrder.serializeBinaryToWriter
    );
  }
  f = this.getDelivery();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.smsc.EventDelivery.serializeBinaryToWriter
    );
  }
  f = this.getCarry();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.smsc.EventCarry.serializeBinaryToWriter
    );
  }
  f = this.getCheck();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.smsc.EventCheck.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventSetAdmin setAdmin = 1;
 * @return {?proto.smsc.EventSetAdmin}
 */
proto.smsc.Event.prototype.getSetadmin = function() {
  return /** @type{?proto.smsc.EventSetAdmin} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventSetAdmin, 1));
};


/** @param {?proto.smsc.EventSetAdmin|undefined} value */
proto.smsc.Event.prototype.setSetadmin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearSetadmin = function() {
  this.setSetadmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasSetadmin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventCreateAccount createAccount = 2;
 * @return {?proto.smsc.EventCreateAccount}
 */
proto.smsc.Event.prototype.getCreateaccount = function() {
  return /** @type{?proto.smsc.EventCreateAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventCreateAccount, 2));
};


/** @param {?proto.smsc.EventCreateAccount|undefined} value */
proto.smsc.Event.prototype.setCreateaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearCreateaccount = function() {
  this.setCreateaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasCreateaccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventEditAccount editAccount = 3;
 * @return {?proto.smsc.EventEditAccount}
 */
proto.smsc.Event.prototype.getEditaccount = function() {
  return /** @type{?proto.smsc.EventEditAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventEditAccount, 3));
};


/** @param {?proto.smsc.EventEditAccount|undefined} value */
proto.smsc.Event.prototype.setEditaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearEditaccount = function() {
  this.setEditaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasEditaccount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventDeleteAccount deleteAccount = 4;
 * @return {?proto.smsc.EventDeleteAccount}
 */
proto.smsc.Event.prototype.getDeleteaccount = function() {
  return /** @type{?proto.smsc.EventDeleteAccount} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventDeleteAccount, 4));
};


/** @param {?proto.smsc.EventDeleteAccount|undefined} value */
proto.smsc.Event.prototype.setDeleteaccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearDeleteaccount = function() {
  this.setDeleteaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasDeleteaccount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EventSetSupplier setSupplier = 5;
 * @return {?proto.smsc.EventSetSupplier}
 */
proto.smsc.Event.prototype.getSetsupplier = function() {
  return /** @type{?proto.smsc.EventSetSupplier} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventSetSupplier, 5));
};


/** @param {?proto.smsc.EventSetSupplier|undefined} value */
proto.smsc.Event.prototype.setSetsupplier = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearSetsupplier = function() {
  this.setSetsupplier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasSetsupplier = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventCreateOrder createOrder = 6;
 * @return {?proto.smsc.EventCreateOrder}
 */
proto.smsc.Event.prototype.getCreateorder = function() {
  return /** @type{?proto.smsc.EventCreateOrder} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventCreateOrder, 6));
};


/** @param {?proto.smsc.EventCreateOrder|undefined} value */
proto.smsc.Event.prototype.setCreateorder = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearCreateorder = function() {
  this.setCreateorder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasCreateorder = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventDelivery delivery = 7;
 * @return {?proto.smsc.EventDelivery}
 */
proto.smsc.Event.prototype.getDelivery = function() {
  return /** @type{?proto.smsc.EventDelivery} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventDelivery, 7));
};


/** @param {?proto.smsc.EventDelivery|undefined} value */
proto.smsc.Event.prototype.setDelivery = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearDelivery = function() {
  this.setDelivery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasDelivery = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventCarry carry = 8;
 * @return {?proto.smsc.EventCarry}
 */
proto.smsc.Event.prototype.getCarry = function() {
  return /** @type{?proto.smsc.EventCarry} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventCarry, 8));
};


/** @param {?proto.smsc.EventCarry|undefined} value */
proto.smsc.Event.prototype.setCarry = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearCarry = function() {
  this.setCarry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasCarry = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EventCheck check = 9;
 * @return {?proto.smsc.EventCheck}
 */
proto.smsc.Event.prototype.getCheck = function() {
  return /** @type{?proto.smsc.EventCheck} */ (
    jspb.Message.getWrapperField(this, proto.smsc.EventCheck, 9));
};


/** @param {?proto.smsc.EventCheck|undefined} value */
proto.smsc.Event.prototype.setCheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.smsc.Event.oneofGroups_[0], value);
};


proto.smsc.Event.prototype.clearCheck = function() {
  this.setCheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.smsc.Event.prototype.hasCheck = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventSetAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventSetAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventSetAdmin.displayName = 'proto.smsc.EventSetAdmin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventSetAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventSetAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventSetAdmin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventSetAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventSetAdmin}
 */
proto.smsc.EventSetAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventSetAdmin;
  return proto.smsc.EventSetAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventSetAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventSetAdmin}
 */
proto.smsc.EventSetAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventSetAdmin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventSetAdmin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventSetAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventSetAdmin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.EventSetAdmin.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.smsc.EventSetAdmin.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.EventSetAdmin.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.EventSetAdmin.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventCreateAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventCreateAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventCreateAccount.displayName = 'proto.smsc.EventCreateAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventCreateAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventCreateAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventCreateAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventCreateAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventCreateAccount}
 */
proto.smsc.EventCreateAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventCreateAccount;
  return proto.smsc.EventCreateAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventCreateAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventCreateAccount}
 */
proto.smsc.EventCreateAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventCreateAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCreateAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventCreateAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCreateAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.EventCreateAccount.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.EventCreateAccount.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventEditAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventEditAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventEditAccount.displayName = 'proto.smsc.EventEditAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventEditAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventEditAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventEditAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventEditAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    newpubkey: msg.getNewpubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventEditAccount}
 */
proto.smsc.EventEditAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventEditAccount;
  return proto.smsc.EventEditAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventEditAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventEditAccount}
 */
proto.smsc.EventEditAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewpubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventEditAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventEditAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventEditAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventEditAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewpubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes newPubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.smsc.EventEditAccount.prototype.getNewpubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes newPubkey = 1;
 * This is a type-conversion wrapper around `getNewpubkey()`
 * @return {string}
 */
proto.smsc.EventEditAccount.prototype.getNewpubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewpubkey()));
};


/**
 * optional bytes newPubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewpubkey()`
 * @return {!Uint8Array}
 */
proto.smsc.EventEditAccount.prototype.getNewpubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewpubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.smsc.EventEditAccount.prototype.setNewpubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventDeleteAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventDeleteAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventDeleteAccount.displayName = 'proto.smsc.EventDeleteAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventDeleteAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventDeleteAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventDeleteAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventDeleteAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventDeleteAccount}
 */
proto.smsc.EventDeleteAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventDeleteAccount;
  return proto.smsc.EventDeleteAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventDeleteAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventDeleteAccount}
 */
proto.smsc.EventDeleteAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventDeleteAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventDeleteAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventDeleteAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventDeleteAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.smsc.EventDeleteAccount.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.EventDeleteAccount.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventSetSupplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventSetSupplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventSetSupplier.displayName = 'proto.smsc.EventSetSupplier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventSetSupplier.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventSetSupplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventSetSupplier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventSetSupplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventSetSupplier}
 */
proto.smsc.EventSetSupplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventSetSupplier;
  return proto.smsc.EventSetSupplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventSetSupplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventSetSupplier}
 */
proto.smsc.EventSetSupplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.smsc.Operate} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventSetSupplier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventSetSupplier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventSetSupplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventSetSupplier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Operate op = 1;
 * @return {!proto.smsc.Operate}
 */
proto.smsc.EventSetSupplier.prototype.getOp = function() {
  return /** @type {!proto.smsc.Operate} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.smsc.Operate} value */
proto.smsc.EventSetSupplier.prototype.setOp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventCreateOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventCreateOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventCreateOrder.displayName = 'proto.smsc.EventCreateOrder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventCreateOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventCreateOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventCreateOrder} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventCreateOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventCreateOrder}
 */
proto.smsc.EventCreateOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventCreateOrder;
  return proto.smsc.EventCreateOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventCreateOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventCreateOrder}
 */
proto.smsc.EventCreateOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventCreateOrder} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCreateOrder.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventCreateOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCreateOrder.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.smsc.EventCreateOrder.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.EventCreateOrder.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventDelivery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventDelivery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventDelivery.displayName = 'proto.smsc.EventDelivery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventDelivery.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventDelivery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventDelivery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventDelivery.toObject = function(includeInstance, msg) {
  var f, obj = {
    carrier: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventDelivery}
 */
proto.smsc.EventDelivery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventDelivery;
  return proto.smsc.EventDelivery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventDelivery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventDelivery}
 */
proto.smsc.EventDelivery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCarrier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventDelivery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventDelivery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventDelivery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventDelivery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCarrier();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 carrier = 1;
 * @return {number}
 */
proto.smsc.EventDelivery.prototype.getCarrier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.smsc.EventDelivery.prototype.setCarrier = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventCarry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventCarry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventCarry.displayName = 'proto.smsc.EventCarry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventCarry.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventCarry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventCarry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventCarry.toObject = function(includeInstance, msg) {
  var f, obj = {
    carid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventCarry}
 */
proto.smsc.EventCarry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventCarry;
  return proto.smsc.EventCarry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventCarry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventCarry}
 */
proto.smsc.EventCarry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventCarry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCarry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventCarry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCarry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCarid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string carId = 1;
 * @return {string}
 */
proto.smsc.EventCarry.prototype.getCarid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.EventCarry.prototype.setCarid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smsc.EventCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smsc.EventCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.smsc.EventCheck.displayName = 'proto.smsc.EventCheck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smsc.EventCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.smsc.EventCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smsc.EventCheck} msg The msg instance to transform.
 * @return {!Object}
 */
proto.smsc.EventCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smsc.EventCheck}
 */
proto.smsc.EventCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smsc.EventCheck;
  return proto.smsc.EventCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smsc.EventCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smsc.EventCheck}
 */
proto.smsc.EventCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.smsc.EventCheck} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCheck.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smsc.EventCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.smsc.EventCheck.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string orderId = 1;
 * @return {string}
 */
proto.smsc.EventCheck.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.smsc.EventCheck.prototype.setOrderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.smsc.OrderState = {
  OSUNDEFINED: 0,
  OSTODELIVERED: 1,
  OSTOCARRIED: 2,
  OSCARRYING: 3,
  OSCHECKED: 4,
  OSREFUSED: 5
};

/**
 * @enum {number}
 */
proto.smsc.Role = {
  RUNDEFINED: 0,
  RPLANNER: 1,
  RSUPPLIER: 2,
  RCARRIER: 3,
  RCHECKER: 4
};

/**
 * @enum {number}
 */
proto.smsc.MessageType = {
  MSGERROR: 0,
  MSGSETADMIN: 1,
  MSGCREATEACCOUNT: 2,
  MSGEDITACCOUNT: 3,
  MSGDELETEACCOUNT: 4,
  MSGSETSUPPLIER: 5,
  MSGCREATEORDER: 6,
  MSGDELIVERY: 7,
  MSGCARRY: 8,
  MSGCHECK: 9,
  MSGCOUNT: 10
};

/**
 * @enum {number}
 */
proto.smsc.Operate = {
  OUNDEFINED: 0,
  OADD: 1,
  ODEL: 2,
  OREFUSE: 3,
  OPASS: 4
};

goog.object.extend(exports, proto.smsc);
