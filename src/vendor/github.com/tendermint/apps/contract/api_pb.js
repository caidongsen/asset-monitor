/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.contract.Contract', null, global);
goog.exportSymbol('proto.contract.ContractState', null, global);
goog.exportSymbol('proto.contract.Event', null, global);
goog.exportSymbol('proto.contract.EventAcceptContract', null, global);
goog.exportSymbol('proto.contract.EventChangePubkey', null, global);
goog.exportSymbol('proto.contract.EventCreateContract', null, global);
goog.exportSymbol('proto.contract.EventDisuseContract', null, global);
goog.exportSymbol('proto.contract.EventLaunchSign', null, global);
goog.exportSymbol('proto.contract.EventRejectContract', null, global);
goog.exportSymbol('proto.contract.EventRepairContract', null, global);
goog.exportSymbol('proto.contract.EventUserCreate', null, global);
goog.exportSymbol('proto.contract.MessageType', null, global);
goog.exportSymbol('proto.contract.Receipt', null, global);
goog.exportSymbol('proto.contract.Request', null, global);
goog.exportSymbol('proto.contract.RequestAcceptContract', null, global);
goog.exportSymbol('proto.contract.RequestChangePubkey', null, global);
goog.exportSymbol('proto.contract.RequestCreateContract', null, global);
goog.exportSymbol('proto.contract.RequestCreatorSign', null, global);
goog.exportSymbol('proto.contract.RequestDisuseContract', null, global);
goog.exportSymbol('proto.contract.RequestEditContract', null, global);
goog.exportSymbol('proto.contract.RequestLaunchSign', null, global);
goog.exportSymbol('proto.contract.RequestRejectContract', null, global);
goog.exportSymbol('proto.contract.RequestRepairContract', null, global);
goog.exportSymbol('proto.contract.RequestUserCreate', null, global);
goog.exportSymbol('proto.contract.Response', null, global);
goog.exportSymbol('proto.contract.ResponseAcceptContract', null, global);
goog.exportSymbol('proto.contract.ResponseChangePubkey', null, global);
goog.exportSymbol('proto.contract.ResponseCreateContract', null, global);
goog.exportSymbol('proto.contract.ResponseCreatorSign', null, global);
goog.exportSymbol('proto.contract.ResponseDisuseContract', null, global);
goog.exportSymbol('proto.contract.ResponseEditContract', null, global);
goog.exportSymbol('proto.contract.ResponseException', null, global);
goog.exportSymbol('proto.contract.ResponseLaunchSign', null, global);
goog.exportSymbol('proto.contract.ResponseOK', null, global);
goog.exportSymbol('proto.contract.ResponseRejectContract', null, global);
goog.exportSymbol('proto.contract.ResponseRepairContract', null, global);
goog.exportSymbol('proto.contract.ResponseUserCreate', null, global);
goog.exportSymbol('proto.contract.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.contract.Request.oneofGroups_);
};
goog.inherits(proto.contract.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.Request.displayName = 'proto.contract.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.contract.Request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.contract.Request.ValueCase = {
  VALUE_NOT_SET: 0,
  USERCREATE: 1,
  CHANGEPUBKEY: 2,
  CREATECONTRACT: 3,
  LAUNCHSIGN: 4,
  CREATORSIGN: 5,
  EDITCONTRACT: 6,
  REJECTCONTRACT: 7,
  ACCEPTCONTRACT: 8,
  REPAIRCONTRACT: 9,
  DISUSECONTRACT: 10
};

/**
 * @return {proto.contract.Request.ValueCase}
 */
proto.contract.Request.prototype.getValueCase = function() {
  return /** @type {proto.contract.Request.ValueCase} */(jspb.Message.computeOneofCase(this, proto.contract.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercreate: (f = msg.getUsercreate()) && proto.contract.RequestUserCreate.toObject(includeInstance, f),
    changepubkey: (f = msg.getChangepubkey()) && proto.contract.RequestChangePubkey.toObject(includeInstance, f),
    createcontract: (f = msg.getCreatecontract()) && proto.contract.RequestCreateContract.toObject(includeInstance, f),
    launchsign: (f = msg.getLaunchsign()) && proto.contract.RequestLaunchSign.toObject(includeInstance, f),
    creatorsign: (f = msg.getCreatorsign()) && proto.contract.RequestCreatorSign.toObject(includeInstance, f),
    editcontract: (f = msg.getEditcontract()) && proto.contract.RequestEditContract.toObject(includeInstance, f),
    rejectcontract: (f = msg.getRejectcontract()) && proto.contract.RequestRejectContract.toObject(includeInstance, f),
    acceptcontract: (f = msg.getAcceptcontract()) && proto.contract.RequestAcceptContract.toObject(includeInstance, f),
    repaircontract: (f = msg.getRepaircontract()) && proto.contract.RequestRepairContract.toObject(includeInstance, f),
    disusecontract: (f = msg.getDisusecontract()) && proto.contract.RequestDisuseContract.toObject(includeInstance, f),
    uid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    instructionid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    pubkey: msg.getPubkey_asB64(),
    sign: msg.getSign_asB64(),
    actionid: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.Request}
 */
proto.contract.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.Request;
  return proto.contract.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.Request}
 */
proto.contract.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.contract.RequestUserCreate;
      reader.readMessage(value,proto.contract.RequestUserCreate.deserializeBinaryFromReader);
      msg.setUsercreate(value);
      break;
    case 2:
      var value = new proto.contract.RequestChangePubkey;
      reader.readMessage(value,proto.contract.RequestChangePubkey.deserializeBinaryFromReader);
      msg.setChangepubkey(value);
      break;
    case 3:
      var value = new proto.contract.RequestCreateContract;
      reader.readMessage(value,proto.contract.RequestCreateContract.deserializeBinaryFromReader);
      msg.setCreatecontract(value);
      break;
    case 4:
      var value = new proto.contract.RequestLaunchSign;
      reader.readMessage(value,proto.contract.RequestLaunchSign.deserializeBinaryFromReader);
      msg.setLaunchsign(value);
      break;
    case 5:
      var value = new proto.contract.RequestCreatorSign;
      reader.readMessage(value,proto.contract.RequestCreatorSign.deserializeBinaryFromReader);
      msg.setCreatorsign(value);
      break;
    case 6:
      var value = new proto.contract.RequestEditContract;
      reader.readMessage(value,proto.contract.RequestEditContract.deserializeBinaryFromReader);
      msg.setEditcontract(value);
      break;
    case 7:
      var value = new proto.contract.RequestRejectContract;
      reader.readMessage(value,proto.contract.RequestRejectContract.deserializeBinaryFromReader);
      msg.setRejectcontract(value);
      break;
    case 8:
      var value = new proto.contract.RequestAcceptContract;
      reader.readMessage(value,proto.contract.RequestAcceptContract.deserializeBinaryFromReader);
      msg.setAcceptcontract(value);
      break;
    case 9:
      var value = new proto.contract.RequestRepairContract;
      reader.readMessage(value,proto.contract.RequestRepairContract.deserializeBinaryFromReader);
      msg.setRepaircontract(value);
      break;
    case 10:
      var value = new proto.contract.RequestDisuseContract;
      reader.readMessage(value,proto.contract.RequestDisuseContract.deserializeBinaryFromReader);
      msg.setDisusecontract(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    case 15:
      var value = /** @type {!proto.contract.MessageType} */ (reader.readEnum());
      msg.setActionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsercreate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.contract.RequestUserCreate.serializeBinaryToWriter
    );
  }
  f = this.getChangepubkey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.RequestChangePubkey.serializeBinaryToWriter
    );
  }
  f = this.getCreatecontract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.contract.RequestCreateContract.serializeBinaryToWriter
    );
  }
  f = this.getLaunchsign();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contract.RequestLaunchSign.serializeBinaryToWriter
    );
  }
  f = this.getCreatorsign();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contract.RequestCreatorSign.serializeBinaryToWriter
    );
  }
  f = this.getEditcontract();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contract.RequestEditContract.serializeBinaryToWriter
    );
  }
  f = this.getRejectcontract();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.contract.RequestRejectContract.serializeBinaryToWriter
    );
  }
  f = this.getAcceptcontract();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.contract.RequestAcceptContract.serializeBinaryToWriter
    );
  }
  f = this.getRepaircontract();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.contract.RequestRepairContract.serializeBinaryToWriter
    );
  }
  f = this.getDisusecontract();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.contract.RequestDisuseContract.serializeBinaryToWriter
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = this.getActionid();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional RequestUserCreate userCreate = 1;
 * @return {?proto.contract.RequestUserCreate}
 */
proto.contract.Request.prototype.getUsercreate = function() {
  return /** @type{?proto.contract.RequestUserCreate} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestUserCreate, 1));
};


/** @param {?proto.contract.RequestUserCreate|undefined} value */
proto.contract.Request.prototype.setUsercreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearUsercreate = function() {
  this.setUsercreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasUsercreate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestChangePubkey changePubkey = 2;
 * @return {?proto.contract.RequestChangePubkey}
 */
proto.contract.Request.prototype.getChangepubkey = function() {
  return /** @type{?proto.contract.RequestChangePubkey} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestChangePubkey, 2));
};


/** @param {?proto.contract.RequestChangePubkey|undefined} value */
proto.contract.Request.prototype.setChangepubkey = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearChangepubkey = function() {
  this.setChangepubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasChangepubkey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestCreateContract createContract = 3;
 * @return {?proto.contract.RequestCreateContract}
 */
proto.contract.Request.prototype.getCreatecontract = function() {
  return /** @type{?proto.contract.RequestCreateContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestCreateContract, 3));
};


/** @param {?proto.contract.RequestCreateContract|undefined} value */
proto.contract.Request.prototype.setCreatecontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearCreatecontract = function() {
  this.setCreatecontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasCreatecontract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestLaunchSign launchSign = 4;
 * @return {?proto.contract.RequestLaunchSign}
 */
proto.contract.Request.prototype.getLaunchsign = function() {
  return /** @type{?proto.contract.RequestLaunchSign} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestLaunchSign, 4));
};


/** @param {?proto.contract.RequestLaunchSign|undefined} value */
proto.contract.Request.prototype.setLaunchsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearLaunchsign = function() {
  this.setLaunchsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasLaunchsign = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestCreatorSign creatorSign = 5;
 * @return {?proto.contract.RequestCreatorSign}
 */
proto.contract.Request.prototype.getCreatorsign = function() {
  return /** @type{?proto.contract.RequestCreatorSign} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestCreatorSign, 5));
};


/** @param {?proto.contract.RequestCreatorSign|undefined} value */
proto.contract.Request.prototype.setCreatorsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearCreatorsign = function() {
  this.setCreatorsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasCreatorsign = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestEditContract editContract = 6;
 * @return {?proto.contract.RequestEditContract}
 */
proto.contract.Request.prototype.getEditcontract = function() {
  return /** @type{?proto.contract.RequestEditContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestEditContract, 6));
};


/** @param {?proto.contract.RequestEditContract|undefined} value */
proto.contract.Request.prototype.setEditcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearEditcontract = function() {
  this.setEditcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasEditcontract = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestRejectContract rejectContract = 7;
 * @return {?proto.contract.RequestRejectContract}
 */
proto.contract.Request.prototype.getRejectcontract = function() {
  return /** @type{?proto.contract.RequestRejectContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestRejectContract, 7));
};


/** @param {?proto.contract.RequestRejectContract|undefined} value */
proto.contract.Request.prototype.setRejectcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearRejectcontract = function() {
  this.setRejectcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasRejectcontract = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RequestAcceptContract acceptContract = 8;
 * @return {?proto.contract.RequestAcceptContract}
 */
proto.contract.Request.prototype.getAcceptcontract = function() {
  return /** @type{?proto.contract.RequestAcceptContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestAcceptContract, 8));
};


/** @param {?proto.contract.RequestAcceptContract|undefined} value */
proto.contract.Request.prototype.setAcceptcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearAcceptcontract = function() {
  this.setAcceptcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasAcceptcontract = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestRepairContract repairContract = 9;
 * @return {?proto.contract.RequestRepairContract}
 */
proto.contract.Request.prototype.getRepaircontract = function() {
  return /** @type{?proto.contract.RequestRepairContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestRepairContract, 9));
};


/** @param {?proto.contract.RequestRepairContract|undefined} value */
proto.contract.Request.prototype.setRepaircontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearRepaircontract = function() {
  this.setRepaircontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasRepaircontract = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RequestDisuseContract disuseContract = 10;
 * @return {?proto.contract.RequestDisuseContract}
 */
proto.contract.Request.prototype.getDisusecontract = function() {
  return /** @type{?proto.contract.RequestDisuseContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.RequestDisuseContract, 10));
};


/** @param {?proto.contract.RequestDisuseContract|undefined} value */
proto.contract.Request.prototype.setDisusecontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.contract.Request.oneofGroups_[0], value);
};


proto.contract.Request.prototype.clearDisusecontract = function() {
  this.setDisusecontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Request.prototype.hasDisusecontract = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string uid = 11;
 * @return {string}
 */
proto.contract.Request.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.contract.Request.prototype.setUid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int64 instructionId = 12;
 * @return {number}
 */
proto.contract.Request.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.contract.Request.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes pubkey = 13;
 * @return {!(string|Uint8Array)}
 */
proto.contract.Request.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes pubkey = 13;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.contract.Request.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.contract.Request.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.Request.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bytes sign = 14;
 * @return {!(string|Uint8Array)}
 */
proto.contract.Request.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes sign = 14;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.contract.Request.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.contract.Request.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.Request.prototype.setSign = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional MessageType actionId = 15;
 * @return {!proto.contract.MessageType}
 */
proto.contract.Request.prototype.getActionid = function() {
  return /** @type {!proto.contract.MessageType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.contract.MessageType} value */
proto.contract.Request.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestUserCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestUserCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestUserCreate.displayName = 'proto.contract.RequestUserCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestUserCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestUserCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestUserCreate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestUserCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubkey: msg.getPubkey_asB64(),
    info: msg.getInfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestUserCreate}
 */
proto.contract.RequestUserCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestUserCreate;
  return proto.contract.RequestUserCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestUserCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestUserCreate}
 */
proto.contract.RequestUserCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestUserCreate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestUserCreate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestUserCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestUserCreate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.contract.RequestUserCreate.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.RequestUserCreate.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.contract.RequestUserCreate.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pubkey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.contract.RequestUserCreate.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.contract.RequestUserCreate.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.RequestUserCreate.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes info = 3;
 * @return {!(string|Uint8Array)}
 */
proto.contract.RequestUserCreate.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes info = 3;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.contract.RequestUserCreate.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.contract.RequestUserCreate.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.RequestUserCreate.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestChangePubkey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestChangePubkey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestChangePubkey.displayName = 'proto.contract.RequestChangePubkey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestChangePubkey.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestChangePubkey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestChangePubkey} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestChangePubkey.toObject = function(includeInstance, msg) {
  var f, obj = {
    newpubkey: msg.getNewpubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestChangePubkey}
 */
proto.contract.RequestChangePubkey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestChangePubkey;
  return proto.contract.RequestChangePubkey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestChangePubkey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestChangePubkey}
 */
proto.contract.RequestChangePubkey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewpubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestChangePubkey} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestChangePubkey.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestChangePubkey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestChangePubkey.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewpubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes newPubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contract.RequestChangePubkey.prototype.getNewpubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes newPubkey = 1;
 * This is a type-conversion wrapper around `getNewpubkey()`
 * @return {string}
 */
proto.contract.RequestChangePubkey.prototype.getNewpubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewpubkey()));
};


/**
 * optional bytes newPubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewpubkey()`
 * @return {!Uint8Array}
 */
proto.contract.RequestChangePubkey.prototype.getNewpubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewpubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.RequestChangePubkey.prototype.setNewpubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestCreateContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestCreateContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestCreateContract.displayName = 'proto.contract.RequestCreateContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestCreateContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestCreateContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestCreateContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestCreateContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    info: msg.getInfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestCreateContract}
 */
proto.contract.RequestCreateContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestCreateContract;
  return proto.contract.RequestCreateContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestCreateContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestCreateContract}
 */
proto.contract.RequestCreateContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestCreateContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestCreateContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestCreateContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestCreateContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.contract.RequestCreateContract.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.RequestCreateContract.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes info = 2;
 * @return {!(string|Uint8Array)}
 */
proto.contract.RequestCreateContract.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes info = 2;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.contract.RequestCreateContract.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.contract.RequestCreateContract.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.RequestCreateContract.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestLaunchSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.RequestLaunchSign.repeatedFields_, null);
};
goog.inherits(proto.contract.RequestLaunchSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestLaunchSign.displayName = 'proto.contract.RequestLaunchSign';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.RequestLaunchSign.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestLaunchSign.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestLaunchSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestLaunchSign} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestLaunchSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signersList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestLaunchSign}
 */
proto.contract.RequestLaunchSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestLaunchSign;
  return proto.contract.RequestLaunchSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestLaunchSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestLaunchSign}
 */
proto.contract.RequestLaunchSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSigners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestLaunchSign} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestLaunchSign.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestLaunchSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestLaunchSign.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getEndt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string contractId = 1;
 * @return {string}
 */
proto.contract.RequestLaunchSign.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.RequestLaunchSign.prototype.setContractid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 endT = 2;
 * @return {number}
 */
proto.contract.RequestLaunchSign.prototype.getEndt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.contract.RequestLaunchSign.prototype.setEndt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string signers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.contract.RequestLaunchSign.prototype.getSignersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.contract.RequestLaunchSign.prototype.setSignersList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.contract.RequestLaunchSign.prototype.addSigners = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.contract.RequestLaunchSign.prototype.clearSignersList = function() {
  this.setSignersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestCreatorSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestCreatorSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestCreatorSign.displayName = 'proto.contract.RequestCreatorSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestCreatorSign.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestCreatorSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestCreatorSign} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestCreatorSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    signt: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestCreatorSign}
 */
proto.contract.RequestCreatorSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestCreatorSign;
  return proto.contract.RequestCreatorSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestCreatorSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestCreatorSign}
 */
proto.contract.RequestCreatorSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSignt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestCreatorSign} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestCreatorSign.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestCreatorSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestCreatorSign.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSignt();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 signT = 1;
 * @return {number}
 */
proto.contract.RequestCreatorSign.prototype.getSignt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.RequestCreatorSign.prototype.setSignt = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestEditContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestEditContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestEditContract.displayName = 'proto.contract.RequestEditContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestEditContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestEditContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestEditContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestEditContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: msg.getInfo_asB64(),
    editt: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestEditContract}
 */
proto.contract.RequestEditContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestEditContract;
  return proto.contract.RequestEditContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestEditContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestEditContract}
 */
proto.contract.RequestEditContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEditt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestEditContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestEditContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestEditContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestEditContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getEditt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes info = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contract.RequestEditContract.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes info = 1;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.contract.RequestEditContract.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.contract.RequestEditContract.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.RequestEditContract.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 editT = 2;
 * @return {number}
 */
proto.contract.RequestEditContract.prototype.getEditt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.contract.RequestEditContract.prototype.setEditt = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestRejectContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestRejectContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestRejectContract.displayName = 'proto.contract.RequestRejectContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestRejectContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestRejectContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestRejectContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestRejectContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestRejectContract}
 */
proto.contract.RequestRejectContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestRejectContract;
  return proto.contract.RequestRejectContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestRejectContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestRejectContract}
 */
proto.contract.RequestRejectContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestRejectContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestRejectContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestRejectContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestRejectContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.contract.RequestRejectContract.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.RequestRejectContract.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestAcceptContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestAcceptContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestAcceptContract.displayName = 'proto.contract.RequestAcceptContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestAcceptContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestAcceptContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestAcceptContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestAcceptContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestAcceptContract}
 */
proto.contract.RequestAcceptContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestAcceptContract;
  return proto.contract.RequestAcceptContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestAcceptContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestAcceptContract}
 */
proto.contract.RequestAcceptContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestAcceptContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestAcceptContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestAcceptContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestAcceptContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.contract.RequestAcceptContract.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.RequestAcceptContract.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestRepairContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestRepairContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestRepairContract.displayName = 'proto.contract.RequestRepairContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestRepairContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestRepairContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestRepairContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestRepairContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: msg.getInfo_asB64(),
    endt: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestRepairContract}
 */
proto.contract.RequestRepairContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestRepairContract;
  return proto.contract.RequestRepairContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestRepairContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestRepairContract}
 */
proto.contract.RequestRepairContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestRepairContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestRepairContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestRepairContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestRepairContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getEndt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes info = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contract.RequestRepairContract.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes info = 1;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.contract.RequestRepairContract.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.contract.RequestRepairContract.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.RequestRepairContract.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 endT = 2;
 * @return {number}
 */
proto.contract.RequestRepairContract.prototype.getEndt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.contract.RequestRepairContract.prototype.setEndt = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.RequestDisuseContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.RequestDisuseContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.RequestDisuseContract.displayName = 'proto.contract.RequestDisuseContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.RequestDisuseContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.RequestDisuseContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.RequestDisuseContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.RequestDisuseContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    disuset: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.RequestDisuseContract}
 */
proto.contract.RequestDisuseContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.RequestDisuseContract;
  return proto.contract.RequestDisuseContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.RequestDisuseContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.RequestDisuseContract}
 */
proto.contract.RequestDisuseContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDisuset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.RequestDisuseContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestDisuseContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.RequestDisuseContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.RequestDisuseContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDisuset();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 disuseT = 1;
 * @return {number}
 */
proto.contract.RequestDisuseContract.prototype.getDisuset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.RequestDisuseContract.prototype.setDisuset = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.contract.Response.oneofGroups_);
};
goog.inherits(proto.contract.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.Response.displayName = 'proto.contract.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.contract.Response.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.contract.Response.ValueCase = {
  VALUE_NOT_SET: 0,
  USERCREATE: 1,
  CHANGEPUBKEY: 2,
  CREATECONTRACT: 3,
  LAUNCHSIGN: 4,
  CREATORSIGN: 5,
  EDITCONTRACT: 6,
  REJECTCONTRACT: 7,
  ACCEPTCONTRACT: 8,
  REPAIRCONTRACT: 9,
  DISUSECONTRACT: 10,
  OK: 11,
  EXCEPTION: 12
};

/**
 * @return {proto.contract.Response.ValueCase}
 */
proto.contract.Response.prototype.getValueCase = function() {
  return /** @type {proto.contract.Response.ValueCase} */(jspb.Message.computeOneofCase(this, proto.contract.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercreate: (f = msg.getUsercreate()) && proto.contract.ResponseUserCreate.toObject(includeInstance, f),
    changepubkey: (f = msg.getChangepubkey()) && proto.contract.ResponseChangePubkey.toObject(includeInstance, f),
    createcontract: (f = msg.getCreatecontract()) && proto.contract.ResponseCreateContract.toObject(includeInstance, f),
    launchsign: (f = msg.getLaunchsign()) && proto.contract.ResponseLaunchSign.toObject(includeInstance, f),
    creatorsign: (f = msg.getCreatorsign()) && proto.contract.ResponseCreatorSign.toObject(includeInstance, f),
    editcontract: (f = msg.getEditcontract()) && proto.contract.ResponseEditContract.toObject(includeInstance, f),
    rejectcontract: (f = msg.getRejectcontract()) && proto.contract.ResponseRejectContract.toObject(includeInstance, f),
    acceptcontract: (f = msg.getAcceptcontract()) && proto.contract.ResponseAcceptContract.toObject(includeInstance, f),
    repaircontract: (f = msg.getRepaircontract()) && proto.contract.ResponseRepairContract.toObject(includeInstance, f),
    disusecontract: (f = msg.getDisusecontract()) && proto.contract.ResponseDisuseContract.toObject(includeInstance, f),
    ok: (f = msg.getOk()) && proto.contract.ResponseOK.toObject(includeInstance, f),
    exception: (f = msg.getException()) && proto.contract.ResponseException.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.Response}
 */
proto.contract.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.Response;
  return proto.contract.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.Response}
 */
proto.contract.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.contract.ResponseUserCreate;
      reader.readMessage(value,proto.contract.ResponseUserCreate.deserializeBinaryFromReader);
      msg.setUsercreate(value);
      break;
    case 2:
      var value = new proto.contract.ResponseChangePubkey;
      reader.readMessage(value,proto.contract.ResponseChangePubkey.deserializeBinaryFromReader);
      msg.setChangepubkey(value);
      break;
    case 3:
      var value = new proto.contract.ResponseCreateContract;
      reader.readMessage(value,proto.contract.ResponseCreateContract.deserializeBinaryFromReader);
      msg.setCreatecontract(value);
      break;
    case 4:
      var value = new proto.contract.ResponseLaunchSign;
      reader.readMessage(value,proto.contract.ResponseLaunchSign.deserializeBinaryFromReader);
      msg.setLaunchsign(value);
      break;
    case 5:
      var value = new proto.contract.ResponseCreatorSign;
      reader.readMessage(value,proto.contract.ResponseCreatorSign.deserializeBinaryFromReader);
      msg.setCreatorsign(value);
      break;
    case 6:
      var value = new proto.contract.ResponseEditContract;
      reader.readMessage(value,proto.contract.ResponseEditContract.deserializeBinaryFromReader);
      msg.setEditcontract(value);
      break;
    case 7:
      var value = new proto.contract.ResponseRejectContract;
      reader.readMessage(value,proto.contract.ResponseRejectContract.deserializeBinaryFromReader);
      msg.setRejectcontract(value);
      break;
    case 8:
      var value = new proto.contract.ResponseAcceptContract;
      reader.readMessage(value,proto.contract.ResponseAcceptContract.deserializeBinaryFromReader);
      msg.setAcceptcontract(value);
      break;
    case 9:
      var value = new proto.contract.ResponseRepairContract;
      reader.readMessage(value,proto.contract.ResponseRepairContract.deserializeBinaryFromReader);
      msg.setRepaircontract(value);
      break;
    case 10:
      var value = new proto.contract.ResponseDisuseContract;
      reader.readMessage(value,proto.contract.ResponseDisuseContract.deserializeBinaryFromReader);
      msg.setDisusecontract(value);
      break;
    case 11:
      var value = new proto.contract.ResponseOK;
      reader.readMessage(value,proto.contract.ResponseOK.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 12:
      var value = new proto.contract.ResponseException;
      reader.readMessage(value,proto.contract.ResponseException.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsercreate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.contract.ResponseUserCreate.serializeBinaryToWriter
    );
  }
  f = this.getChangepubkey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.ResponseChangePubkey.serializeBinaryToWriter
    );
  }
  f = this.getCreatecontract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.contract.ResponseCreateContract.serializeBinaryToWriter
    );
  }
  f = this.getLaunchsign();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contract.ResponseLaunchSign.serializeBinaryToWriter
    );
  }
  f = this.getCreatorsign();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contract.ResponseCreatorSign.serializeBinaryToWriter
    );
  }
  f = this.getEditcontract();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contract.ResponseEditContract.serializeBinaryToWriter
    );
  }
  f = this.getRejectcontract();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.contract.ResponseRejectContract.serializeBinaryToWriter
    );
  }
  f = this.getAcceptcontract();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.contract.ResponseAcceptContract.serializeBinaryToWriter
    );
  }
  f = this.getRepaircontract();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.contract.ResponseRepairContract.serializeBinaryToWriter
    );
  }
  f = this.getDisusecontract();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.contract.ResponseDisuseContract.serializeBinaryToWriter
    );
  }
  f = this.getOk();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.contract.ResponseOK.serializeBinaryToWriter
    );
  }
  f = this.getException();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.contract.ResponseException.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseUserCreate userCreate = 1;
 * @return {?proto.contract.ResponseUserCreate}
 */
proto.contract.Response.prototype.getUsercreate = function() {
  return /** @type{?proto.contract.ResponseUserCreate} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseUserCreate, 1));
};


/** @param {?proto.contract.ResponseUserCreate|undefined} value */
proto.contract.Response.prototype.setUsercreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearUsercreate = function() {
  this.setUsercreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasUsercreate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseChangePubkey changePubkey = 2;
 * @return {?proto.contract.ResponseChangePubkey}
 */
proto.contract.Response.prototype.getChangepubkey = function() {
  return /** @type{?proto.contract.ResponseChangePubkey} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseChangePubkey, 2));
};


/** @param {?proto.contract.ResponseChangePubkey|undefined} value */
proto.contract.Response.prototype.setChangepubkey = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearChangepubkey = function() {
  this.setChangepubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasChangepubkey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseCreateContract createContract = 3;
 * @return {?proto.contract.ResponseCreateContract}
 */
proto.contract.Response.prototype.getCreatecontract = function() {
  return /** @type{?proto.contract.ResponseCreateContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseCreateContract, 3));
};


/** @param {?proto.contract.ResponseCreateContract|undefined} value */
proto.contract.Response.prototype.setCreatecontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearCreatecontract = function() {
  this.setCreatecontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasCreatecontract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseLaunchSign launchSign = 4;
 * @return {?proto.contract.ResponseLaunchSign}
 */
proto.contract.Response.prototype.getLaunchsign = function() {
  return /** @type{?proto.contract.ResponseLaunchSign} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseLaunchSign, 4));
};


/** @param {?proto.contract.ResponseLaunchSign|undefined} value */
proto.contract.Response.prototype.setLaunchsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearLaunchsign = function() {
  this.setLaunchsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasLaunchsign = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResponseCreatorSign creatorSign = 5;
 * @return {?proto.contract.ResponseCreatorSign}
 */
proto.contract.Response.prototype.getCreatorsign = function() {
  return /** @type{?proto.contract.ResponseCreatorSign} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseCreatorSign, 5));
};


/** @param {?proto.contract.ResponseCreatorSign|undefined} value */
proto.contract.Response.prototype.setCreatorsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearCreatorsign = function() {
  this.setCreatorsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasCreatorsign = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResponseEditContract editContract = 6;
 * @return {?proto.contract.ResponseEditContract}
 */
proto.contract.Response.prototype.getEditcontract = function() {
  return /** @type{?proto.contract.ResponseEditContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseEditContract, 6));
};


/** @param {?proto.contract.ResponseEditContract|undefined} value */
proto.contract.Response.prototype.setEditcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearEditcontract = function() {
  this.setEditcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasEditcontract = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ResponseRejectContract rejectContract = 7;
 * @return {?proto.contract.ResponseRejectContract}
 */
proto.contract.Response.prototype.getRejectcontract = function() {
  return /** @type{?proto.contract.ResponseRejectContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseRejectContract, 7));
};


/** @param {?proto.contract.ResponseRejectContract|undefined} value */
proto.contract.Response.prototype.setRejectcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearRejectcontract = function() {
  this.setRejectcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasRejectcontract = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ResponseAcceptContract acceptContract = 8;
 * @return {?proto.contract.ResponseAcceptContract}
 */
proto.contract.Response.prototype.getAcceptcontract = function() {
  return /** @type{?proto.contract.ResponseAcceptContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseAcceptContract, 8));
};


/** @param {?proto.contract.ResponseAcceptContract|undefined} value */
proto.contract.Response.prototype.setAcceptcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearAcceptcontract = function() {
  this.setAcceptcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasAcceptcontract = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ResponseRepairContract repairContract = 9;
 * @return {?proto.contract.ResponseRepairContract}
 */
proto.contract.Response.prototype.getRepaircontract = function() {
  return /** @type{?proto.contract.ResponseRepairContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseRepairContract, 9));
};


/** @param {?proto.contract.ResponseRepairContract|undefined} value */
proto.contract.Response.prototype.setRepaircontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearRepaircontract = function() {
  this.setRepaircontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasRepaircontract = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ResponseDisuseContract disuseContract = 10;
 * @return {?proto.contract.ResponseDisuseContract}
 */
proto.contract.Response.prototype.getDisusecontract = function() {
  return /** @type{?proto.contract.ResponseDisuseContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseDisuseContract, 10));
};


/** @param {?proto.contract.ResponseDisuseContract|undefined} value */
proto.contract.Response.prototype.setDisusecontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearDisusecontract = function() {
  this.setDisusecontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasDisusecontract = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ResponseOK ok = 11;
 * @return {?proto.contract.ResponseOK}
 */
proto.contract.Response.prototype.getOk = function() {
  return /** @type{?proto.contract.ResponseOK} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseOK, 11));
};


/** @param {?proto.contract.ResponseOK|undefined} value */
proto.contract.Response.prototype.setOk = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearOk = function() {
  this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasOk = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ResponseException exception = 12;
 * @return {?proto.contract.ResponseException}
 */
proto.contract.Response.prototype.getException = function() {
  return /** @type{?proto.contract.ResponseException} */ (
    jspb.Message.getWrapperField(this, proto.contract.ResponseException, 12));
};


/** @param {?proto.contract.ResponseException|undefined} value */
proto.contract.Response.prototype.setException = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.contract.Response.oneofGroups_[0], value);
};


proto.contract.Response.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Response.prototype.hasException = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseException = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseException, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseException.displayName = 'proto.contract.ResponseException';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseException.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseException.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseException} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseException.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseException}
 */
proto.contract.ResponseException.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseException;
  return proto.contract.ResponseException.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseException} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseException}
 */
proto.contract.ResponseException.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseException} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseException.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseException.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseException.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.contract.ResponseException.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.ResponseException.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseOK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseOK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseOK.displayName = 'proto.contract.ResponseOK';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseOK.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseOK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseOK} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseOK.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseOK}
 */
proto.contract.ResponseOK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseOK;
  return proto.contract.ResponseOK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseOK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseOK}
 */
proto.contract.ResponseOK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseOK} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseOK.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseOK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseOK.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.contract.ResponseOK.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.contract.ResponseOK.prototype.setOk = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.Receipt.displayName = 'proto.contract.Receipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.Receipt} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    isok: jspb.Message.getFieldWithDefault(msg, 1, false),
    err: msg.getErr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.Receipt}
 */
proto.contract.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.Receipt;
  return proto.contract.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.Receipt}
 */
proto.contract.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Receipt.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Receipt.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIsok();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getErr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bool isOk = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.contract.Receipt.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.contract.Receipt.prototype.setIsok = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes err = 2;
 * @return {!(string|Uint8Array)}
 */
proto.contract.Receipt.prototype.getErr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err = 2;
 * This is a type-conversion wrapper around `getErr()`
 * @return {string}
 */
proto.contract.Receipt.prototype.getErr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErr()));
};


/**
 * optional bytes err = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErr()`
 * @return {!Uint8Array}
 */
proto.contract.Receipt.prototype.getErr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErr()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.Receipt.prototype.setErr = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseUserCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseUserCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseUserCreate.displayName = 'proto.contract.ResponseUserCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseUserCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseUserCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseUserCreate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseUserCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseUserCreate}
 */
proto.contract.ResponseUserCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseUserCreate;
  return proto.contract.ResponseUserCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseUserCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseUserCreate}
 */
proto.contract.ResponseUserCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseUserCreate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseUserCreate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseUserCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseUserCreate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseUserCreate.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseUserCreate.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseUserCreate.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseUserCreate.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseUserCreate.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseUserCreate.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseChangePubkey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseChangePubkey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseChangePubkey.displayName = 'proto.contract.ResponseChangePubkey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseChangePubkey.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseChangePubkey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseChangePubkey} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseChangePubkey.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseChangePubkey}
 */
proto.contract.ResponseChangePubkey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseChangePubkey;
  return proto.contract.ResponseChangePubkey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseChangePubkey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseChangePubkey}
 */
proto.contract.ResponseChangePubkey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseChangePubkey} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseChangePubkey.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseChangePubkey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseChangePubkey.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseChangePubkey.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseChangePubkey.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseChangePubkey.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseChangePubkey.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseChangePubkey.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseChangePubkey.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseCreateContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseCreateContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseCreateContract.displayName = 'proto.contract.ResponseCreateContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseCreateContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseCreateContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseCreateContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseCreateContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseCreateContract}
 */
proto.contract.ResponseCreateContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseCreateContract;
  return proto.contract.ResponseCreateContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseCreateContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseCreateContract}
 */
proto.contract.ResponseCreateContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseCreateContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseCreateContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseCreateContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseCreateContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseCreateContract.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseCreateContract.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseCreateContract.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseCreateContract.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseCreateContract.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseCreateContract.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseLaunchSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseLaunchSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseLaunchSign.displayName = 'proto.contract.ResponseLaunchSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseLaunchSign.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseLaunchSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseLaunchSign} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseLaunchSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseLaunchSign}
 */
proto.contract.ResponseLaunchSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseLaunchSign;
  return proto.contract.ResponseLaunchSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseLaunchSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseLaunchSign}
 */
proto.contract.ResponseLaunchSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseLaunchSign} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseLaunchSign.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseLaunchSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseLaunchSign.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseLaunchSign.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseLaunchSign.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseLaunchSign.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseLaunchSign.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseLaunchSign.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseLaunchSign.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseCreatorSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseCreatorSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseCreatorSign.displayName = 'proto.contract.ResponseCreatorSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseCreatorSign.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseCreatorSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseCreatorSign} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseCreatorSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseCreatorSign}
 */
proto.contract.ResponseCreatorSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseCreatorSign;
  return proto.contract.ResponseCreatorSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseCreatorSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseCreatorSign}
 */
proto.contract.ResponseCreatorSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseCreatorSign} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseCreatorSign.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseCreatorSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseCreatorSign.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseCreatorSign.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseCreatorSign.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseEditContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseEditContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseEditContract.displayName = 'proto.contract.ResponseEditContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseEditContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseEditContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseEditContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseEditContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseEditContract}
 */
proto.contract.ResponseEditContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseEditContract;
  return proto.contract.ResponseEditContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseEditContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseEditContract}
 */
proto.contract.ResponseEditContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseEditContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseEditContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseEditContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseEditContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseEditContract.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseEditContract.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseRejectContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseRejectContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseRejectContract.displayName = 'proto.contract.ResponseRejectContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseRejectContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseRejectContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseRejectContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseRejectContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseRejectContract}
 */
proto.contract.ResponseRejectContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseRejectContract;
  return proto.contract.ResponseRejectContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseRejectContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseRejectContract}
 */
proto.contract.ResponseRejectContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseRejectContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseRejectContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseRejectContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseRejectContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseRejectContract.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseRejectContract.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseRejectContract.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseRejectContract.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseRejectContract.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseRejectContract.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseAcceptContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseAcceptContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseAcceptContract.displayName = 'proto.contract.ResponseAcceptContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseAcceptContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseAcceptContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseAcceptContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseAcceptContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseAcceptContract}
 */
proto.contract.ResponseAcceptContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseAcceptContract;
  return proto.contract.ResponseAcceptContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseAcceptContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseAcceptContract}
 */
proto.contract.ResponseAcceptContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseAcceptContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseAcceptContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseAcceptContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseAcceptContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseAcceptContract.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseAcceptContract.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseAcceptContract.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseAcceptContract.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseAcceptContract.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseAcceptContract.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseRepairContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseRepairContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseRepairContract.displayName = 'proto.contract.ResponseRepairContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseRepairContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseRepairContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseRepairContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseRepairContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseRepairContract}
 */
proto.contract.ResponseRepairContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseRepairContract;
  return proto.contract.ResponseRepairContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseRepairContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseRepairContract}
 */
proto.contract.ResponseRepairContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseRepairContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseRepairContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseRepairContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseRepairContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseRepairContract.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseRepairContract.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseRepairContract.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseRepairContract.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseRepairContract.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseRepairContract.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.ResponseDisuseContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.ResponseDisuseContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.ResponseDisuseContract.displayName = 'proto.contract.ResponseDisuseContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.ResponseDisuseContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.ResponseDisuseContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.ResponseDisuseContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.ResponseDisuseContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: (f = msg.getEvent()) && proto.contract.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.ResponseDisuseContract}
 */
proto.contract.ResponseDisuseContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.ResponseDisuseContract;
  return proto.contract.ResponseDisuseContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.ResponseDisuseContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.ResponseDisuseContract}
 */
proto.contract.ResponseDisuseContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstructionid(value);
      break;
    case 2:
      var value = new proto.contract.Event;
      reader.readMessage(value,proto.contract.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.ResponseDisuseContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseDisuseContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.ResponseDisuseContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.ResponseDisuseContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInstructionid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 instructionId = 1;
 * @return {number}
 */
proto.contract.ResponseDisuseContract.prototype.getInstructionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.ResponseDisuseContract.prototype.setInstructionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Event event = 2;
 * @return {?proto.contract.Event}
 */
proto.contract.ResponseDisuseContract.prototype.getEvent = function() {
  return /** @type{?proto.contract.Event} */ (
    jspb.Message.getWrapperField(this, proto.contract.Event, 2));
};


/** @param {?proto.contract.Event|undefined} value */
proto.contract.ResponseDisuseContract.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.contract.ResponseDisuseContract.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.ResponseDisuseContract.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.User.displayName = 'proto.contract.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.User.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.User} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64(),
    info: msg.getInfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.User}
 */
proto.contract.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.User;
  return proto.contract.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.User}
 */
proto.contract.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.User} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.User.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.User.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contract.User.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.contract.User.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.contract.User.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.User.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes info = 2;
 * @return {!(string|Uint8Array)}
 */
proto.contract.User.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes info = 2;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.contract.User.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.contract.User.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.User.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contract.Contract.repeatedFields_, null);
};
goog.inherits(proto.contract.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.Contract.displayName = 'proto.contract.Contract';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contract.Contract.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.Contract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    endt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: msg.getInfo_asB64(),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    creatoruid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    signersList: jspb.Message.getField(msg, 5),
    creatorsignt: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.Contract}
 */
proto.contract.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.Contract;
  return proto.contract.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.Contract}
 */
proto.contract.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    case 3:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatoruid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSigners(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatorsignt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.Contract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Contract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Contract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEndt();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getCreatoruid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = this.getCreatorsignt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int64 endT = 1;
 * @return {number}
 */
proto.contract.Contract.prototype.getEndt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.contract.Contract.prototype.setEndt = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes info = 2;
 * @return {!(string|Uint8Array)}
 */
proto.contract.Contract.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes info = 2;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.contract.Contract.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.contract.Contract.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.Contract.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ContractState state = 3;
 * @return {!proto.contract.ContractState}
 */
proto.contract.Contract.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.Contract.prototype.setState = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string creatorUid = 4;
 * @return {string}
 */
proto.contract.Contract.prototype.getCreatoruid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.contract.Contract.prototype.setCreatoruid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string signers = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.contract.Contract.prototype.getSignersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<string>} value */
proto.contract.Contract.prototype.setSignersList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.contract.Contract.prototype.addSigners = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.contract.Contract.prototype.clearSignersList = function() {
  this.setSignersList([]);
};


/**
 * optional int64 creatorSignT = 6;
 * @return {number}
 */
proto.contract.Contract.prototype.getCreatorsignt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.contract.Contract.prototype.setCreatorsignt = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.contract.Event.oneofGroups_);
};
goog.inherits(proto.contract.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.Event.displayName = 'proto.contract.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.contract.Event.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.contract.Event.ValueCase = {
  VALUE_NOT_SET: 0,
  USERCREATE: 1,
  CHANGEPUBKEY: 2,
  CREATECONTRACT: 3,
  LAUNCHSIGN: 4,
  REJECTCONTRACT: 5,
  ACCEPTCONTRACT: 6,
  REPAIRCONTRACT: 7,
  DISUSECONTRACT: 8
};

/**
 * @return {proto.contract.Event.ValueCase}
 */
proto.contract.Event.prototype.getValueCase = function() {
  return /** @type {proto.contract.Event.ValueCase} */(jspb.Message.computeOneofCase(this, proto.contract.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.Event} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercreate: (f = msg.getUsercreate()) && proto.contract.EventUserCreate.toObject(includeInstance, f),
    changepubkey: (f = msg.getChangepubkey()) && proto.contract.EventChangePubkey.toObject(includeInstance, f),
    createcontract: (f = msg.getCreatecontract()) && proto.contract.EventCreateContract.toObject(includeInstance, f),
    launchsign: (f = msg.getLaunchsign()) && proto.contract.EventLaunchSign.toObject(includeInstance, f),
    rejectcontract: (f = msg.getRejectcontract()) && proto.contract.EventRejectContract.toObject(includeInstance, f),
    acceptcontract: (f = msg.getAcceptcontract()) && proto.contract.EventAcceptContract.toObject(includeInstance, f),
    repaircontract: (f = msg.getRepaircontract()) && proto.contract.EventRepairContract.toObject(includeInstance, f),
    disusecontract: (f = msg.getDisusecontract()) && proto.contract.EventDisuseContract.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.Event}
 */
proto.contract.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.Event;
  return proto.contract.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.Event}
 */
proto.contract.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.contract.EventUserCreate;
      reader.readMessage(value,proto.contract.EventUserCreate.deserializeBinaryFromReader);
      msg.setUsercreate(value);
      break;
    case 2:
      var value = new proto.contract.EventChangePubkey;
      reader.readMessage(value,proto.contract.EventChangePubkey.deserializeBinaryFromReader);
      msg.setChangepubkey(value);
      break;
    case 3:
      var value = new proto.contract.EventCreateContract;
      reader.readMessage(value,proto.contract.EventCreateContract.deserializeBinaryFromReader);
      msg.setCreatecontract(value);
      break;
    case 4:
      var value = new proto.contract.EventLaunchSign;
      reader.readMessage(value,proto.contract.EventLaunchSign.deserializeBinaryFromReader);
      msg.setLaunchsign(value);
      break;
    case 5:
      var value = new proto.contract.EventRejectContract;
      reader.readMessage(value,proto.contract.EventRejectContract.deserializeBinaryFromReader);
      msg.setRejectcontract(value);
      break;
    case 6:
      var value = new proto.contract.EventAcceptContract;
      reader.readMessage(value,proto.contract.EventAcceptContract.deserializeBinaryFromReader);
      msg.setAcceptcontract(value);
      break;
    case 7:
      var value = new proto.contract.EventRepairContract;
      reader.readMessage(value,proto.contract.EventRepairContract.deserializeBinaryFromReader);
      msg.setRepaircontract(value);
      break;
    case 8:
      var value = new proto.contract.EventDisuseContract;
      reader.readMessage(value,proto.contract.EventDisuseContract.deserializeBinaryFromReader);
      msg.setDisusecontract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.Event} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Event.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.Event.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsercreate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.contract.EventUserCreate.serializeBinaryToWriter
    );
  }
  f = this.getChangepubkey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.contract.EventChangePubkey.serializeBinaryToWriter
    );
  }
  f = this.getCreatecontract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.contract.EventCreateContract.serializeBinaryToWriter
    );
  }
  f = this.getLaunchsign();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contract.EventLaunchSign.serializeBinaryToWriter
    );
  }
  f = this.getRejectcontract();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contract.EventRejectContract.serializeBinaryToWriter
    );
  }
  f = this.getAcceptcontract();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contract.EventAcceptContract.serializeBinaryToWriter
    );
  }
  f = this.getRepaircontract();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.contract.EventRepairContract.serializeBinaryToWriter
    );
  }
  f = this.getDisusecontract();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.contract.EventDisuseContract.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventUserCreate userCreate = 1;
 * @return {?proto.contract.EventUserCreate}
 */
proto.contract.Event.prototype.getUsercreate = function() {
  return /** @type{?proto.contract.EventUserCreate} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventUserCreate, 1));
};


/** @param {?proto.contract.EventUserCreate|undefined} value */
proto.contract.Event.prototype.setUsercreate = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearUsercreate = function() {
  this.setUsercreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasUsercreate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventChangePubkey changePubkey = 2;
 * @return {?proto.contract.EventChangePubkey}
 */
proto.contract.Event.prototype.getChangepubkey = function() {
  return /** @type{?proto.contract.EventChangePubkey} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventChangePubkey, 2));
};


/** @param {?proto.contract.EventChangePubkey|undefined} value */
proto.contract.Event.prototype.setChangepubkey = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearChangepubkey = function() {
  this.setChangepubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasChangepubkey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventCreateContract createContract = 3;
 * @return {?proto.contract.EventCreateContract}
 */
proto.contract.Event.prototype.getCreatecontract = function() {
  return /** @type{?proto.contract.EventCreateContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventCreateContract, 3));
};


/** @param {?proto.contract.EventCreateContract|undefined} value */
proto.contract.Event.prototype.setCreatecontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearCreatecontract = function() {
  this.setCreatecontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasCreatecontract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventLaunchSign launchSign = 4;
 * @return {?proto.contract.EventLaunchSign}
 */
proto.contract.Event.prototype.getLaunchsign = function() {
  return /** @type{?proto.contract.EventLaunchSign} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventLaunchSign, 4));
};


/** @param {?proto.contract.EventLaunchSign|undefined} value */
proto.contract.Event.prototype.setLaunchsign = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearLaunchsign = function() {
  this.setLaunchsign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasLaunchsign = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EventRejectContract rejectContract = 5;
 * @return {?proto.contract.EventRejectContract}
 */
proto.contract.Event.prototype.getRejectcontract = function() {
  return /** @type{?proto.contract.EventRejectContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventRejectContract, 5));
};


/** @param {?proto.contract.EventRejectContract|undefined} value */
proto.contract.Event.prototype.setRejectcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearRejectcontract = function() {
  this.setRejectcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasRejectcontract = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventAcceptContract acceptContract = 6;
 * @return {?proto.contract.EventAcceptContract}
 */
proto.contract.Event.prototype.getAcceptcontract = function() {
  return /** @type{?proto.contract.EventAcceptContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventAcceptContract, 6));
};


/** @param {?proto.contract.EventAcceptContract|undefined} value */
proto.contract.Event.prototype.setAcceptcontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearAcceptcontract = function() {
  this.setAcceptcontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasAcceptcontract = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventRepairContract repairContract = 7;
 * @return {?proto.contract.EventRepairContract}
 */
proto.contract.Event.prototype.getRepaircontract = function() {
  return /** @type{?proto.contract.EventRepairContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventRepairContract, 7));
};


/** @param {?proto.contract.EventRepairContract|undefined} value */
proto.contract.Event.prototype.setRepaircontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearRepaircontract = function() {
  this.setRepaircontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasRepaircontract = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventDisuseContract disuseContract = 8;
 * @return {?proto.contract.EventDisuseContract}
 */
proto.contract.Event.prototype.getDisusecontract = function() {
  return /** @type{?proto.contract.EventDisuseContract} */ (
    jspb.Message.getWrapperField(this, proto.contract.EventDisuseContract, 8));
};


/** @param {?proto.contract.EventDisuseContract|undefined} value */
proto.contract.Event.prototype.setDisusecontract = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.contract.Event.oneofGroups_[0], value);
};


proto.contract.Event.prototype.clearDisusecontract = function() {
  this.setDisusecontract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contract.Event.prototype.hasDisusecontract = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventUserCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventUserCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventUserCreate.displayName = 'proto.contract.EventUserCreate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventUserCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventUserCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventUserCreate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventUserCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventUserCreate}
 */
proto.contract.EventUserCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventUserCreate;
  return proto.contract.EventUserCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventUserCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventUserCreate}
 */
proto.contract.EventUserCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventUserCreate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventUserCreate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventUserCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventUserCreate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.contract.EventUserCreate.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.EventUserCreate.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventChangePubkey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventChangePubkey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventChangePubkey.displayName = 'proto.contract.EventChangePubkey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventChangePubkey.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventChangePubkey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventChangePubkey} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventChangePubkey.toObject = function(includeInstance, msg) {
  var f, obj = {
    newpubkey: msg.getNewpubkey_asB64(),
    uid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventChangePubkey}
 */
proto.contract.EventChangePubkey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventChangePubkey;
  return proto.contract.EventChangePubkey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventChangePubkey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventChangePubkey}
 */
proto.contract.EventChangePubkey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewpubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventChangePubkey} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventChangePubkey.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventChangePubkey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventChangePubkey.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewpubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes newPubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.contract.EventChangePubkey.prototype.getNewpubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes newPubkey = 1;
 * This is a type-conversion wrapper around `getNewpubkey()`
 * @return {string}
 */
proto.contract.EventChangePubkey.prototype.getNewpubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewpubkey()));
};


/**
 * optional bytes newPubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewpubkey()`
 * @return {!Uint8Array}
 */
proto.contract.EventChangePubkey.prototype.getNewpubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewpubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.contract.EventChangePubkey.prototype.setNewpubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.contract.EventChangePubkey.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.contract.EventChangePubkey.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventCreateContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventCreateContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventCreateContract.displayName = 'proto.contract.EventCreateContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventCreateContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventCreateContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventCreateContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventCreateContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventCreateContract}
 */
proto.contract.EventCreateContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventCreateContract;
  return proto.contract.EventCreateContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventCreateContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventCreateContract}
 */
proto.contract.EventCreateContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventCreateContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventCreateContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventCreateContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventCreateContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string contractId = 1;
 * @return {string}
 */
proto.contract.EventCreateContract.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contract.EventCreateContract.prototype.setContractid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ContractState state = 2;
 * @return {!proto.contract.ContractState}
 */
proto.contract.EventCreateContract.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.EventCreateContract.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventLaunchSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventLaunchSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventLaunchSign.displayName = 'proto.contract.EventLaunchSign';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventLaunchSign.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventLaunchSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventLaunchSign} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventLaunchSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventLaunchSign}
 */
proto.contract.EventLaunchSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventLaunchSign;
  return proto.contract.EventLaunchSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventLaunchSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventLaunchSign}
 */
proto.contract.EventLaunchSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventLaunchSign} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventLaunchSign.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventLaunchSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventLaunchSign.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ContractState state = 1;
 * @return {!proto.contract.ContractState}
 */
proto.contract.EventLaunchSign.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.EventLaunchSign.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventRejectContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventRejectContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventRejectContract.displayName = 'proto.contract.EventRejectContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventRejectContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventRejectContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventRejectContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventRejectContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventRejectContract}
 */
proto.contract.EventRejectContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventRejectContract;
  return proto.contract.EventRejectContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventRejectContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventRejectContract}
 */
proto.contract.EventRejectContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventRejectContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventRejectContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventRejectContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventRejectContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ContractState state = 1;
 * @return {!proto.contract.ContractState}
 */
proto.contract.EventRejectContract.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.EventRejectContract.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventAcceptContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventAcceptContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventAcceptContract.displayName = 'proto.contract.EventAcceptContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventAcceptContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventAcceptContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventAcceptContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventAcceptContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventAcceptContract}
 */
proto.contract.EventAcceptContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventAcceptContract;
  return proto.contract.EventAcceptContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventAcceptContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventAcceptContract}
 */
proto.contract.EventAcceptContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventAcceptContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventAcceptContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventAcceptContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventAcceptContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ContractState state = 1;
 * @return {!proto.contract.ContractState}
 */
proto.contract.EventAcceptContract.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.EventAcceptContract.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventRepairContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventRepairContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventRepairContract.displayName = 'proto.contract.EventRepairContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventRepairContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventRepairContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventRepairContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventRepairContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventRepairContract}
 */
proto.contract.EventRepairContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventRepairContract;
  return proto.contract.EventRepairContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventRepairContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventRepairContract}
 */
proto.contract.EventRepairContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventRepairContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventRepairContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventRepairContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventRepairContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ContractState state = 1;
 * @return {!proto.contract.ContractState}
 */
proto.contract.EventRepairContract.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.EventRepairContract.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contract.EventDisuseContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contract.EventDisuseContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contract.EventDisuseContract.displayName = 'proto.contract.EventDisuseContract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contract.EventDisuseContract.prototype.toObject = function(opt_includeInstance) {
  return proto.contract.EventDisuseContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contract.EventDisuseContract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contract.EventDisuseContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contract.EventDisuseContract}
 */
proto.contract.EventDisuseContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contract.EventDisuseContract;
  return proto.contract.EventDisuseContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contract.EventDisuseContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contract.EventDisuseContract}
 */
proto.contract.EventDisuseContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.contract.ContractState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contract.EventDisuseContract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventDisuseContract.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contract.EventDisuseContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contract.EventDisuseContract.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ContractState state = 1;
 * @return {!proto.contract.ContractState}
 */
proto.contract.EventDisuseContract.prototype.getState = function() {
  return /** @type {!proto.contract.ContractState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.contract.ContractState} value */
proto.contract.EventDisuseContract.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.contract.MessageType = {
  MSGERROR: 0,
  MSGINIT: 1,
  MSGSHUTDOWN: 2,
  MSGCLOSE: 3,
  MSGUSERCREATE: 4,
  MSGCHANGEPUBKEY: 5,
  MSGCREATECONTRACT: 6,
  MSGLAUNCHSIGN: 7,
  MSGCREATORSIGN: 8,
  MSGEDITCONTRACT: 9,
  MSGREJECTCONTRACT: 10,
  MSGACCEPTCONTRACT: 11,
  MSGREPAIRCONTRACT: 12,
  MSGDISUSECONTRACT: 13,
  MSGCOUNT: 14
};

/**
 * @enum {number}
 */
proto.contract.ContractState = {
  CSUNDEFINED: 0,
  CSCREATED: 1,
  CSLAUNCHED: 2,
  CSEDITED: 3,
  CSREPAIRED: 4
};

goog.object.extend(exports, proto.contract);
